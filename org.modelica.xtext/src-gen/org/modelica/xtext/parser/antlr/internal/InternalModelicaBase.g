/*
* generated by Xtext
*/
grammar InternalModelicaBase;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.modelica.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.modelica.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.modelica.xtext.services.ModelicaBaseGrammarAccess;

}

@parser::members {
 
 	private ModelicaBaseGrammarAccess grammarAccess;
 	
    public InternalModelicaBaseParser(TokenStream input, IAstFactory factory, ModelicaBaseGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/modelica/xtext/parser/antlr/internal/InternalModelicaBase.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "StorageUnit";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStorageUnit
entryRuleStorageUnit returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStorageUnitRule(), currentNode); }
	 iv_ruleStorageUnit=ruleStorageUnit 
	 { $current=$iv_ruleStorageUnit.current; } 
	 EOF 
;

// Rule StorageUnit
ruleStorageUnit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('within' 
    {
        createLeafNode(grammarAccess.getStorageUnitAccess().getWithinKeyword_0_0(), null); 
    }
(rulename_path)?RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getStorageUnitAccess().getSEMICOLONTerminalRuleCall_0_2(), null); 
    }
)?(('final' 
    {
        createLeafNode(grammarAccess.getStorageUnitAccess().getFinalKeyword_1_0(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStorageUnitAccess().getClassDefinitionClassDefinitionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_classDefinition_4=ruleClassDefinition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStorageUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "classDefinition", lv_classDefinition_4, "ClassDefinition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getStorageUnitAccess().getSemicolonKeyword_1_2(), null); 
    }
)*);







// Entry rule entryRuleClassDefinition
entryRuleClassDefinition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClassDefinitionRule(), currentNode); }
	 iv_ruleClassDefinition=ruleClassDefinition 
	 { $current=$iv_ruleClassDefinition.current; } 
	 EOF 
;

// Rule ClassDefinition
ruleClassDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_encapsulated_0='encapsulated' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getEncapsulatedEncapsulatedKeyword_0_0(), "encapsulated"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "encapsulated", true, "encapsulated", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_partial_1='partial' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getPartialPartialKeyword_1_0(), "partial"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "partial", true, "partial", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_expandable_2='expandable' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getExpandableExpandableKeyword_2_0(), "expandable"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "expandable", true, "expandable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getClassTypeClassTypeEnumRuleCall_3_0(), currentNode); 
	    }
	    lv_classType_3=ruleClassType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "classType", lv_classType_3, "ClassType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(((	
	
	    lv_name_4=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getClassDefinitionAccess().getNameIDENTTerminalRuleCall_4_0_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getCommentString_commentParserRuleCall_4_0_1_0(), currentNode); 
	    }
	    lv_comment_5=rulestring_comment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_5, "string_comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?)
    |('extends' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getExtendsKeyword_4_1_0(), null); 
    }
RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClassDefinitionAccess().getIDENTTerminalRuleCall_4_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getModificationClass_modificationParserRuleCall_4_1_2_0(), currentNode); 
	    }
	    lv_modification_8=ruleclass_modification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_8, "class_modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(rulestring_comment)?))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getElemListElementListParserRuleCall_5_0(), currentNode); 
	    }
	    lv_elemList_10=ruleElementList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elemList", lv_elemList_10, "ElementList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getElemListElementList2ParserRuleCall_6_0_0(), currentNode); 
	    }
	    lv_elemList_11=ruleElementList2 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elemList", lv_elemList_11, "ElementList2", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getInitialEquationClausesInitial_equation_rule_clauseParserRuleCall_6_1_0(), currentNode); 
	    }
	    lv_initialEquationClauses_12=ruleinitial_equation_rule_clause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "initialEquationClauses", lv_initialEquationClauses_12, "initial_equation_rule_clause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getInitialAlgorithmClausesInitial_algorithm_clauseParserRuleCall_6_2_0(), currentNode); 
	    }
	    lv_initialAlgorithmClauses_13=ruleinitial_algorithm_clause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "initialAlgorithmClauses", lv_initialAlgorithmClauses_13, "initial_algorithm_clause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getEquationClausesEquation_rule_clauseParserRuleCall_6_3_0(), currentNode); 
	    }
	    lv_equationClauses_14=ruleequation_rule_clause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "equationClauses", lv_equationClauses_14, "equation_rule_clause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getAlgorithmClausesAlgorithm_clauseParserRuleCall_6_4_0(), currentNode); 
	    }
	    lv_algorithmClauses_15=rulealgorithm_clause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "algorithmClauses", lv_algorithmClauses_15, "algorithm_clause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getExtClauseExternal_clauseParserRuleCall_7_0(), currentNode); 
	    }
	    lv_extClause_16=ruleexternal_clause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "extClause", lv_extClause_16, "external_clause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'end' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getEndKeyword_8(), null); 
    }
RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClassDefinitionAccess().getIDENTTerminalRuleCall_9(), null); 
    }
);





// Entry rule entryRulePartialDerivative
entryRulePartialDerivative returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPartialDerivativeRule(), currentNode); }
	 iv_rulePartialDerivative=rulePartialDerivative 
	 { $current=$iv_rulePartialDerivative.current; } 
	 EOF 
;

// Rule PartialDerivative
rulePartialDerivative returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('function' 
    {
        createLeafNode(grammarAccess.getPartialDerivativeAccess().getFunctionKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getPartialDerivativeAccess().getNameIDENTTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartialDerivativeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)RULE_EQUALS
    { 
    createLeafNode(grammarAccess.getPartialDerivativeAccess().getEQUALSTerminalRuleCall_2(), null); 
    }
'der' 
    {
        createLeafNode(grammarAccess.getPartialDerivativeAccess().getDerKeyword_3(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getPartialDerivativeAccess().getLeftParenthesisKeyword_4(), null); 
    }
rulename_path',' 
    {
        createLeafNode(grammarAccess.getPartialDerivativeAccess().getCommaKeyword_6(), null); 
    }
ruleident_list')' 
    {
        createLeafNode(grammarAccess.getPartialDerivativeAccess().getRightParenthesisKeyword_8(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPartialDerivativeAccess().getCommentCommentParserRuleCall_9_0(), currentNode); 
	    }
	    lv_comment_9=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartialDerivativeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_9, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleClassModification
entryRuleClassModification returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClassModificationRule(), currentNode); }
	 iv_ruleClassModification=ruleClassModification 
	 { $current=$iv_ruleClassModification.current; } 
	 EOF 
;

// Rule ClassModification
ruleClassModification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassModificationAccess().getClassTypeClassTypeEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_classType_0=ruleClassType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "classType", lv_classType_0, "ClassType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_name_1=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getClassModificationAccess().getNameIDENTTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)RULE_EQUALS
    { 
    createLeafNode(grammarAccess.getClassModificationAccess().getEQUALSTerminalRuleCall_2(), null); 
    }
ruletype_prefix(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassModificationAccess().getTypeSpecifierType_specifierParserRuleCall_4_0(), currentNode); 
	    }
	    lv_typeSpecifier_4=ruletype_specifier 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typeSpecifier", lv_typeSpecifier_4, "type_specifier", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassModificationAccess().getModificationClass_modificationParserRuleCall_5_0(), currentNode); 
	    }
	    lv_modification_5=ruleclass_modification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_5, "class_modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassModificationAccess().getCommentCommentParserRuleCall_6_0(), currentNode); 
	    }
	    lv_comment_6=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_6, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleClassOverloading
entryRuleClassOverloading returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClassOverloadingRule(), currentNode); }
	 iv_ruleClassOverloading=ruleClassOverloading 
	 { $current=$iv_ruleClassOverloading.current; } 
	 EOF 
;

// Rule ClassOverloading
ruleClassOverloading returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassOverloadingAccess().getClassTypeClassTypeEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_classType_0=ruleClassType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassOverloadingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "classType", lv_classType_0, "ClassType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_name_1=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getClassOverloadingAccess().getNameIDENTTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassOverloadingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)RULE_EQUALS
    { 
    createLeafNode(grammarAccess.getClassOverloadingAccess().getEQUALSTerminalRuleCall_2(), null); 
    }
'overload' 
    {
        createLeafNode(grammarAccess.getClassOverloadingAccess().getOverloadKeyword_3(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getClassOverloadingAccess().getLeftParenthesisKeyword_4(), null); 
    }
rulename_list')' 
    {
        createLeafNode(grammarAccess.getClassOverloadingAccess().getRightParenthesisKeyword_6(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassOverloadingAccess().getCommentCommentParserRuleCall_7_0(), currentNode); 
	    }
	    lv_comment_7=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassOverloadingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_7, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationRule(), currentNode); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getClassTypeClassTypeEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_classType_0=ruleClassType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "classType", lv_classType_0, "ClassType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_name_1=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getEnumerationAccess().getNameIDENTTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)RULE_EQUALS
    { 
    createLeafNode(grammarAccess.getEnumerationAccess().getEQUALSTerminalRuleCall_2(), null); 
    }
'enumeration' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getEnumerationKeyword_3(), null); 
    }
RULE_LPAR
    { 
    createLeafNode(grammarAccess.getEnumerationAccess().getLPARTerminalRuleCall_4(), null); 
    }
(((	
	
	    lv_ident_5=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getEnumerationAccess().getIdentIDENTTerminalRuleCall_5_0_0_0(), "ident"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "ident", lv_ident_5, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getEnumCommentsCommentParserRuleCall_5_0_1_0(), currentNode); 
	    }
	    lv_enumComments_6=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "enumComments", lv_enumComments_6, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getEnumerationAccess().getCOMMATerminalRuleCall_5_0_2_0(), null); 
    }
(	
	
	    lv_ident_8=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getEnumerationAccess().getIdentIDENTTerminalRuleCall_5_0_2_1_0(), "ident"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "ident", lv_ident_8, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getEnumCommentsCommentParserRuleCall_5_0_2_2_0(), currentNode); 
	    }
	    lv_enumComments_9=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "enumComments", lv_enumComments_9, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)
    |RULE_COLON
    { 
    createLeafNode(grammarAccess.getEnumerationAccess().getCOLONTerminalRuleCall_5_1(), null); 
    }
)RULE_RPAR
    { 
    createLeafNode(grammarAccess.getEnumerationAccess().getRPARTerminalRuleCall_6(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getCommentCommentParserRuleCall_7_0(), currentNode); 
	    }
	    lv_comment_12=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_12, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleident_list
entryRuleident_list returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIdent_listRule(), currentNode); } 
	 iv_ruleident_list=ruleident_list 
	 { $current=$iv_ruleident_list.current.getText(); }  
	 EOF 
;

// Rule ident_list
ruleident_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getIdent_listAccess().getIDENTTerminalRuleCall_0(), null); 
    }
(    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    createLeafNode(grammarAccess.getIdent_listAccess().getCOMMATerminalRuleCall_1_0(), null); 
    }
    this_IDENT_2=RULE_IDENT    {
		$current.merge(this_IDENT_2);
    }

    { 
    createLeafNode(grammarAccess.getIdent_listAccess().getIDENTTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRulename_list
entryRulename_list returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getName_listRule(), currentNode); } 
	 iv_rulename_list=rulename_list 
	 { $current=$iv_rulename_list.current.getText(); }  
	 EOF 
;

// Rule name_list
rulename_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getName_listAccess().getName_pathParserRuleCall_0(), currentNode); 
    }
    this_name_path_0=rulename_path    {
		$current.merge(this_name_path_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getName_listAccess().getCommaKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getName_listAccess().getName_pathParserRuleCall_1_1(), currentNode); 
    }
    this_name_path_2=rulename_path    {
		$current.merge(this_name_path_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRuleexternal_clause
entryRuleexternal_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExternal_clauseRule(), currentNode); }
	 iv_ruleexternal_clause=ruleexternal_clause 
	 { $current=$iv_ruleexternal_clause.current; } 
	 EOF 
;

// Rule external_clause
ruleexternal_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('external' 
    {
        createLeafNode(grammarAccess.getExternal_clauseAccess().getExternalKeyword_0(), null); 
    }
(	
	
	    lv_languageSpecification_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getExternal_clauseAccess().getLanguageSpecificationSTRINGTerminalRuleCall_1_0(), "languageSpecification"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternal_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "languageSpecification", lv_languageSpecification_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(ruleexternal_function_call)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExternal_clauseAccess().getAnnotationAnnotationParserRuleCall_3_0(), currentNode); 
	    }
	    lv_annotation_3=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternal_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "annotation", lv_annotation_3, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getExternal_clauseAccess().getSEMICOLONTerminalRuleCall_4(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExternal_clauseAccess().getExtAnnotationAnnotationParserRuleCall_5_0_0(), currentNode); 
	    }
	    lv_extAnnotation_5=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternal_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "extAnnotation", lv_extAnnotation_5, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getExternal_clauseAccess().getSEMICOLONTerminalRuleCall_5_1(), null); 
    }
)?);





// Entry rule entryRuleexternal_function_call
entryRuleexternal_function_call returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExternal_function_callRule(), currentNode); } 
	 iv_ruleexternal_function_call=ruleexternal_function_call 
	 { $current=$iv_ruleexternal_function_call.current.getText(); }  
	 EOF 
;

// Rule external_function_call
ruleexternal_function_call returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getExternal_function_callAccess().getComponent_referenceParserRuleCall_0_0(), currentNode); 
    }
    this_component_reference_0=rulecomponent_reference    {
		$current.merge(this_component_reference_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
    this_EQUALS_1=RULE_EQUALS    {
		$current.merge(this_EQUALS_1);
    }

    { 
    createLeafNode(grammarAccess.getExternal_function_callAccess().getEQUALSTerminalRuleCall_0_1(), null); 
    }
)?    this_IDENT_2=RULE_IDENT    {
		$current.merge(this_IDENT_2);
    }

    { 
    createLeafNode(grammarAccess.getExternal_function_callAccess().getIDENTTerminalRuleCall_1(), null); 
    }
    this_LPAR_3=RULE_LPAR    {
		$current.merge(this_LPAR_3);
    }

    { 
    createLeafNode(grammarAccess.getExternal_function_callAccess().getLPARTerminalRuleCall_2(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExternal_function_callAccess().getExpression_listParserRuleCall_3(), currentNode); 
    }
    this_expression_list_4=ruleexpression_list    {
		$current.merge(this_expression_list_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?    this_RPAR_5=RULE_RPAR    {
		$current.merge(this_RPAR_5);
    }

    { 
    createLeafNode(grammarAccess.getExternal_function_callAccess().getRPARTerminalRuleCall_4(), null); 
    }
)
    ;





// Entry rule entryRuleElementList
entryRuleElementList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElementListRule(), currentNode); }
	 iv_ruleElementList=ruleElementList 
	 { $current=$iv_ruleElementList.current; } 
	 EOF 
;

// Rule ElementList
ruleElementList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementListAccess().getElementsClassElementParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_elements_0=ruleClassElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_0, "ClassElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementListAccess().getAnnotationsAnnotationParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_annotations_1=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "annotations", lv_annotations_1, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getElementListAccess().getSEMICOLONTerminalRuleCall_1(), null); 
    }
)*;





// Entry rule entryRuleElementList2
entryRuleElementList2 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElementList2Rule(), currentNode); }
	 iv_ruleElementList2=ruleElementList2 
	 { $current=$iv_ruleElementList2.current; } 
	 EOF 
;

// Rule ElementList2
ruleElementList2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('public' 
    {
        createLeafNode(grammarAccess.getElementList2Access().getPublicKeyword_0_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getElementList2Access().getPublicElementListAction_0_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElementList2Access().getPublicElementListAction_0_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementList2Access().getElementsClassElementParserRuleCall_0_2_0_0_0(), currentNode); 
	    }
	    lv_elements_2=ruleClassElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementList2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_2, "ClassElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementList2Access().getAnnotationsAnnotationParserRuleCall_0_2_0_1_0(), currentNode); 
	    }
	    lv_annotations_3=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementList2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "annotations", lv_annotations_3, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getElementList2Access().getSEMICOLONTerminalRuleCall_0_2_1(), null); 
    }
)*)
    |('protected' 
    {
        createLeafNode(grammarAccess.getElementList2Access().getProtectedKeyword_1_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getElementList2Access().getProtectesElementListAction_1_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElementList2Access().getProtectesElementListAction_1_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementList2Access().getElementsClassElementParserRuleCall_1_2_0_0_0(), currentNode); 
	    }
	    lv_elements_7=ruleClassElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementList2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_7, "ClassElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementList2Access().getAnnotationsAnnotationParserRuleCall_1_2_0_1_0(), currentNode); 
	    }
	    lv_annotations_8=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementList2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "annotations", lv_annotations_8, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getElementList2Access().getSEMICOLONTerminalRuleCall_1_2_1(), null); 
    }
)*));





// Entry rule entryRuleClassElement
entryRuleClassElement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClassElementRule(), currentNode); }
	 iv_ruleClassElement=ruleClassElement 
	 { $current=$iv_ruleClassElement.current; } 
	 EOF 
;

// Rule ClassElement
ruleClassElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getImport_clauseParserRuleCall_0(), currentNode); 
    }
    this_import_clause_0=ruleimport_clause
    { 
        $current = $this_import_clause_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getExtends_clauseParserRuleCall_1(), currentNode); 
    }
    this_extends_clause_1=ruleextends_clause
    { 
        $current = $this_extends_clause_1.current; 
        currentNode = currentNode.getParent();
    }

    |(('redeclare' 
    {
        createLeafNode(grammarAccess.getClassElementAccess().getRedeclareKeyword_2_0(), null); 
    }
)?('final' 
    {
        createLeafNode(grammarAccess.getClassElementAccess().getFinalKeyword_2_1(), null); 
    }
)?('inner' 
    {
        createLeafNode(grammarAccess.getClassElementAccess().getInnerKeyword_2_2(), null); 
    }
)?('outer' 
    {
        createLeafNode(grammarAccess.getClassElementAccess().getOuterKeyword_2_3(), null); 
    }
)?((
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getClassDefinitionParserRuleCall_2_4_0_0(), currentNode); 
    }
    this_ClassDefinition_6=ruleClassDefinition
    { 
        $current = $this_ClassDefinition_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getComponent_clauseParserRuleCall_2_4_0_1(), currentNode); 
    }
    this_component_clause_7=rulecomponent_clause
    { 
        $current = $this_component_clause_7.current; 
        currentNode = currentNode.getParent();
    }
)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getReplaceableElementClauseParserRuleCall_2_4_1(), currentNode); 
    }
    this_ReplaceableElementClause_8=ruleReplaceableElementClause
    { 
        $current = $this_ReplaceableElementClause_8.current; 
        currentNode = currentNode.getParent();
    }
)));





// Entry rule entryRuleReplaceableElementClause
entryRuleReplaceableElementClause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getReplaceableElementClauseRule(), currentNode); }
	 iv_ruleReplaceableElementClause=ruleReplaceableElementClause 
	 { $current=$iv_ruleReplaceableElementClause.current; } 
	 EOF 
;

// Rule ReplaceableElementClause
ruleReplaceableElementClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('replaceable' 
    {
        createLeafNode(grammarAccess.getReplaceableElementClauseAccess().getReplaceableKeyword_0(), null); 
    }
(	
	
	    lv_entity_1=(	{ 
        currentNode=createCompositeNode(grammarAccess.getReplaceableElementClauseAccess().getEntityClassDefinitionParserRuleCall_1_0_0(), currentNode); 
    }
	ruleClassDefinition	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getReplaceableElementClauseAccess().getEntityComponent_clauseParserRuleCall_1_0_1(), currentNode); 
    }
	rulecomponent_clause	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReplaceableElementClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "entity", lv_entity_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getReplaceableElementClauseAccess().getConstrainConstraining_clauseParserRuleCall_2_0(), currentNode); 
	    }
	    lv_constrain_2=ruleconstraining_clause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReplaceableElementClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "constrain", lv_constrain_2, "constraining_clause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleimport_clause
entryRuleimport_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImport_clauseRule(), currentNode); }
	 iv_ruleimport_clause=ruleimport_clause 
	 { $current=$iv_ruleimport_clause.current; } 
	 EOF 
;

// Rule import_clause
ruleimport_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('import' 
    {
        createLeafNode(grammarAccess.getImport_clauseAccess().getImportKeyword_0(), null); 
    }
(((	
	
	    lv_asName_1=	RULE_IDENT
	{
		createLeafNode(grammarAccess.getImport_clauseAccess().getAsNameIDENTTerminalRuleCall_1_0_0_0(), "asName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImport_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "asName", lv_asName_1, "IDENT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)RULE_EQUALS
    { 
    createLeafNode(grammarAccess.getImport_clauseAccess().getEQUALSTerminalRuleCall_1_0_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getImport_clauseAccess().getNameName_pathParserRuleCall_1_0_2_0(), currentNode); 
	    }
	    lv_name_3=rulename_path 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImport_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "name_path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getImport_clauseAccess().getNameName_path_starParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_name_4=rulename_path_star 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImport_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "name_path_star", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getImport_clauseAccess().getCommentCommentParserRuleCall_2_0(), currentNode); 
	    }
	    lv_comment_5=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImport_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_5, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleextends_clause
entryRuleextends_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExtends_clauseRule(), currentNode); }
	 iv_ruleextends_clause=ruleextends_clause 
	 { $current=$iv_ruleextends_clause.current; } 
	 EOF 
;

// Rule extends_clause
ruleextends_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('extends' 
    {
        createLeafNode(grammarAccess.getExtends_clauseAccess().getExtendsKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExtends_clauseAccess().getBaseClassName_pathParserRuleCall_1_0(), currentNode); 
	    }
	    lv_baseClass_1=rulename_path 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtends_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "baseClass", lv_baseClass_1, "name_path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExtends_clauseAccess().getModificationClass_modificationParserRuleCall_2_0(), currentNode); 
	    }
	    lv_modification_2=ruleclass_modification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtends_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_2, "class_modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExtends_clauseAccess().getAnnotationAnnotationParserRuleCall_3_0(), currentNode); 
	    }
	    lv_annotation_3=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtends_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "annotation", lv_annotation_3, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleconstraining_clause
entryRuleconstraining_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstraining_clauseRule(), currentNode); }
	 iv_ruleconstraining_clause=ruleconstraining_clause 
	 { $current=$iv_ruleconstraining_clause.current; } 
	 EOF 
;

// Rule constraining_clause
ruleconstraining_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((('extends' 
    {
        createLeafNode(grammarAccess.getConstraining_clauseAccess().getExtendsKeyword_0_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstraining_clauseAccess().getNameName_pathParserRuleCall_0_0_1_0(), currentNode); 
	    }
	    lv_name_1=rulename_path 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraining_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "name_path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstraining_clauseAccess().getModificationClass_modificationParserRuleCall_0_0_2_0(), currentNode); 
	    }
	    lv_modification_2=ruleclass_modification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraining_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_2, "class_modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?)
    |('constrainedby' 
    {
        createLeafNode(grammarAccess.getConstraining_clauseAccess().getConstrainedbyKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstraining_clauseAccess().getNameName_pathParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_name_4=rulename_path 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraining_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "name_path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstraining_clauseAccess().getModificationClass_modificationParserRuleCall_0_1_2_0(), currentNode); 
	    }
	    lv_modification_5=ruleclass_modification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraining_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_5, "class_modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstraining_clauseAccess().getCommentCommentParserRuleCall_1_0(), currentNode); 
	    }
	    lv_comment_6=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraining_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_6, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulecomponent_clause
entryRulecomponent_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getComponent_clauseRule(), currentNode); }
	 iv_rulecomponent_clause=rulecomponent_clause 
	 { $current=$iv_rulecomponent_clause.current; } 
	 EOF 
;

// Rule component_clause
rulecomponent_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getTypePrefixType_prefixParserRuleCall_0_0(), currentNode); 
	    }
	    lv_typePrefix_0=ruletype_prefix 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typePrefix", lv_typePrefix_0, "type_prefix", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getTypeSpecifierType_specifierParserRuleCall_1_0(), currentNode); 
	    }
	    lv_typeSpecifier_1=ruletype_specifier 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typeSpecifier", lv_typeSpecifier_1, "type_specifier", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getDeclarationsComponent_declarationParserRuleCall_2_0(), currentNode); 
	    }
	    lv_declarations_2=rulecomponent_declaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "declarations", lv_declarations_2, "component_declaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getComponent_clauseAccess().getCOMMATerminalRuleCall_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getDeclarationsComponent_declarationParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_declarations_4=rulecomponent_declaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "declarations", lv_declarations_4, "component_declaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuletype_prefix
entryRuletype_prefix returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getType_prefixRule(), currentNode); } 
	 iv_ruletype_prefix=ruletype_prefix 
	 { $current=$iv_ruletype_prefix.current.getText(); }  
	 EOF 
;

// Rule type_prefix
ruletype_prefix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
	kw='flow' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getFlowKeyword_0_0(), null); 
    }

    |
	kw='stream' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getStreamKeyword_0_1(), null); 
    }
)?(
	kw='discrete' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getDiscreteKeyword_1_0(), null); 
    }

    |
	kw='parameter' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getParameterKeyword_1_1(), null); 
    }

    |
	kw='constant' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getConstantKeyword_1_2(), null); 
    }
)?(
	kw='input' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getInputKeyword_2_0(), null); 
    }

    |
	kw='output' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getOutputKeyword_2_1(), null); 
    }
)?)
    ;





// Entry rule entryRuletype_specifier
entryRuletype_specifier returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getType_specifierRule(), currentNode); }
	 iv_ruletype_specifier=ruletype_specifier 
	 { $current=$iv_ruletype_specifier.current; } 
	 EOF 
;

// Rule type_specifier
ruletype_specifier returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getType_specifierAccess().getNameName_pathParserRuleCall_0_0(), currentNode); 
	    }
	    lv_name_0=rulename_path 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getType_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "name_path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getType_specifierAccess().getSubscriptsArray_subscriptsParserRuleCall_1_0(), currentNode); 
	    }
	    lv_subscripts_1=rulearray_subscripts 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getType_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "subscripts", lv_subscripts_1, "array_subscripts", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRulecomponent_declaration
entryRulecomponent_declaration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getComponent_declarationRule(), currentNode); }
	 iv_rulecomponent_declaration=rulecomponent_declaration 
	 { $current=$iv_rulecomponent_declaration.current; } 
	 EOF 
;

// Rule component_declaration
rulecomponent_declaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_IDENT
    { 
    createLeafNode(grammarAccess.getComponent_declarationAccess().getIDENTTerminalRuleCall_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_declarationAccess().getSubscriptsArray_subscriptsParserRuleCall_1_0(), currentNode); 
	    }
	    lv_subscripts_1=rulearray_subscripts 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_declarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "subscripts", lv_subscripts_1, "array_subscripts", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_declarationAccess().getModificationModificationParserRuleCall_2_0(), currentNode); 
	    }
	    lv_modification_2=rulemodification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_declarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_2, "modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?('if' 
    {
        createLeafNode(grammarAccess.getComponent_declarationAccess().getIfKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_declarationAccess().getConditionExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_condition_4=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_declarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_4, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getComponent_declarationAccess().getCommentCommentParserRuleCall_4_0(), currentNode); 
	    }
	    lv_comment_5=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_declarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_5, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulemodification
entryRulemodification returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModificationRule(), currentNode); }
	 iv_rulemodification=rulemodification 
	 { $current=$iv_rulemodification.current; } 
	 EOF 
;

// Rule modification
rulemodification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getModificationAccess().getClass_modificationParserRuleCall_0(), currentNode); 
    }
    this_class_modification_0=ruleclass_modification
    { 
        $current = $this_class_modification_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModificationAccess().getSimpleModificationParserRuleCall_1(), currentNode); 
    }
    this_SimpleModification_1=ruleSimpleModification
    { 
        $current = $this_SimpleModification_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSimpleModification
entryRuleSimpleModification returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSimpleModificationRule(), currentNode); }
	 iv_ruleSimpleModification=ruleSimpleModification 
	 { $current=$iv_ruleSimpleModification.current; } 
	 EOF 
;

// Rule SimpleModification
ruleSimpleModification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((RULE_EQUALS
    { 
    createLeafNode(grammarAccess.getSimpleModificationAccess().getEQUALSTerminalRuleCall_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSimpleModificationAccess().getExpressionExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_expression_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(RULE_ASSIGN
    { 
    createLeafNode(grammarAccess.getSimpleModificationAccess().getASSIGNTerminalRuleCall_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSimpleModificationAccess().getExpressionExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expression_3=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_3, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleclass_modification
entryRuleclass_modification returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClass_modificationRule(), currentNode); }
	 iv_ruleclass_modification=ruleclass_modification 
	 { $current=$iv_ruleclass_modification.current; } 
	 EOF 
;

// Rule class_modification
ruleclass_modification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_LPAR
    { 
    createLeafNode(grammarAccess.getClass_modificationAccess().getLPARTerminalRuleCall_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClass_modificationAccess().getArgumentsArgumentParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_arguments_1=ruleargument 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_modificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "arguments", lv_arguments_1, "argument", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getClass_modificationAccess().getCOMMATerminalRuleCall_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClass_modificationAccess().getArgumentsArgumentParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_arguments_3=ruleargument 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_modificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "arguments", lv_arguments_3, "argument", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?RULE_RPAR
    { 
    createLeafNode(grammarAccess.getClass_modificationAccess().getRPARTerminalRuleCall_2(), null); 
    }
(RULE_EQUALS
    { 
    createLeafNode(grammarAccess.getClass_modificationAccess().getEQUALSTerminalRuleCall_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClass_modificationAccess().getExpressionExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_expression_6=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_modificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_6, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleargument
entryRuleargument returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArgumentRule(), currentNode); }
	 iv_ruleargument=ruleargument 
	 { $current=$iv_ruleargument.current; } 
	 EOF 
;

// Rule argument
ruleargument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((('each' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getEachKeyword_0_0(), null); 
    }
)?('final' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getFinalKeyword_0_1(), null); 
    }
)?(
    { 
        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getElementModificationParserRuleCall_0_2_0(), currentNode); 
    }
    this_ElementModification_2=ruleElementModification
    { 
        $current = $this_ElementModification_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getElementReplaceableClauseParserRuleCall_0_2_1(), currentNode); 
    }
    this_ElementReplaceableClause_3=ruleElementReplaceableClause
    { 
        $current = $this_ElementReplaceableClause_3.current; 
        currentNode = currentNode.getParent();
    }
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getElementRedeclarationParserRuleCall_1(), currentNode); 
    }
    this_ElementRedeclaration_4=ruleElementRedeclaration
    { 
        $current = $this_ElementRedeclaration_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleElementModification
entryRuleElementModification returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElementModificationRule(), currentNode); }
	 iv_ruleElementModification=ruleElementModification 
	 { $current=$iv_ruleElementModification.current; } 
	 EOF 
;

// Rule ElementModification
ruleElementModification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementModificationAccess().getComponetRefComponent_referenceParserRuleCall_0_0(), currentNode); 
	    }
	    lv_componetRef_0=rulecomponent_reference 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "componetRef", lv_componetRef_0, "component_reference", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementModificationAccess().getModificationModificationParserRuleCall_1_0(), currentNode); 
	    }
	    lv_modification_1=rulemodification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_1, "modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementModificationAccess().getCommentString_commentParserRuleCall_2_0(), currentNode); 
	    }
	    lv_comment_2=rulestring_comment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_2, "string_comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleElementRedeclaration
entryRuleElementRedeclaration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElementRedeclarationRule(), currentNode); }
	 iv_ruleElementRedeclaration=ruleElementRedeclaration 
	 { $current=$iv_ruleElementRedeclaration.current; } 
	 EOF 
;

// Rule ElementRedeclaration
ruleElementRedeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('redeclare' 
    {
        createLeafNode(grammarAccess.getElementRedeclarationAccess().getRedeclareKeyword_0(), null); 
    }
('each' 
    {
        createLeafNode(grammarAccess.getElementRedeclarationAccess().getEachKeyword_1(), null); 
    }
)?('final' 
    {
        createLeafNode(grammarAccess.getElementRedeclarationAccess().getFinalKeyword_2(), null); 
    }
)?((
    { 
        currentNode=createCompositeNode(grammarAccess.getElementRedeclarationAccess().getClassDefinitionParserRuleCall_3_0_0(), currentNode); 
    }
    this_ClassDefinition_3=ruleClassDefinition
    { 
        $current = $this_ClassDefinition_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getElementRedeclarationAccess().getElementComponentClauseParserRuleCall_3_0_1(), currentNode); 
    }
    this_ElementComponentClause_4=ruleElementComponentClause
    { 
        $current = $this_ElementComponentClause_4.current; 
        currentNode = currentNode.getParent();
    }
)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getElementRedeclarationAccess().getElementReplaceableClauseParserRuleCall_3_1(), currentNode); 
    }
    this_ElementReplaceableClause_5=ruleElementReplaceableClause
    { 
        $current = $this_ElementReplaceableClause_5.current; 
        currentNode = currentNode.getParent();
    }
));





// Entry rule entryRuleElementReplaceableClause
entryRuleElementReplaceableClause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElementReplaceableClauseRule(), currentNode); }
	 iv_ruleElementReplaceableClause=ruleElementReplaceableClause 
	 { $current=$iv_ruleElementReplaceableClause.current; } 
	 EOF 
;

// Rule ElementReplaceableClause
ruleElementReplaceableClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('replaceable' 
    {
        createLeafNode(grammarAccess.getElementReplaceableClauseAccess().getReplaceableKeyword_0(), null); 
    }
(	
	
	    lv_element_1=(	{ 
        currentNode=createCompositeNode(grammarAccess.getElementReplaceableClauseAccess().getElementClassDefinitionParserRuleCall_1_0_0(), currentNode); 
    }
	ruleClassDefinition	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getElementReplaceableClauseAccess().getElementElementComponentClauseParserRuleCall_1_0_1(), currentNode); 
    }
	ruleElementComponentClause	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementReplaceableClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "element", lv_element_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementReplaceableClauseAccess().getConstraintConstraining_clauseParserRuleCall_2_0(), currentNode); 
	    }
	    lv_constraint_2=ruleconstraining_clause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementReplaceableClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "constraint", lv_constraint_2, "constraining_clause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleElementComponentClause
entryRuleElementComponentClause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElementComponentClauseRule(), currentNode); }
	 iv_ruleElementComponentClause=ruleElementComponentClause 
	 { $current=$iv_ruleElementComponentClause.current; } 
	 EOF 
;

// Rule ElementComponentClause
ruleElementComponentClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementComponentClauseAccess().getTypePrefixType_prefixParserRuleCall_0_0(), currentNode); 
	    }
	    lv_typePrefix_0=ruletype_prefix 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementComponentClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typePrefix", lv_typePrefix_0, "type_prefix", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementComponentClauseAccess().getTypeSpecifierType_specifierParserRuleCall_1_0(), currentNode); 
	    }
	    lv_typeSpecifier_1=ruletype_specifier 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementComponentClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typeSpecifier", lv_typeSpecifier_1, "type_specifier", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_IDENT
    { 
    createLeafNode(grammarAccess.getElementComponentClauseAccess().getIDENTTerminalRuleCall_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementComponentClauseAccess().getSubscriptsArray_subscriptsParserRuleCall_3_0(), currentNode); 
	    }
	    lv_subscripts_3=rulearray_subscripts 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementComponentClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "subscripts", lv_subscripts_3, "array_subscripts", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementComponentClauseAccess().getModificationModificationParserRuleCall_4_0(), currentNode); 
	    }
	    lv_modification_4=rulemodification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementComponentClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modification", lv_modification_4, "modification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElementComponentClauseAccess().getCommentCommentParserRuleCall_5_0(), currentNode); 
	    }
	    lv_comment_5=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementComponentClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_5, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleequation_rule_clause
entryRuleequation_rule_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEquation_rule_clauseRule(), currentNode); }
	 iv_ruleequation_rule_clause=ruleequation_rule_clause 
	 { $current=$iv_ruleequation_rule_clause.current; } 
	 EOF 
;

// Rule equation_rule_clause
ruleequation_rule_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('equation' 
    {
        createLeafNode(grammarAccess.getEquation_rule_clauseAccess().getEquationKeyword_0(), null); 
    }
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEquation_rule_clauseAccess().getEquationRulesEquation_ruleParserRuleCall_1_0_0_0(), currentNode); 
	    }
	    lv_equationRules_1=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquation_rule_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "equationRules", lv_equationRules_1, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getEquation_rule_clauseAccess().getSEMICOLONTerminalRuleCall_1_0_1(), null); 
    }
)
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEquation_rule_clauseAccess().getAnnotationsAnnotationParserRuleCall_1_1_0_0(), currentNode); 
	    }
	    lv_annotations_3=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquation_rule_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "annotations", lv_annotations_3, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getEquation_rule_clauseAccess().getSEMICOLONTerminalRuleCall_1_1_1(), null); 
    }
))+);





// Entry rule entryRulealgorithm_clause
entryRulealgorithm_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAlgorithm_clauseRule(), currentNode); }
	 iv_rulealgorithm_clause=rulealgorithm_clause 
	 { $current=$iv_rulealgorithm_clause.current; } 
	 EOF 
;

// Rule algorithm_clause
rulealgorithm_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('algorithm' 
    {
        createLeafNode(grammarAccess.getAlgorithm_clauseAccess().getAlgorithmKeyword_0(), null); 
    }
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAlgorithm_clauseAccess().getAlgorithmRulesAlgorithmParserRuleCall_1_0_0_0(), currentNode); 
	    }
	    lv_algorithmRules_1=rulealgorithm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlgorithm_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "algorithmRules", lv_algorithmRules_1, "algorithm", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getAlgorithm_clauseAccess().getSEMICOLONTerminalRuleCall_1_0_1(), null); 
    }
)
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAlgorithm_clauseAccess().getAnnotationsAnnotationParserRuleCall_1_1_0_0(), currentNode); 
	    }
	    lv_annotations_3=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlgorithm_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "annotations", lv_annotations_3, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getAlgorithm_clauseAccess().getSEMICOLONTerminalRuleCall_1_1_1(), null); 
    }
))+);





// Entry rule entryRuleinitial_equation_rule_clause
entryRuleinitial_equation_rule_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInitial_equation_rule_clauseRule(), currentNode); }
	 iv_ruleinitial_equation_rule_clause=ruleinitial_equation_rule_clause 
	 { $current=$iv_ruleinitial_equation_rule_clause.current; } 
	 EOF 
;

// Rule initial_equation_rule_clause
ruleinitial_equation_rule_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('initial' 
    {
        createLeafNode(grammarAccess.getInitial_equation_rule_clauseAccess().getInitialKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getInitial_equation_rule_clauseAccess().getEquation_rule_clauseParserRuleCall_1(), currentNode); 
    }
    this_equation_rule_clause_1=ruleequation_rule_clause
    { 
        $current = $this_equation_rule_clause_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleinitial_algorithm_clause
entryRuleinitial_algorithm_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInitial_algorithm_clauseRule(), currentNode); }
	 iv_ruleinitial_algorithm_clause=ruleinitial_algorithm_clause 
	 { $current=$iv_ruleinitial_algorithm_clause.current; } 
	 EOF 
;

// Rule initial_algorithm_clause
ruleinitial_algorithm_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('initial' 
    {
        createLeafNode(grammarAccess.getInitial_algorithm_clauseAccess().getInitialKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getInitial_algorithm_clauseAccess().getAlgorithm_clauseParserRuleCall_1(), currentNode); 
    }
    this_algorithm_clause_1=rulealgorithm_clause
    { 
        $current = $this_algorithm_clause_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleequation_rule
entryRuleequation_rule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEquation_ruleRule(), currentNode); }
	 iv_ruleequation_rule=ruleequation_rule 
	 { $current=$iv_ruleequation_rule.current; } 
	 EOF 
;

// Rule equation_rule
ruleequation_rule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((ruleequality_equation_rule
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEquation_ruleAccess().getConditional_equation_rule_eParserRuleCall_0_1(), currentNode); 
    }
    this_conditional_equation_rule_e_1=ruleconditional_equation_rule_e
    { 
        $current = $this_conditional_equation_rule_e_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEquation_ruleAccess().getFor_clause_eParserRuleCall_0_2(), currentNode); 
    }
    this_for_clause_e_2=rulefor_clause_e
    { 
        $current = $this_for_clause_e_2.current; 
        currentNode = currentNode.getParent();
    }

    |ruleconnect_clause
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEquation_ruleAccess().getWhen_clause_eParserRuleCall_0_4(), currentNode); 
    }
    this_when_clause_e_4=rulewhen_clause_e
    { 
        $current = $this_when_clause_e_4.current; 
        currentNode = currentNode.getParent();
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEquation_ruleAccess().getCommentCommentParserRuleCall_1_0(), currentNode); 
	    }
	    lv_comment_5=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquation_ruleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_5, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulealgorithm
entryRulealgorithm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAlgorithmRule(), currentNode); }
	 iv_rulealgorithm=rulealgorithm 
	 { $current=$iv_rulealgorithm.current; } 
	 EOF 
;

// Rule algorithm
rulealgorithm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((ruleassign_clause_a
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAlgorithmAccess().getConditional_equation_rule_aParserRuleCall_0_1(), currentNode); 
    }
    this_conditional_equation_rule_a_1=ruleconditional_equation_rule_a
    { 
        $current = $this_conditional_equation_rule_a_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAlgorithmAccess().getFor_clause_aParserRuleCall_0_2(), currentNode); 
    }
    this_for_clause_a_2=rulefor_clause_a
    { 
        $current = $this_for_clause_a_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAlgorithmAccess().getWhile_clauseParserRuleCall_0_3(), currentNode); 
    }
    this_while_clause_3=rulewhile_clause
    { 
        $current = $this_while_clause_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAlgorithmAccess().getWhen_clause_aParserRuleCall_0_4(), currentNode); 
    }
    this_when_clause_a_4=rulewhen_clause_a
    { 
        $current = $this_when_clause_a_4.current; 
        currentNode = currentNode.getParent();
    }

    |'break' 
    {
        createLeafNode(grammarAccess.getAlgorithmAccess().getBreakKeyword_0_5(), null); 
    }

    |'return' 
    {
        createLeafNode(grammarAccess.getAlgorithmAccess().getReturnKeyword_0_6(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAlgorithmAccess().getCommentCommentParserRuleCall_1_0(), currentNode); 
	    }
	    lv_comment_7=rulecomment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlgorithmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comment", lv_comment_7, "comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleassign_clause_a
entryRuleassign_clause_a returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssign_clause_aRule(), currentNode); } 
	 iv_ruleassign_clause_a=ruleassign_clause_a 
	 { $current=$iv_ruleassign_clause_a.current.getText(); }  
	 EOF 
;

// Rule assign_clause_a
ruleassign_clause_a returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssign_clause_aAccess().getSimple_expressionParserRuleCall_0(), currentNode); 
    }
    this_simple_expression_0=rulesimple_expression    {
		$current.merge(this_simple_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((    this_ASSIGN_1=RULE_ASSIGN    {
		$current.merge(this_ASSIGN_1);
    }

    { 
    createLeafNode(grammarAccess.getAssign_clause_aAccess().getASSIGNTerminalRuleCall_1_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAssign_clause_aAccess().getExpressionParserRuleCall_1_0_1(), currentNode); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    |(    this_EQUALS_3=RULE_EQUALS    {
		$current.merge(this_EQUALS_3);
    }

    { 
    createLeafNode(grammarAccess.getAssign_clause_aAccess().getEQUALSTerminalRuleCall_1_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAssign_clause_aAccess().getExpressionParserRuleCall_1_1_1(), currentNode); 
    }
    this_expression_4=ruleexpression    {
		$current.merge(this_expression_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
))?)
    ;





// Entry rule entryRuleequality_equation_rule
entryRuleequality_equation_rule returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEquality_equation_ruleRule(), currentNode); } 
	 iv_ruleequality_equation_rule=ruleequality_equation_rule 
	 { $current=$iv_ruleequality_equation_rule.current.getText(); }  
	 EOF 
;

// Rule equality_equation_rule
ruleequality_equation_rule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEquality_equation_ruleAccess().getSimple_expressionParserRuleCall_0(), currentNode); 
    }
    this_simple_expression_0=rulesimple_expression    {
		$current.merge(this_simple_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_EQUALS_1=RULE_EQUALS    {
		$current.merge(this_EQUALS_1);
    }

    { 
    createLeafNode(grammarAccess.getEquality_equation_ruleAccess().getEQUALSTerminalRuleCall_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getEquality_equation_ruleAccess().getExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRuleconditional_equation_rule_e
entryRuleconditional_equation_rule_e returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConditional_equation_rule_eRule(), currentNode); }
	 iv_ruleconditional_equation_rule_e=ruleconditional_equation_rule_e 
	 { $current=$iv_ruleconditional_equation_rule_e.current; } 
	 EOF 
;

// Rule conditional_equation_rule_e
ruleconditional_equation_rule_e returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('if' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_eAccess().getIfKeyword_0(), null); 
    }
ruleexpression'then' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_eAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditional_equation_rule_eAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenEquationClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_equation_rule_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenEquationClauses", lv_thenEquationClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getConditional_equation_rule_eAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditional_equation_rule_eAccess().getElseifClausesEquation_rule_elseifParserRuleCall_4_0(), currentNode); 
	    }
	    lv_elseifClauses_5=ruleequation_rule_elseif 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_equation_rule_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elseifClauses", lv_elseifClauses_5, "equation_rule_elseif", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*('else' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_eAccess().getElseKeyword_5_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditional_equation_rule_eAccess().getElseEquationClausesEquation_ruleParserRuleCall_5_1_0_0(), currentNode); 
	    }
	    lv_elseEquationClauses_7=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_equation_rule_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elseEquationClauses", lv_elseEquationClauses_7, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getConditional_equation_rule_eAccess().getSEMICOLONTerminalRuleCall_5_1_1(), null); 
    }
)*)?'end' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_eAccess().getEndKeyword_6(), null); 
    }
'if' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_eAccess().getIfKeyword_7(), null); 
    }
);





// Entry rule entryRuleconditional_equation_rule_a
entryRuleconditional_equation_rule_a returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConditional_equation_rule_aRule(), currentNode); }
	 iv_ruleconditional_equation_rule_a=ruleconditional_equation_rule_a 
	 { $current=$iv_ruleconditional_equation_rule_a.current; } 
	 EOF 
;

// Rule conditional_equation_rule_a
ruleconditional_equation_rule_a returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('if' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_aAccess().getIfKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditional_equation_rule_aAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_equation_rule_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_aAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditional_equation_rule_aAccess().getThenAlgorithmClausesAlgorithmParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenAlgorithmClauses_3=rulealgorithm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_equation_rule_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenAlgorithmClauses", lv_thenAlgorithmClauses_3, "algorithm", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getConditional_equation_rule_aAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditional_equation_rule_aAccess().getElseifClausesAlgorithm_elseifParserRuleCall_4_0(), currentNode); 
	    }
	    lv_elseifClauses_5=rulealgorithm_elseif 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_equation_rule_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elseifClauses", lv_elseifClauses_5, "algorithm_elseif", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*('else' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_aAccess().getElseKeyword_5_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditional_equation_rule_aAccess().getElseAlgotithmClausesAlgorithmParserRuleCall_5_1_0_0(), currentNode); 
	    }
	    lv_elseAlgotithmClauses_7=rulealgorithm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_equation_rule_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elseAlgotithmClauses", lv_elseAlgotithmClauses_7, "algorithm", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getConditional_equation_rule_aAccess().getSEMICOLONTerminalRuleCall_5_1_1(), null); 
    }
)*)?'end' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_aAccess().getEndKeyword_6(), null); 
    }
'if' 
    {
        createLeafNode(grammarAccess.getConditional_equation_rule_aAccess().getIfKeyword_7(), null); 
    }
);





// Entry rule entryRulefor_clause_e
entryRulefor_clause_e returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFor_clause_eRule(), currentNode); }
	 iv_rulefor_clause_e=rulefor_clause_e 
	 { $current=$iv_rulefor_clause_e.current; } 
	 EOF 
;

// Rule for_clause_e
rulefor_clause_e returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('for' 
    {
        createLeafNode(grammarAccess.getFor_clause_eAccess().getForKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFor_clause_eAccess().getForIndicesFor_indicesParserRuleCall_1_0(), currentNode); 
	    }
	    lv_forIndices_1=rulefor_indices 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_clause_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "forIndices", lv_forIndices_1, "for_indices", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'loop' 
    {
        createLeafNode(grammarAccess.getFor_clause_eAccess().getLoopKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFor_clause_eAccess().getEquationClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_equationClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_clause_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "equationClauses", lv_equationClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getFor_clause_eAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*'end' 
    {
        createLeafNode(grammarAccess.getFor_clause_eAccess().getEndKeyword_4(), null); 
    }
'for' 
    {
        createLeafNode(grammarAccess.getFor_clause_eAccess().getForKeyword_5(), null); 
    }
);





// Entry rule entryRulefor_clause_a
entryRulefor_clause_a returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFor_clause_aRule(), currentNode); }
	 iv_rulefor_clause_a=rulefor_clause_a 
	 { $current=$iv_rulefor_clause_a.current; } 
	 EOF 
;

// Rule for_clause_a
rulefor_clause_a returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('for' 
    {
        createLeafNode(grammarAccess.getFor_clause_aAccess().getForKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFor_clause_aAccess().getForIndicesFor_indicesParserRuleCall_1_0(), currentNode); 
	    }
	    lv_forIndices_1=rulefor_indices 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_clause_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "forIndices", lv_forIndices_1, "for_indices", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'loop' 
    {
        createLeafNode(grammarAccess.getFor_clause_aAccess().getLoopKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFor_clause_aAccess().getAlgorithmClausesAlgorithmParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_algorithmClauses_3=rulealgorithm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_clause_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "algorithmClauses", lv_algorithmClauses_3, "algorithm", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getFor_clause_aAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*'end' 
    {
        createLeafNode(grammarAccess.getFor_clause_aAccess().getEndKeyword_4(), null); 
    }
'for' 
    {
        createLeafNode(grammarAccess.getFor_clause_aAccess().getForKeyword_5(), null); 
    }
);





// Entry rule entryRulewhile_clause
entryRulewhile_clause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWhile_clauseRule(), currentNode); }
	 iv_rulewhile_clause=rulewhile_clause 
	 { $current=$iv_rulewhile_clause.current; } 
	 EOF 
;

// Rule while_clause
rulewhile_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('while' 
    {
        createLeafNode(grammarAccess.getWhile_clauseAccess().getWhileKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhile_clauseAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhile_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'loop' 
    {
        createLeafNode(grammarAccess.getWhile_clauseAccess().getLoopKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhile_clauseAccess().getAlgorithmClausesAlgorithmParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_algorithmClauses_3=rulealgorithm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhile_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "algorithmClauses", lv_algorithmClauses_3, "algorithm", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getWhile_clauseAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*'end' 
    {
        createLeafNode(grammarAccess.getWhile_clauseAccess().getEndKeyword_4(), null); 
    }
'while' 
    {
        createLeafNode(grammarAccess.getWhile_clauseAccess().getWhileKeyword_5(), null); 
    }
);





// Entry rule entryRulewhen_clause_e
entryRulewhen_clause_e returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWhen_clause_eRule(), currentNode); }
	 iv_rulewhen_clause_e=rulewhen_clause_e 
	 { $current=$iv_rulewhen_clause_e.current; } 
	 EOF 
;

// Rule when_clause_e
rulewhen_clause_e returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('when' 
    {
        createLeafNode(grammarAccess.getWhen_clause_eAccess().getWhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhen_clause_eAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_clause_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getWhen_clause_eAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhen_clause_eAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenEquationClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_clause_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenEquationClauses", lv_thenEquationClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getWhen_clause_eAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhen_clause_eAccess().getElseWhenClausesElse_when_eParserRuleCall_4_0(), currentNode); 
	    }
	    lv_elseWhenClauses_5=ruleelse_when_e 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_clause_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elseWhenClauses", lv_elseWhenClauses_5, "else_when_e", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'end' 
    {
        createLeafNode(grammarAccess.getWhen_clause_eAccess().getEndKeyword_5(), null); 
    }
'when' 
    {
        createLeafNode(grammarAccess.getWhen_clause_eAccess().getWhenKeyword_6(), null); 
    }
);





// Entry rule entryRuleelse_when_e
entryRuleelse_when_e returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElse_when_eRule(), currentNode); }
	 iv_ruleelse_when_e=ruleelse_when_e 
	 { $current=$iv_ruleelse_when_e.current; } 
	 EOF 
;

// Rule else_when_e
ruleelse_when_e returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('elsewhen' 
    {
        createLeafNode(grammarAccess.getElse_when_eAccess().getElsewhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElse_when_eAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElse_when_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getElse_when_eAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElse_when_eAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenEquationClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElse_when_eRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenEquationClauses", lv_thenEquationClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getElse_when_eAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*);





// Entry rule entryRulewhen_clause_a
entryRulewhen_clause_a returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWhen_clause_aRule(), currentNode); }
	 iv_rulewhen_clause_a=rulewhen_clause_a 
	 { $current=$iv_rulewhen_clause_a.current; } 
	 EOF 
;

// Rule when_clause_a
rulewhen_clause_a returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('when' 
    {
        createLeafNode(grammarAccess.getWhen_clause_aAccess().getWhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhen_clause_aAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_clause_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getWhen_clause_aAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhen_clause_aAccess().getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenAlgorithmClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_clause_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenAlgorithmClauses", lv_thenAlgorithmClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getWhen_clause_aAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhen_clause_aAccess().getElseWhenClausesElse_when_aParserRuleCall_4_0(), currentNode); 
	    }
	    lv_elseWhenClauses_5=ruleelse_when_a 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_clause_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elseWhenClauses", lv_elseWhenClauses_5, "else_when_a", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'end' 
    {
        createLeafNode(grammarAccess.getWhen_clause_aAccess().getEndKeyword_5(), null); 
    }
'when' 
    {
        createLeafNode(grammarAccess.getWhen_clause_aAccess().getWhenKeyword_6(), null); 
    }
);





// Entry rule entryRuleelse_when_a
entryRuleelse_when_a returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElse_when_aRule(), currentNode); }
	 iv_ruleelse_when_a=ruleelse_when_a 
	 { $current=$iv_ruleelse_when_a.current; } 
	 EOF 
;

// Rule else_when_a
ruleelse_when_a returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('elsewhen' 
    {
        createLeafNode(grammarAccess.getElse_when_aAccess().getElsewhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElse_when_aAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElse_when_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getElse_when_aAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElse_when_aAccess().getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenAlgorithmClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElse_when_aRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenAlgorithmClauses", lv_thenAlgorithmClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getElse_when_aAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*);





// Entry rule entryRuleequation_rule_elseif
entryRuleequation_rule_elseif returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEquation_rule_elseifRule(), currentNode); }
	 iv_ruleequation_rule_elseif=ruleequation_rule_elseif 
	 { $current=$iv_ruleequation_rule_elseif.current; } 
	 EOF 
;

// Rule equation_rule_elseif
ruleequation_rule_elseif returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('elseif' 
    {
        createLeafNode(grammarAccess.getEquation_rule_elseifAccess().getElseifKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEquation_rule_elseifAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquation_rule_elseifRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getEquation_rule_elseifAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEquation_rule_elseifAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenEquationClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquation_rule_elseifRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenEquationClauses", lv_thenEquationClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getEquation_rule_elseifAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*);





// Entry rule entryRulealgorithm_elseif
entryRulealgorithm_elseif returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAlgorithm_elseifRule(), currentNode); }
	 iv_rulealgorithm_elseif=rulealgorithm_elseif 
	 { $current=$iv_rulealgorithm_elseif.current; } 
	 EOF 
;

// Rule algorithm_elseif
rulealgorithm_elseif returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('elseif' 
    {
        createLeafNode(grammarAccess.getAlgorithm_elseifAccess().getElseifKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAlgorithm_elseifAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleexpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlgorithm_elseifRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getAlgorithm_elseifAccess().getThenKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAlgorithm_elseifAccess().getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_thenAlgorithmClauses_3=ruleequation_rule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlgorithm_elseifRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "thenAlgorithmClauses", lv_thenAlgorithmClauses_3, "equation_rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)RULE_SEMICOLON
    { 
    createLeafNode(grammarAccess.getAlgorithm_elseifAccess().getSEMICOLONTerminalRuleCall_3_1(), null); 
    }
)*);





// Entry rule entryRuleconnect_clause
entryRuleconnect_clause returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConnect_clauseRule(), currentNode); } 
	 iv_ruleconnect_clause=ruleconnect_clause 
	 { $current=$iv_ruleconnect_clause.current.getText(); }  
	 EOF 
;

// Rule connect_clause
ruleconnect_clause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='connect' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getConnect_clauseAccess().getConnectKeyword_0(), null); 
    }
    this_LPAR_1=RULE_LPAR    {
		$current.merge(this_LPAR_1);
    }

    { 
    createLeafNode(grammarAccess.getConnect_clauseAccess().getLPARTerminalRuleCall_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getConnect_clauseAccess().getConnector_refParserRuleCall_2(), currentNode); 
    }
    this_connector_ref_2=ruleconnector_ref    {
		$current.merge(this_connector_ref_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
    this_COMMA_3=RULE_COMMA    {
		$current.merge(this_COMMA_3);
    }

    { 
    createLeafNode(grammarAccess.getConnect_clauseAccess().getCOMMATerminalRuleCall_3(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getConnect_clauseAccess().getConnector_refParserRuleCall_4(), currentNode); 
    }
    this_connector_ref_4=ruleconnector_ref    {
		$current.merge(this_connector_ref_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
    this_RPAR_5=RULE_RPAR    {
		$current.merge(this_RPAR_5);
    }

    { 
    createLeafNode(grammarAccess.getConnect_clauseAccess().getRPARTerminalRuleCall_5(), null); 
    }
)
    ;





// Entry rule entryRuleconnector_ref
entryRuleconnector_ref returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConnector_refRule(), currentNode); } 
	 iv_ruleconnector_ref=ruleconnector_ref 
	 { $current=$iv_ruleconnector_ref.current.getText(); }  
	 EOF 
;

// Rule connector_ref
ruleconnector_ref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getConnector_refAccess().getIDENTTerminalRuleCall_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConnector_refAccess().getArray_subscriptsParserRuleCall_1(), currentNode); 
    }
    this_array_subscripts_1=rulearray_subscripts    {
		$current.merge(this_array_subscripts_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?(    this_DOT_2=RULE_DOT    {
		$current.merge(this_DOT_2);
    }

    { 
    createLeafNode(grammarAccess.getConnector_refAccess().getDOTTerminalRuleCall_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getConnector_refAccess().getConnector_ref_2ParserRuleCall_2_1(), currentNode); 
    }
    this_connector_ref_2_3=ruleconnector_ref_2    {
		$current.merge(this_connector_ref_2_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRuleconnector_ref_2
entryRuleconnector_ref_2 returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConnector_ref_2Rule(), currentNode); } 
	 iv_ruleconnector_ref_2=ruleconnector_ref_2 
	 { $current=$iv_ruleconnector_ref_2.current.getText(); }  
	 EOF 
;

// Rule connector_ref_2
ruleconnector_ref_2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getConnector_ref_2Access().getIDENTTerminalRuleCall_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConnector_ref_2Access().getArray_subscriptsParserRuleCall_1(), currentNode); 
    }
    this_array_subscripts_1=rulearray_subscripts    {
		$current.merge(this_array_subscripts_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); } 
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current.getText(); }  
	 EOF 
;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getIf_expressionParserRuleCall_0(), currentNode); 
    }
    this_if_expression_0=ruleif_expression    {
		$current.merge(this_if_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_1(), currentNode); 
    }
    this_simple_expression_1=rulesimple_expression    {
		$current.merge(this_simple_expression_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;







// Entry rule entryRuleif_expression
entryRuleif_expression returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIf_expressionRule(), currentNode); } 
	 iv_ruleif_expression=ruleif_expression 
	 { $current=$iv_ruleif_expression.current.getText(); }  
	 EOF 
;

// Rule if_expression
ruleif_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='if' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIf_expressionAccess().getIfKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getIf_expressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='then' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIf_expressionAccess().getThenKeyword_2(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getIf_expressionAccess().getExpressionParserRuleCall_3(), currentNode); 
    }
    this_expression_3=ruleexpression    {
		$current.merge(this_expression_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIf_expressionAccess().getElseif_expressionParserRuleCall_4(), currentNode); 
    }
    this_elseif_expression_4=ruleelseif_expression    {
		$current.merge(this_elseif_expression_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*
	kw='else' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIf_expressionAccess().getElseKeyword_5(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getIf_expressionAccess().getExpressionParserRuleCall_6(), currentNode); 
    }
    this_expression_6=ruleexpression    {
		$current.merge(this_expression_6);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleelseif_expression
entryRuleelseif_expression returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElseif_expressionRule(), currentNode); } 
	 iv_ruleelseif_expression=ruleelseif_expression 
	 { $current=$iv_ruleelseif_expression.current.getText(); }  
	 EOF 
;

// Rule elseif_expression
ruleelseif_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='elseif' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getElseif_expressionAccess().getElseifKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getElseif_expressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='then' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getElseif_expressionAccess().getThenKeyword_2(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getElseif_expressionAccess().getExpressionParserRuleCall_3(), currentNode); 
    }
    this_expression_3=ruleexpression    {
		$current.merge(this_expression_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulefor_indices
entryRulefor_indices returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFor_indicesRule(), currentNode); } 
	 iv_rulefor_indices=rulefor_indices 
	 { $current=$iv_rulefor_indices.current.getText(); }  
	 EOF 
;

// Rule for_indices
rulefor_indices returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFor_indicesAccess().getFor_indexParserRuleCall_0(), currentNode); 
    }
    this_for_index_0=rulefor_index    {
		$current.merge(this_for_index_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    createLeafNode(grammarAccess.getFor_indicesAccess().getCOMMATerminalRuleCall_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFor_indicesAccess().getFor_indexParserRuleCall_1_1(), currentNode); 
    }
    this_for_index_2=rulefor_index    {
		$current.merge(this_for_index_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRulefor_index
entryRulefor_index returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFor_indexRule(), currentNode); } 
	 iv_rulefor_index=rulefor_index 
	 { $current=$iv_rulefor_index.current.getText(); }  
	 EOF 
;

// Rule for_index
rulefor_index returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getFor_indexAccess().getIDENTTerminalRuleCall_0(), null); 
    }
(
	kw='in' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFor_indexAccess().getInKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFor_indexAccess().getExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSimple_expressionRule(), currentNode); } 
	 iv_rulesimple_expression=rulesimple_expression 
	 { $current=$iv_rulesimple_expression.current.getText(); }  
	 EOF 
;

// Rule simple_expression
rulesimple_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getSimple_expressionAccess().getSimple_exprParserRuleCall(), currentNode); 
    }
    this_simple_expr_0=rulesimple_expr    {
		$current.merge(this_simple_expr_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulesimple_expr
entryRulesimple_expr returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSimple_exprRule(), currentNode); } 
	 iv_rulesimple_expr=rulesimple_expr 
	 { $current=$iv_rulesimple_expr.current.getText(); }  
	 EOF 
;

// Rule simple_expr
rulesimple_expr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSimple_exprAccess().getLogical_expressionParserRuleCall_0(), currentNode); 
    }
    this_logical_expression_0=rulelogical_expression    {
		$current.merge(this_logical_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_COLON_1=RULE_COLON    {
		$current.merge(this_COLON_1);
    }

    { 
    createLeafNode(grammarAccess.getSimple_exprAccess().getCOLONTerminalRuleCall_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getSimple_exprAccess().getLogical_expressionParserRuleCall_1_1(), currentNode); 
    }
    this_logical_expression_2=rulelogical_expression    {
		$current.merge(this_logical_expression_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_COLON_3=RULE_COLON    {
		$current.merge(this_COLON_3);
    }

    { 
    createLeafNode(grammarAccess.getSimple_exprAccess().getCOLONTerminalRuleCall_1_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getSimple_exprAccess().getLogical_expressionParserRuleCall_1_2_1(), currentNode); 
    }
    this_logical_expression_4=rulelogical_expression    {
		$current.merge(this_logical_expression_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)?)
    ;





// Entry rule entryRulelogical_expression
entryRulelogical_expression returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLogical_expressionRule(), currentNode); } 
	 iv_rulelogical_expression=rulelogical_expression 
	 { $current=$iv_rulelogical_expression.current.getText(); }  
	 EOF 
;

// Rule logical_expression
rulelogical_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogical_expressionAccess().getLogical_termParserRuleCall_0(), currentNode); 
    }
    this_logical_term_0=rulelogical_term    {
		$current.merge(this_logical_term_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLogical_expressionAccess().getOrKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getLogical_expressionAccess().getLogical_termParserRuleCall_1_1(), currentNode); 
    }
    this_logical_term_2=rulelogical_term    {
		$current.merge(this_logical_term_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRulelogical_term
entryRulelogical_term returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLogical_termRule(), currentNode); } 
	 iv_rulelogical_term=rulelogical_term 
	 { $current=$iv_rulelogical_term.current.getText(); }  
	 EOF 
;

// Rule logical_term
rulelogical_term returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogical_termAccess().getLogical_factorParserRuleCall_0(), currentNode); 
    }
    this_logical_factor_0=rulelogical_factor    {
		$current.merge(this_logical_factor_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='and' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLogical_termAccess().getAndKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getLogical_termAccess().getLogical_factorParserRuleCall_1_1(), currentNode); 
    }
    this_logical_factor_2=rulelogical_factor    {
		$current.merge(this_logical_factor_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRulelogical_factor
entryRulelogical_factor returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLogical_factorRule(), currentNode); } 
	 iv_rulelogical_factor=rulelogical_factor 
	 { $current=$iv_rulelogical_factor.current.getText(); }  
	 EOF 
;

// Rule logical_factor
rulelogical_factor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
	kw='not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLogical_factorAccess().getNotKeyword_0(), null); 
    }
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getLogical_factorAccess().getRelationParserRuleCall_1(), currentNode); 
    }
    this_relation_1=rulerelation    {
		$current.merge(this_relation_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulerelation
entryRulerelation returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationRule(), currentNode); } 
	 iv_rulerelation=rulerelation 
	 { $current=$iv_rulerelation.current.getText(); }  
	 EOF 
;

// Rule relation
rulerelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getArithmetic_expressionParserRuleCall_0(), currentNode); 
    }
    this_arithmetic_expression_0=rulearithmetic_expression    {
		$current.merge(this_arithmetic_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((    this_LESS_1=RULE_LESS    {
		$current.merge(this_LESS_1);
    }

    { 
    createLeafNode(grammarAccess.getRelationAccess().getLESSTerminalRuleCall_1_0_0(), null); 
    }

    |    this_LESSEQ_2=RULE_LESSEQ    {
		$current.merge(this_LESSEQ_2);
    }

    { 
    createLeafNode(grammarAccess.getRelationAccess().getLESSEQTerminalRuleCall_1_0_1(), null); 
    }

    |    this_GREATER_3=RULE_GREATER    {
		$current.merge(this_GREATER_3);
    }

    { 
    createLeafNode(grammarAccess.getRelationAccess().getGREATERTerminalRuleCall_1_0_2(), null); 
    }

    |    this_GREATEREQ_4=RULE_GREATEREQ    {
		$current.merge(this_GREATEREQ_4);
    }

    { 
    createLeafNode(grammarAccess.getRelationAccess().getGREATEREQTerminalRuleCall_1_0_3(), null); 
    }

    |    this_EQEQ_5=RULE_EQEQ    {
		$current.merge(this_EQEQ_5);
    }

    { 
    createLeafNode(grammarAccess.getRelationAccess().getEQEQTerminalRuleCall_1_0_4(), null); 
    }

    |    this_LESSGT_6=RULE_LESSGT    {
		$current.merge(this_LESSGT_6);
    }

    { 
    createLeafNode(grammarAccess.getRelationAccess().getLESSGTTerminalRuleCall_1_0_5(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getArithmetic_expressionParserRuleCall_1_1(), currentNode); 
    }
    this_arithmetic_expression_7=rulearithmetic_expression    {
		$current.merge(this_arithmetic_expression_7);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRulearithmetic_expression
entryRulearithmetic_expression returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArithmetic_expressionRule(), currentNode); } 
	 iv_rulearithmetic_expression=rulearithmetic_expression 
	 { $current=$iv_rulearithmetic_expression.current.getText(); }  
	 EOF 
;

// Rule arithmetic_expression
rulearithmetic_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getUnary_arithmetic_expressionParserRuleCall_0(), currentNode); 
    }
    this_unary_arithmetic_expression_0=ruleunary_arithmetic_expression    {
		$current.merge(this_unary_arithmetic_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((    this_PLUS_1=RULE_PLUS    {
		$current.merge(this_PLUS_1);
    }

    { 
    createLeafNode(grammarAccess.getArithmetic_expressionAccess().getPLUSTerminalRuleCall_1_0_0(), null); 
    }

    |    this_MINUS_2=RULE_MINUS    {
		$current.merge(this_MINUS_2);
    }

    { 
    createLeafNode(grammarAccess.getArithmetic_expressionAccess().getMINUSTerminalRuleCall_1_0_1(), null); 
    }

    |    this_PLUS_EW_3=RULE_PLUS_EW    {
		$current.merge(this_PLUS_EW_3);
    }

    { 
    createLeafNode(grammarAccess.getArithmetic_expressionAccess().getPLUS_EWTerminalRuleCall_1_0_2(), null); 
    }

    |    this_MINUS_EW_4=RULE_MINUS_EW    {
		$current.merge(this_MINUS_EW_4);
    }

    { 
    createLeafNode(grammarAccess.getArithmetic_expressionAccess().getMINUS_EWTerminalRuleCall_1_0_3(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getTermParserRuleCall_1_1(), currentNode); 
    }
    this_term_5=ruleterm    {
		$current.merge(this_term_5);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRuleunary_arithmetic_expression
entryRuleunary_arithmetic_expression returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnary_arithmetic_expressionRule(), currentNode); } 
	 iv_ruleunary_arithmetic_expression=ruleunary_arithmetic_expression 
	 { $current=$iv_ruleunary_arithmetic_expression.current.getText(); }  
	 EOF 
;

// Rule unary_arithmetic_expression
ruleunary_arithmetic_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((    this_PLUS_0=RULE_PLUS    {
		$current.merge(this_PLUS_0);
    }

    { 
    createLeafNode(grammarAccess.getUnary_arithmetic_expressionAccess().getPLUSTerminalRuleCall_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnary_arithmetic_expressionAccess().getTermParserRuleCall_0_1(), currentNode); 
    }
    this_term_1=ruleterm    {
		$current.merge(this_term_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    |(    this_MINUS_2=RULE_MINUS    {
		$current.merge(this_MINUS_2);
    }

    { 
    createLeafNode(grammarAccess.getUnary_arithmetic_expressionAccess().getMINUSTerminalRuleCall_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnary_arithmetic_expressionAccess().getTermParserRuleCall_1_1(), currentNode); 
    }
    this_term_3=ruleterm    {
		$current.merge(this_term_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    |(    this_PLUS_EW_4=RULE_PLUS_EW    {
		$current.merge(this_PLUS_EW_4);
    }

    { 
    createLeafNode(grammarAccess.getUnary_arithmetic_expressionAccess().getPLUS_EWTerminalRuleCall_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnary_arithmetic_expressionAccess().getTermParserRuleCall_2_1(), currentNode); 
    }
    this_term_5=ruleterm    {
		$current.merge(this_term_5);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    |(    this_MINUS_EW_6=RULE_MINUS_EW    {
		$current.merge(this_MINUS_EW_6);
    }

    { 
    createLeafNode(grammarAccess.getUnary_arithmetic_expressionAccess().getMINUS_EWTerminalRuleCall_3_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getUnary_arithmetic_expressionAccess().getTermParserRuleCall_3_1(), currentNode); 
    }
    this_term_7=ruleterm    {
		$current.merge(this_term_7);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getUnary_arithmetic_expressionAccess().getTermParserRuleCall_4(), currentNode); 
    }
    this_term_8=ruleterm    {
		$current.merge(this_term_8);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleterm
entryRuleterm returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTermRule(), currentNode); } 
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current.getText(); }  
	 EOF 
;

// Rule term
ruleterm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0(), currentNode); 
    }
    this_factor_0=rulefactor    {
		$current.merge(this_factor_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((    this_STAR_1=RULE_STAR    {
		$current.merge(this_STAR_1);
    }

    { 
    createLeafNode(grammarAccess.getTermAccess().getSTARTerminalRuleCall_1_0_0(), null); 
    }

    |    this_SLASH_2=RULE_SLASH    {
		$current.merge(this_SLASH_2);
    }

    { 
    createLeafNode(grammarAccess.getTermAccess().getSLASHTerminalRuleCall_1_0_1(), null); 
    }

    |    this_STAR_EW_3=RULE_STAR_EW    {
		$current.merge(this_STAR_EW_3);
    }

    { 
    createLeafNode(grammarAccess.getTermAccess().getSTAR_EWTerminalRuleCall_1_0_2(), null); 
    }

    |    this_SLASH_EW_4=RULE_SLASH_EW    {
		$current.merge(this_SLASH_EW_4);
    }

    { 
    createLeafNode(grammarAccess.getTermAccess().getSLASH_EWTerminalRuleCall_1_0_3(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1(), currentNode); 
    }
    this_factor_5=rulefactor    {
		$current.merge(this_factor_5);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRulefactor
entryRulefactor returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFactorRule(), currentNode); } 
	 iv_rulefactor=rulefactor 
	 { $current=$iv_rulefactor.current.getText(); }  
	 EOF 
;

// Rule factor
rulefactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0(), currentNode); 
    }
    this_primary_0=ruleprimary    {
		$current.merge(this_primary_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((    this_POWER_1=RULE_POWER    {
		$current.merge(this_POWER_1);
    }

    { 
    createLeafNode(grammarAccess.getFactorAccess().getPOWERTerminalRuleCall_1_0_0(), null); 
    }

    |    this_POWER_EW_2=RULE_POWER_EW    {
		$current.merge(this_POWER_EW_2);
    }

    { 
    createLeafNode(grammarAccess.getFactorAccess().getPOWER_EWTerminalRuleCall_1_0_1(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_1_1(), currentNode); 
    }
    this_primary_3=ruleprimary    {
		$current.merge(this_primary_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRuleprimary
entryRuleprimary returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryRule(), currentNode); } 
	 iv_ruleprimary=ruleprimary 
	 { $current=$iv_ruleprimary.current.getText(); }  
	 EOF 
;

// Rule primary
ruleprimary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_UNSIGNED_INTEGER_0=RULE_UNSIGNED_INTEGER    {
		$current.merge(this_UNSIGNED_INTEGER_0);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getUNSIGNED_INTEGERTerminalRuleCall_0(), null); 
    }

    |    this_UNSIGNED_REAL_1=RULE_UNSIGNED_REAL    {
		$current.merge(this_UNSIGNED_REAL_1);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getUNSIGNED_REALTerminalRuleCall_1(), null); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getSTRINGTerminalRuleCall_2(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimaryAccess().getFalseKeyword_3(), null); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimaryAccess().getTrueKeyword_4(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getComponent_reference__function_callParserRuleCall_5(), currentNode); 
    }
    this_component_reference__function_call_5=rulecomponent_reference__function_call    {
		$current.merge(this_component_reference__function_call_5);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |(
	kw='der' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimaryAccess().getDerKeyword_6_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getFunction_callParserRuleCall_6_1(), currentNode); 
    }
    this_function_call_7=rulefunction_call    {
		$current.merge(this_function_call_7);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    |(    this_LPAR_8=RULE_LPAR    {
		$current.merge(this_LPAR_8);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getLPARTerminalRuleCall_7_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getExpression_listParserRuleCall_7_1(), currentNode); 
    }
    this_expression_list_9=ruleexpression_list    {
		$current.merge(this_expression_list_9);
    }

    { 
        currentNode = currentNode.getParent();
    }
    this_RPAR_10=RULE_RPAR    {
		$current.merge(this_RPAR_10);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getRPARTerminalRuleCall_7_2(), null); 
    }
)
    |(    this_LBRACK_11=RULE_LBRACK    {
		$current.merge(this_LBRACK_11);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getLBRACKTerminalRuleCall_8_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getExpression_listParserRuleCall_8_1(), currentNode); 
    }
    this_expression_list_12=ruleexpression_list    {
		$current.merge(this_expression_list_12);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_SEMICOLON_13=RULE_SEMICOLON    {
		$current.merge(this_SEMICOLON_13);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getSEMICOLONTerminalRuleCall_8_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getExpression_listParserRuleCall_8_2_1(), currentNode); 
    }
    this_expression_list_14=ruleexpression_list    {
		$current.merge(this_expression_list_14);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*    this_RBRACK_15=RULE_RBRACK    {
		$current.merge(this_RBRACK_15);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getRBRACKTerminalRuleCall_8_3(), null); 
    }
)
    |(    this_LBRACE_16=RULE_LBRACE    {
		$current.merge(this_LBRACE_16);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getLBRACETerminalRuleCall_9_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getFor_or_expression_listParserRuleCall_9_1(), currentNode); 
    }
    this_for_or_expression_list_17=rulefor_or_expression_list    {
		$current.merge(this_for_or_expression_list_17);
    }

    { 
        currentNode = currentNode.getParent();
    }
    this_RBRACE_18=RULE_RBRACE    {
		$current.merge(this_RBRACE_18);
    }

    { 
    createLeafNode(grammarAccess.getPrimaryAccess().getRBRACETerminalRuleCall_9_2(), null); 
    }
)
    |
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimaryAccess().getEndKeyword_10(), null); 
    }
)
    ;





// Entry rule entryRulecomponent_reference__function_call
entryRulecomponent_reference__function_call returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getComponent_reference__function_callRule(), currentNode); } 
	 iv_rulecomponent_reference__function_call=rulecomponent_reference__function_call 
	 { $current=$iv_rulecomponent_reference__function_call.current.getText(); }  
	 EOF 
;

// Rule component_reference__function_call
rulecomponent_reference__function_call returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_reference__function_callAccess().getComponent_referenceParserRuleCall_0_0(), currentNode); 
    }
    this_component_reference_0=rulecomponent_reference    {
		$current.merge(this_component_reference_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_reference__function_callAccess().getFunction_callParserRuleCall_0_1(), currentNode); 
    }
    this_function_call_1=rulefunction_call    {
		$current.merge(this_function_call_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    |(
	kw='initial' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComponent_reference__function_callAccess().getInitialKeyword_1_0(), null); 
    }
    this_LPAR_3=RULE_LPAR    {
		$current.merge(this_LPAR_3);
    }

    { 
    createLeafNode(grammarAccess.getComponent_reference__function_callAccess().getLPARTerminalRuleCall_1_1(), null); 
    }
    this_RPAR_4=RULE_RPAR    {
		$current.merge(this_RPAR_4);
    }

    { 
    createLeafNode(grammarAccess.getComponent_reference__function_callAccess().getRPARTerminalRuleCall_1_2(), null); 
    }
))
    ;





// Entry rule entryRulename_path
entryRulename_path returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getName_pathRule(), currentNode); } 
	 iv_rulename_path=rulename_path 
	 { $current=$iv_rulename_path.current.getText(); }  
	 EOF 
;

// Rule name_path
rulename_path returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getName_pathAccess().getIDENTTerminalRuleCall_0(), null); 
    }

    |(    this_IDENT_1=RULE_IDENT    {
		$current.merge(this_IDENT_1);
    }

    { 
    createLeafNode(grammarAccess.getName_pathAccess().getIDENTTerminalRuleCall_1_0(), null); 
    }
    this_DOT_2=RULE_DOT    {
		$current.merge(this_DOT_2);
    }

    { 
    createLeafNode(grammarAccess.getName_pathAccess().getDOTTerminalRuleCall_1_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getName_pathAccess().getName_pathParserRuleCall_1_2(), currentNode); 
    }
    this_name_path_3=rulename_path    {
		$current.merge(this_name_path_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
))
    ;





// Entry rule entryRulename_path_star
entryRulename_path_star returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getName_path_starRule(), currentNode); } 
	 iv_rulename_path_star=rulename_path_star 
	 { $current=$iv_rulename_path_star.current.getText(); }  
	 EOF 
;

// Rule name_path_star
rulename_path_star returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getName_path_starAccess().getIDENTTerminalRuleCall_0_0(), null); 
    }
(    this_STAR_EW_1=RULE_STAR_EW    {
		$current.merge(this_STAR_EW_1);
    }

    { 
    createLeafNode(grammarAccess.getName_path_starAccess().getSTAR_EWTerminalRuleCall_0_1(), null); 
    }
)?)
    |(    this_IDENT_2=RULE_IDENT    {
		$current.merge(this_IDENT_2);
    }

    { 
    createLeafNode(grammarAccess.getName_path_starAccess().getIDENTTerminalRuleCall_1_0(), null); 
    }
    this_DOT_3=RULE_DOT    {
		$current.merge(this_DOT_3);
    }

    { 
    createLeafNode(grammarAccess.getName_path_starAccess().getDOTTerminalRuleCall_1_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getName_path_starAccess().getName_path_starParserRuleCall_1_2(), currentNode); 
    }
    this_name_path_star_4=rulename_path_star    {
		$current.merge(this_name_path_star_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
))
    ;





// Entry rule entryRulecomponent_reference
entryRulecomponent_reference returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getComponent_referenceRule(), currentNode); } 
	 iv_rulecomponent_reference=rulecomponent_reference 
	 { $current=$iv_rulecomponent_reference.current.getText(); }  
	 EOF 
;

// Rule component_reference
rulecomponent_reference returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getComponent_referenceAccess().getIDENTTerminalRuleCall_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_referenceAccess().getArray_subscriptsParserRuleCall_1(), currentNode); 
    }
    this_array_subscripts_1=rulearray_subscripts    {
		$current.merge(this_array_subscripts_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?(    this_DOT_2=RULE_DOT    {
		$current.merge(this_DOT_2);
    }

    { 
    createLeafNode(grammarAccess.getComponent_referenceAccess().getDOTTerminalRuleCall_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_referenceAccess().getComponent_referenceParserRuleCall_2_1(), currentNode); 
    }
    this_component_reference_3=rulecomponent_reference    {
		$current.merge(this_component_reference_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRulefunction_call
entryRulefunction_call returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunction_callRule(), currentNode); } 
	 iv_rulefunction_call=rulefunction_call 
	 { $current=$iv_rulefunction_call.current.getText(); }  
	 EOF 
;

// Rule function_call
rulefunction_call returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_LPAR_0=RULE_LPAR    {
		$current.merge(this_LPAR_0);
    }

    { 
    createLeafNode(grammarAccess.getFunction_callAccess().getLPARTerminalRuleCall_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFunction_callAccess().getFunction_argumentsParserRuleCall_1(), currentNode); 
    }
    this_function_arguments_1=rulefunction_arguments    {
		$current.merge(this_function_arguments_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
    this_RPAR_2=RULE_RPAR    {
		$current.merge(this_RPAR_2);
    }

    { 
    createLeafNode(grammarAccess.getFunction_callAccess().getRPARTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRulefunction_arguments
entryRulefunction_arguments returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunction_argumentsRule(), currentNode); } 
	 iv_rulefunction_arguments=rulefunction_arguments 
	 { $current=$iv_rulefunction_arguments.current.getText(); }  
	 EOF 
;

// Rule function_arguments
rulefunction_arguments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getFunction_argumentsAccess().getFor_or_expression_listParserRuleCall_0(), currentNode); 
    }
    this_for_or_expression_list_0=rulefor_or_expression_list    {
		$current.merge(this_for_or_expression_list_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?(
    { 
        currentNode=createCompositeNode(grammarAccess.getFunction_argumentsAccess().getNamed_argumentsParserRuleCall_1(), currentNode); 
    }
    this_named_arguments_1=rulenamed_arguments    {
		$current.merge(this_named_arguments_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRulefor_or_expression_list
entryRulefor_or_expression_list returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFor_or_expression_listRule(), currentNode); } 
	 iv_rulefor_or_expression_list=rulefor_or_expression_list 
	 { $current=$iv_rulefor_or_expression_list.current.getText(); }  
	 EOF 
;

// Rule for_or_expression_list
rulefor_or_expression_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFor_or_expression_listAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    createLeafNode(grammarAccess.getFor_or_expression_listAccess().getCOMMATerminalRuleCall_1_0_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFor_or_expression_listAccess().getFor_or_expression_list2ParserRuleCall_1_0_1(), currentNode); 
    }
    this_for_or_expression_list2_2=rulefor_or_expression_list2    {
		$current.merge(this_for_or_expression_list2_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    |(
	kw='for' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFor_or_expression_listAccess().getForKeyword_1_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFor_or_expression_listAccess().getFor_indicesParserRuleCall_1_1_1(), currentNode); 
    }
    this_for_indices_4=rulefor_indices    {
		$current.merge(this_for_indices_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
))?)
    ;





// Entry rule entryRulefor_or_expression_list2
entryRulefor_or_expression_list2 returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFor_or_expression_list2Rule(), currentNode); } 
	 iv_rulefor_or_expression_list2=rulefor_or_expression_list2 
	 { $current=$iv_rulefor_or_expression_list2.current.getText(); }  
	 EOF 
;

// Rule for_or_expression_list2
rulefor_or_expression_list2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFor_or_expression_list2Access().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    createLeafNode(grammarAccess.getFor_or_expression_list2Access().getCOMMATerminalRuleCall_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFor_or_expression_list2Access().getFor_or_expression_list2ParserRuleCall_1_1(), currentNode); 
    }
    this_for_or_expression_list2_2=rulefor_or_expression_list2    {
		$current.merge(this_for_or_expression_list2_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRulenamed_arguments
entryRulenamed_arguments returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamed_argumentsRule(), currentNode); } 
	 iv_rulenamed_arguments=rulenamed_arguments 
	 { $current=$iv_rulenamed_arguments.current.getText(); }  
	 EOF 
;

// Rule named_arguments
rulenamed_arguments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getNamed_argumentsAccess().getNamed_arguments2ParserRuleCall(), currentNode); 
    }
    this_named_arguments2_0=rulenamed_arguments2    {
		$current.merge(this_named_arguments2_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulenamed_arguments2
entryRulenamed_arguments2 returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamed_arguments2Rule(), currentNode); } 
	 iv_rulenamed_arguments2=rulenamed_arguments2 
	 { $current=$iv_rulenamed_arguments2.current.getText(); }  
	 EOF 
;

// Rule named_arguments2
rulenamed_arguments2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNamed_arguments2Access().getNamed_argumentParserRuleCall_0(), currentNode); 
    }
    this_named_argument_0=rulenamed_argument    {
		$current.merge(this_named_argument_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    createLeafNode(grammarAccess.getNamed_arguments2Access().getCOMMATerminalRuleCall_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getNamed_arguments2Access().getNamed_argumentParserRuleCall_1_1(), currentNode); 
    }
    this_named_argument_2=rulenamed_argument    {
		$current.merge(this_named_argument_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRulenamed_argument
entryRulenamed_argument returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamed_argumentRule(), currentNode); } 
	 iv_rulenamed_argument=rulenamed_argument 
	 { $current=$iv_rulenamed_argument.current.getText(); }  
	 EOF 
;

// Rule named_argument
rulenamed_argument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getNamed_argumentAccess().getIDENTTerminalRuleCall_0(), null); 
    }
    this_EQUALS_1=RULE_EQUALS    {
		$current.merge(this_EQUALS_1);
    }

    { 
    createLeafNode(grammarAccess.getNamed_argumentAccess().getEQUALSTerminalRuleCall_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getNamed_argumentAccess().getExpressionParserRuleCall_2(), currentNode); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleexpression_list
entryRuleexpression_list returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpression_listRule(), currentNode); } 
	 iv_ruleexpression_list=ruleexpression_list 
	 { $current=$iv_ruleexpression_list.current.getText(); }  
	 EOF 
;

// Rule expression_list
ruleexpression_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getExpression_listAccess().getExpression_list2ParserRuleCall(), currentNode); 
    }
    this_expression_list2_0=ruleexpression_list2    {
		$current.merge(this_expression_list2_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleexpression_list2
entryRuleexpression_list2 returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpression_list2Rule(), currentNode); } 
	 iv_ruleexpression_list2=ruleexpression_list2 
	 { $current=$iv_ruleexpression_list2.current.getText(); }  
	 EOF 
;

// Rule expression_list2
ruleexpression_list2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpression_list2Access().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    createLeafNode(grammarAccess.getExpression_list2Access().getCOMMATerminalRuleCall_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getExpression_list2Access().getExpression_list2ParserRuleCall_1_1(), currentNode); 
    }
    this_expression_list2_2=ruleexpression_list2    {
		$current.merge(this_expression_list2_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRulearray_subscripts
entryRulearray_subscripts returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArray_subscriptsRule(), currentNode); } 
	 iv_rulearray_subscripts=rulearray_subscripts 
	 { $current=$iv_rulearray_subscripts.current.getText(); }  
	 EOF 
;

// Rule array_subscripts
rulearray_subscripts returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_LBRACK_0=RULE_LBRACK    {
		$current.merge(this_LBRACK_0);
    }

    { 
    createLeafNode(grammarAccess.getArray_subscriptsAccess().getLBRACKTerminalRuleCall_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getArray_subscriptsAccess().getSubscriptParserRuleCall_1(), currentNode); 
    }
    this_subscript_1=rulesubscript    {
		$current.merge(this_subscript_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_COMMA_2=RULE_COMMA    {
		$current.merge(this_COMMA_2);
    }

    { 
    createLeafNode(grammarAccess.getArray_subscriptsAccess().getCOMMATerminalRuleCall_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getArray_subscriptsAccess().getSubscriptParserRuleCall_2_1(), currentNode); 
    }
    this_subscript_3=rulesubscript    {
		$current.merge(this_subscript_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*    this_RBRACK_4=RULE_RBRACK    {
		$current.merge(this_RBRACK_4);
    }

    { 
    createLeafNode(grammarAccess.getArray_subscriptsAccess().getRBRACKTerminalRuleCall_3(), null); 
    }
)
    ;





// Entry rule entryRulesubscript
entryRulesubscript returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSubscriptRule(), currentNode); } 
	 iv_rulesubscript=rulesubscript 
	 { $current=$iv_rulesubscript.current.getText(); }  
	 EOF 
;

// Rule subscript
rulesubscript returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSubscriptAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_COLON_1=RULE_COLON    {
		$current.merge(this_COLON_1);
    }

    { 
    createLeafNode(grammarAccess.getSubscriptAccess().getCOLONTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRulecomment
entryRulecomment returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCommentRule(), currentNode); }
	 iv_rulecomment=rulecomment 
	 { $current=$iv_rulecomment.current; } 
	 EOF 
;

// Rule comment
rulecomment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCommentAccess().getStringString_commentParserRuleCall_0_0(), currentNode); 
	    }
	    lv_string_0=rulestring_comment 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "string", lv_string_0, "string_comment", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCommentAccess().getAnnotationAnnotationParserRuleCall_1_0(), currentNode); 
	    }
	    lv_annotation_1=ruleannotation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "annotation", lv_annotation_1, "annotation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRulestring_comment
entryRulestring_comment returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getString_commentRule(), currentNode); } 
	 iv_rulestring_comment=rulestring_comment 
	 { $current=$iv_rulestring_comment.current.getText(); }  
	 EOF 
;

// Rule string_comment
rulestring_comment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getString_commentAccess().getSTRINGTerminalRuleCall_0(), null); 
    }
(    this_PLUS_1=RULE_PLUS    {
		$current.merge(this_PLUS_1);
    }

    { 
    createLeafNode(grammarAccess.getString_commentAccess().getPLUSTerminalRuleCall_1_0(), null); 
    }
    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    createLeafNode(grammarAccess.getString_commentAccess().getSTRINGTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleannotation
entryRuleannotation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationRule(), currentNode); }
	 iv_ruleannotation=ruleannotation 
	 { $current=$iv_ruleannotation.current; } 
	 EOF 
;

// Rule annotation
ruleannotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('annotation' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getAnnotationKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getClass_modificationParserRuleCall_1(), currentNode); 
    }
    this_class_modification_1=ruleclass_modification
    { 
        $current = $this_class_modification_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Rule ClassType
ruleClassType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'class' 
	{
        $current = grammarAccess.getClassTypeAccess().getCLASSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getCLASSEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'model' 
	{
        $current = grammarAccess.getClassTypeAccess().getMODELEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getMODELEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'record' 
	{
        $current = grammarAccess.getClassTypeAccess().getRECORDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getRECORDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'block' 
	{
        $current = grammarAccess.getClassTypeAccess().getBLOCKEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getBLOCKEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'connector' 
	{
        $current = grammarAccess.getClassTypeAccess().getCONNECTOREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getCONNECTOREnumLiteralDeclaration_4(), null); 
    }
)
    |(	'type' 
	{
        $current = grammarAccess.getClassTypeAccess().getTYPEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getTYPEEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'package' 
	{
        $current = grammarAccess.getClassTypeAccess().getPACKAGEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getPACKAGEEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'function' 
	{
        $current = grammarAccess.getClassTypeAccess().getFUNCTIONEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getFUNCTIONEnumLiteralDeclaration_7(), null); 
    }
));



RULE_DOT : '.';

RULE_LPAR : '(';

RULE_RPAR : ')';

RULE_LBRACK : '[';

RULE_RBRACK : ']';

RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_EQUALS : '=';

RULE_ASSIGN : ':=';

RULE_COMMA : ',';

RULE_COLON : ':';

RULE_SEMICOLON : ';';

RULE_PLUS_EW : '.+';

RULE_MINUS_EW : '.-';

RULE_STAR_EW : '.*';

RULE_SLASH_EW : './';

RULE_POWER_EW : '.^';

RULE_STAR : '*' '.'?;

RULE_MINUS : '-' '.'?;

RULE_PLUS : '+' ('.'|'&')?;

RULE_LESS : '<' '.'?;

RULE_LESSEQ : '<=' '.'?;

RULE_LESSGT : ('!=' '.'?|'<>' '.'?);

RULE_GREATER : '>' '.'?;

RULE_GREATEREQ : '>=' '.'?;

RULE_EQEQ : '==' ('.'|'&')?;

RULE_POWER : '^' '.'?;

RULE_SLASH : '/' '.'?;

RULE_UNSIGNED_REAL : (('0'..'9')+ '.' ('0'..'9')* (('E'|'e') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('E'|'e') ('+'|'-')? ('0'..'9')+);

RULE_UNSIGNED_INTEGER : ('0'..'9')+;

RULE_IDENT : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


