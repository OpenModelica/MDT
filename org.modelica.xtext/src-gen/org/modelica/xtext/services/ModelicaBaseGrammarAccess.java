/*
* generated by Xtext
*/

package org.modelica.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ModelicaBaseGrammarAccess implements IGrammarAccess {
	
	
	public class StorageUnitElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StorageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cWithinKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cName_pathParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFinalKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClassDefinitionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClassDefinitionClassDefinitionParserRuleCall_1_1_0 = (RuleCall)cClassDefinitionAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StorageUnit:
		//  ("within" name_path? SEMICOLON)? ("final"? classDefinition+=ClassDefinition ";")*; 
		//
		/// *
		// * Copyright (c) 2009 - currentYear, Adrian Pop [adrpo@ida.liu.se] 
		// * All rights reserved.
		// * /
		//
		//  
		//
		//
		/// *------------------------------------------------------------------
		// * PARSER RULES
		// *------------------------------------------------------------------* /
		public ParserRule getRule() { return rule; }

		//("within" name_path? SEMICOLON)? ("final"? classDefinition+=ClassDefinition ";")*
		public Group getGroup() { return cGroup; }

		//("within" name_path? SEMICOLON)?
		public Group getGroup_0() { return cGroup_0; }

		//"within"
		public Keyword getWithinKeyword_0_0() { return cWithinKeyword_0_0; }

		//name_path?
		public RuleCall getName_pathParserRuleCall_0_1() { return cName_pathParserRuleCall_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_2() { return cSEMICOLONTerminalRuleCall_0_2; }

		//("final"? classDefinition+=ClassDefinition ";")*
		public Group getGroup_1() { return cGroup_1; }

		//"final"?
		public Keyword getFinalKeyword_1_0() { return cFinalKeyword_1_0; }

		//classDefinition+=ClassDefinition
		public Assignment getClassDefinitionAssignment_1_1() { return cClassDefinitionAssignment_1_1; }

		//ClassDefinition
		public RuleCall getClassDefinitionClassDefinitionParserRuleCall_1_1_0() { return cClassDefinitionClassDefinitionParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class EntityDefinitionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartialDerivativeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClassModificationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClassOverloadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//EntityDefinition:
		//  ClassDefinition|PartialDerivative|ClassModification|ClassOverloading|Enumeration
		//;
		public ParserRule getRule() { return rule; }

		//ClassDefinition|PartialDerivative|ClassModification|ClassOverloading|Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall_0() { return cClassDefinitionParserRuleCall_0; }

		//PartialDerivative
		public RuleCall getPartialDerivativeParserRuleCall_1() { return cPartialDerivativeParserRuleCall_1; }

		//ClassModification
		public RuleCall getClassModificationParserRuleCall_2() { return cClassModificationParserRuleCall_2; }

		//ClassOverloading
		public RuleCall getClassOverloadingParserRuleCall_3() { return cClassOverloadingParserRuleCall_3; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_4() { return cEnumerationParserRuleCall_4; }
	}

	public class ClassDefinitionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEncapsulatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEncapsulatedEncapsulatedKeyword_0_0 = (Keyword)cEncapsulatedAssignment_0.eContents().get(0);
		private final Assignment cPartialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPartialPartialKeyword_1_0 = (Keyword)cPartialAssignment_1.eContents().get(0);
		private final Assignment cExpandableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cExpandableExpandableKeyword_2_0 = (Keyword)cExpandableAssignment_2.eContents().get(0);
		private final Assignment cClassTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassTypeClassTypeEnumRuleCall_3_0 = (RuleCall)cClassTypeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cNameAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_4_0_0_0 = (RuleCall)cNameAssignment_4_0_0.eContents().get(0);
		private final Assignment cCommentAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cCommentString_commentParserRuleCall_4_0_1_0 = (RuleCall)cCommentAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cExtendsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Assignment cModificationAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cModificationClass_modificationParserRuleCall_4_1_2_0 = (RuleCall)cModificationAssignment_4_1_2.eContents().get(0);
		private final RuleCall cString_commentParserRuleCall_4_1_3 = (RuleCall)cGroup_4_1.eContents().get(3);
		private final Assignment cElemListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElemListElementListParserRuleCall_5_0 = (RuleCall)cElemListAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cElemListAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cElemListElementList2ParserRuleCall_6_0_0 = (RuleCall)cElemListAssignment_6_0.eContents().get(0);
		private final Assignment cInitialEquationClausesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cInitialEquationClausesInitial_equation_rule_clauseParserRuleCall_6_1_0 = (RuleCall)cInitialEquationClausesAssignment_6_1.eContents().get(0);
		private final Assignment cInitialAlgorithmClausesAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cInitialAlgorithmClausesInitial_algorithm_clauseParserRuleCall_6_2_0 = (RuleCall)cInitialAlgorithmClausesAssignment_6_2.eContents().get(0);
		private final Assignment cEquationClausesAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cEquationClausesEquation_rule_clauseParserRuleCall_6_3_0 = (RuleCall)cEquationClausesAssignment_6_3.eContents().get(0);
		private final Assignment cAlgorithmClausesAssignment_6_4 = (Assignment)cAlternatives_6.eContents().get(4);
		private final RuleCall cAlgorithmClausesAlgorithm_clauseParserRuleCall_6_4_0 = (RuleCall)cAlgorithmClausesAssignment_6_4.eContents().get(0);
		private final Assignment cExtClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExtClauseExternal_clauseParserRuleCall_7_0 = (RuleCall)cExtClauseAssignment_7.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cIDENTTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ClassDefinition:
		//  encapsulated?="encapsulated"? partial?="partial"? expandable?="expandable"?
		//  classType=ClassType (name=IDENT comment=string_comment?|"extends" IDENT modification
		//  =class_modification? string_comment?) elemList+=ElementList (elemList+=ElementList2
		//  |initialEquationClauses+=initial_equation_rule_clause|initialAlgorithmClauses+=
		//  initial_algorithm_clause|equationClauses+=equation_rule_clause|algorithmClauses
		//  +=algorithm_clause)* extClause=external_clause? "end" IDENT; 
		//
		//
		//	     
		//	 
		//	  
		//            
		//    
		//		 
		//		  
		//		  
		//		  
		//		  
		//	
		//	    
		//      
		//	//| SUBTYPEOF type_specifier
		public ParserRule getRule() { return rule; }

		//encapsulated?="encapsulated"? partial?="partial"? expandable?="expandable"?
		//classType=ClassType (name=IDENT comment=string_comment?|"extends" IDENT modification
		//=class_modification? string_comment?) elemList+=ElementList (elemList+=ElementList2
		//|initialEquationClauses+=initial_equation_rule_clause|initialAlgorithmClauses+=
		//initial_algorithm_clause|equationClauses+=equation_rule_clause|algorithmClauses
		//+=algorithm_clause)* extClause=external_clause? "end" IDENT 
		//	     
		//	 
		//	  
		//            
		//    
		//		 
		//		  
		//		  
		//		  
		//		  
		//	
		//	    
		//      
		//	//| SUBTYPEOF type_specifier
		public Group getGroup() { return cGroup; }

		//encapsulated?="encapsulated"?
		public Assignment getEncapsulatedAssignment_0() { return cEncapsulatedAssignment_0; }

		//"encapsulated"
		public Keyword getEncapsulatedEncapsulatedKeyword_0_0() { return cEncapsulatedEncapsulatedKeyword_0_0; }

		//partial?="partial"?
		public Assignment getPartialAssignment_1() { return cPartialAssignment_1; }

		//"partial"
		public Keyword getPartialPartialKeyword_1_0() { return cPartialPartialKeyword_1_0; }

		//expandable?="expandable"?
		public Assignment getExpandableAssignment_2() { return cExpandableAssignment_2; }

		//"expandable"
		public Keyword getExpandableExpandableKeyword_2_0() { return cExpandableExpandableKeyword_2_0; }

		//classType=ClassType
		public Assignment getClassTypeAssignment_3() { return cClassTypeAssignment_3; }

		//ClassType
		public RuleCall getClassTypeClassTypeEnumRuleCall_3_0() { return cClassTypeClassTypeEnumRuleCall_3_0; }

		//name=IDENT comment=string_comment?|"extends" IDENT modification=class_modification?
		//string_comment?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//name=IDENT comment=string_comment?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//name=IDENT
		public Assignment getNameAssignment_4_0_0() { return cNameAssignment_4_0_0; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_4_0_0_0() { return cNameIDENTTerminalRuleCall_4_0_0_0; }

		//comment=string_comment?
		public Assignment getCommentAssignment_4_0_1() { return cCommentAssignment_4_0_1; }

		//string_comment
		public RuleCall getCommentString_commentParserRuleCall_4_0_1_0() { return cCommentString_commentParserRuleCall_4_0_1_0; }

		//"extends" IDENT modification=class_modification? string_comment?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"extends"
		public Keyword getExtendsKeyword_4_1_0() { return cExtendsKeyword_4_1_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_4_1_1() { return cIDENTTerminalRuleCall_4_1_1; }

		//modification=class_modification?
		public Assignment getModificationAssignment_4_1_2() { return cModificationAssignment_4_1_2; }

		//class_modification
		public RuleCall getModificationClass_modificationParserRuleCall_4_1_2_0() { return cModificationClass_modificationParserRuleCall_4_1_2_0; }

		//string_comment?
		public RuleCall getString_commentParserRuleCall_4_1_3() { return cString_commentParserRuleCall_4_1_3; }

		//elemList+=ElementList
		public Assignment getElemListAssignment_5() { return cElemListAssignment_5; }

		//ElementList
		public RuleCall getElemListElementListParserRuleCall_5_0() { return cElemListElementListParserRuleCall_5_0; }

		//(elemList+=ElementList2|initialEquationClauses+=initial_equation_rule_clause|
		//initialAlgorithmClauses+=initial_algorithm_clause|equationClauses+=
		//equation_rule_clause|algorithmClauses+=algorithm_clause)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//elemList+=ElementList2
		public Assignment getElemListAssignment_6_0() { return cElemListAssignment_6_0; }

		//ElementList2
		public RuleCall getElemListElementList2ParserRuleCall_6_0_0() { return cElemListElementList2ParserRuleCall_6_0_0; }

		//initialEquationClauses+=initial_equation_rule_clause
		public Assignment getInitialEquationClausesAssignment_6_1() { return cInitialEquationClausesAssignment_6_1; }

		//initial_equation_rule_clause
		public RuleCall getInitialEquationClausesInitial_equation_rule_clauseParserRuleCall_6_1_0() { return cInitialEquationClausesInitial_equation_rule_clauseParserRuleCall_6_1_0; }

		//initialAlgorithmClauses+=initial_algorithm_clause
		public Assignment getInitialAlgorithmClausesAssignment_6_2() { return cInitialAlgorithmClausesAssignment_6_2; }

		//initial_algorithm_clause
		public RuleCall getInitialAlgorithmClausesInitial_algorithm_clauseParserRuleCall_6_2_0() { return cInitialAlgorithmClausesInitial_algorithm_clauseParserRuleCall_6_2_0; }

		//equationClauses+=equation_rule_clause
		public Assignment getEquationClausesAssignment_6_3() { return cEquationClausesAssignment_6_3; }

		//equation_rule_clause
		public RuleCall getEquationClausesEquation_rule_clauseParserRuleCall_6_3_0() { return cEquationClausesEquation_rule_clauseParserRuleCall_6_3_0; }

		//algorithmClauses+=algorithm_clause
		public Assignment getAlgorithmClausesAssignment_6_4() { return cAlgorithmClausesAssignment_6_4; }

		//algorithm_clause
		public RuleCall getAlgorithmClausesAlgorithm_clauseParserRuleCall_6_4_0() { return cAlgorithmClausesAlgorithm_clauseParserRuleCall_6_4_0; }

		//extClause=external_clause?
		public Assignment getExtClauseAssignment_7() { return cExtClauseAssignment_7; }

		//external_clause
		public RuleCall getExtClauseExternal_clauseParserRuleCall_7_0() { return cExtClauseExternal_clauseParserRuleCall_7_0; }

		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }

		//IDENT   
		//	//| SUBTYPEOF type_specifier
		public RuleCall getIDENTTerminalRuleCall_9() { return cIDENTTerminalRuleCall_9; }
	}

	public class PartialDerivativeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartialDerivative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cDerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cName_pathParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cIdent_listParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCommentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCommentCommentParserRuleCall_9_0 = (RuleCall)cCommentAssignment_9.eContents().get(0);
		
		//PartialDerivative:
		//  "function" name=IDENT EQUALS "der" "(" name_path "," ident_list ")" comment=comment;
		public ParserRule getRule() { return rule; }

		//"function" name=IDENT EQUALS "der" "(" name_path "," ident_list ")" comment=comment
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//"der"
		public Keyword getDerKeyword_3() { return cDerKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//name_path
		public RuleCall getName_pathParserRuleCall_5() { return cName_pathParserRuleCall_5; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//ident_list
		public RuleCall getIdent_listParserRuleCall_7() { return cIdent_listParserRuleCall_7; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//comment=comment
		public Assignment getCommentAssignment_9() { return cCommentAssignment_9; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_9_0() { return cCommentCommentParserRuleCall_9_0; }
	}

	public class ClassModificationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassTypeClassTypeEnumRuleCall_0_0 = (RuleCall)cClassTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cType_prefixParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTypeSpecifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_4_0 = (RuleCall)cTypeSpecifierAssignment_4.eContents().get(0);
		private final Assignment cModificationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModificationClass_modificationParserRuleCall_5_0 = (RuleCall)cModificationAssignment_5.eContents().get(0);
		private final Assignment cCommentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommentCommentParserRuleCall_6_0 = (RuleCall)cCommentAssignment_6.eContents().get(0);
		
		//ClassModification:
		//  classType=ClassType name=IDENT EQUALS type_prefix typeSpecifier=type_specifier
		//  modification=class_modification? comment=comment;
		public ParserRule getRule() { return rule; }

		//classType=ClassType name=IDENT EQUALS type_prefix typeSpecifier=type_specifier
		//modification=class_modification? comment=comment
		public Group getGroup() { return cGroup; }

		//classType=ClassType
		public Assignment getClassTypeAssignment_0() { return cClassTypeAssignment_0; }

		//ClassType
		public RuleCall getClassTypeClassTypeEnumRuleCall_0_0() { return cClassTypeClassTypeEnumRuleCall_0_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//type_prefix
		public RuleCall getType_prefixParserRuleCall_3() { return cType_prefixParserRuleCall_3; }

		//typeSpecifier=type_specifier
		public Assignment getTypeSpecifierAssignment_4() { return cTypeSpecifierAssignment_4; }

		//type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_4_0() { return cTypeSpecifierType_specifierParserRuleCall_4_0; }

		//modification=class_modification?
		public Assignment getModificationAssignment_5() { return cModificationAssignment_5; }

		//class_modification
		public RuleCall getModificationClass_modificationParserRuleCall_5_0() { return cModificationClass_modificationParserRuleCall_5_0; }

		//comment=comment
		public Assignment getCommentAssignment_6() { return cCommentAssignment_6; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_6_0() { return cCommentCommentParserRuleCall_6_0; }
	}

	public class ClassOverloadingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOverloading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassTypeClassTypeEnumRuleCall_0_0 = (RuleCall)cClassTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cOverloadKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cName_listParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCommentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommentCommentParserRuleCall_7_0 = (RuleCall)cCommentAssignment_7.eContents().get(0);
		
		//ClassOverloading:
		//  classType=ClassType name=IDENT EQUALS "overload" "(" name_list ")" comment=comment;
		public ParserRule getRule() { return rule; }

		//classType=ClassType name=IDENT EQUALS "overload" "(" name_list ")" comment=comment
		public Group getGroup() { return cGroup; }

		//classType=ClassType
		public Assignment getClassTypeAssignment_0() { return cClassTypeAssignment_0; }

		//ClassType
		public RuleCall getClassTypeClassTypeEnumRuleCall_0_0() { return cClassTypeClassTypeEnumRuleCall_0_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//"overload"
		public Keyword getOverloadKeyword_3() { return cOverloadKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//name_list
		public RuleCall getName_listParserRuleCall_5() { return cName_listParserRuleCall_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//comment=comment
		public Assignment getCommentAssignment_7() { return cCommentAssignment_7; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_7_0() { return cCommentCommentParserRuleCall_7_0; }
	}

	public class EnumerationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassTypeClassTypeEnumRuleCall_0_0 = (RuleCall)cClassTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cEnumerationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLPARTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cIdentAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_5_0_0_0 = (RuleCall)cIdentAssignment_5_0_0.eContents().get(0);
		private final Assignment cEnumCommentsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cEnumCommentsCommentParserRuleCall_5_0_1_0 = (RuleCall)cEnumCommentsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_5_0_2_0 = (RuleCall)cGroup_5_0_2.eContents().get(0);
		private final Assignment cIdentAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_5_0_2_1_0 = (RuleCall)cIdentAssignment_5_0_2_1.eContents().get(0);
		private final Assignment cEnumCommentsAssignment_5_0_2_2 = (Assignment)cGroup_5_0_2.eContents().get(2);
		private final RuleCall cEnumCommentsCommentParserRuleCall_5_0_2_2_0 = (RuleCall)cEnumCommentsAssignment_5_0_2_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final RuleCall cRPARTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cCommentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommentCommentParserRuleCall_7_0 = (RuleCall)cCommentAssignment_7.eContents().get(0);
		
		//Enumeration:
		//  classType=ClassType name=IDENT EQUALS "enumeration" LPAR (ident+=IDENT enumComments+=
		//  comment (COMMA ident+=IDENT enumComments+=comment)*|COLON) RPAR comment=comment;
		public ParserRule getRule() { return rule; }

		//classType=ClassType name=IDENT EQUALS "enumeration" LPAR (ident+=IDENT enumComments+=
		//comment (COMMA ident+=IDENT enumComments+=comment)*|COLON) RPAR comment=comment
		public Group getGroup() { return cGroup; }

		//classType=ClassType
		public Assignment getClassTypeAssignment_0() { return cClassTypeAssignment_0; }

		//ClassType
		public RuleCall getClassTypeClassTypeEnumRuleCall_0_0() { return cClassTypeClassTypeEnumRuleCall_0_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//"enumeration"
		public Keyword getEnumerationKeyword_3() { return cEnumerationKeyword_3; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_4() { return cLPARTerminalRuleCall_4; }

		//ident+=IDENT enumComments+=comment (COMMA ident+=IDENT enumComments+=comment)*|COLON
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//ident+=IDENT enumComments+=comment (COMMA ident+=IDENT enumComments+=comment)*
		public Group getGroup_5_0() { return cGroup_5_0; }

		//ident+=IDENT
		public Assignment getIdentAssignment_5_0_0() { return cIdentAssignment_5_0_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_5_0_0_0() { return cIdentIDENTTerminalRuleCall_5_0_0_0; }

		//enumComments+=comment
		public Assignment getEnumCommentsAssignment_5_0_1() { return cEnumCommentsAssignment_5_0_1; }

		//comment
		public RuleCall getEnumCommentsCommentParserRuleCall_5_0_1_0() { return cEnumCommentsCommentParserRuleCall_5_0_1_0; }

		//(COMMA ident+=IDENT enumComments+=comment)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_5_0_2_0() { return cCOMMATerminalRuleCall_5_0_2_0; }

		//ident+=IDENT
		public Assignment getIdentAssignment_5_0_2_1() { return cIdentAssignment_5_0_2_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_5_0_2_1_0() { return cIdentIDENTTerminalRuleCall_5_0_2_1_0; }

		//enumComments+=comment
		public Assignment getEnumCommentsAssignment_5_0_2_2() { return cEnumCommentsAssignment_5_0_2_2; }

		//comment
		public RuleCall getEnumCommentsCommentParserRuleCall_5_0_2_2_0() { return cEnumCommentsCommentParserRuleCall_5_0_2_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_5_1() { return cCOLONTerminalRuleCall_5_1; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_6() { return cRPARTerminalRuleCall_6; }

		//comment=comment
		public Assignment getCommentAssignment_7() { return cCommentAssignment_7; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_7_0() { return cCommentCommentParserRuleCall_7_0; }
	}

	public class Ident_listElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ident_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ident_list returns ecore::EString:
		//  IDENT (COMMA IDENT)*;
		public ParserRule getRule() { return rule; }

		//IDENT (COMMA IDENT)*
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//(COMMA IDENT)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_1() { return cIDENTTerminalRuleCall_1_1; }
	}

	public class Name_listElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "name_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cName_pathParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cName_pathParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//name_list returns ecore::EString:
		//  name_path ("," name_path)*;
		public ParserRule getRule() { return rule; }

		//name_path ("," name_path)*
		public Group getGroup() { return cGroup; }

		//name_path
		public RuleCall getName_pathParserRuleCall_0() { return cName_pathParserRuleCall_0; }

		//("," name_path)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name_path
		public RuleCall getName_pathParserRuleCall_1_1() { return cName_pathParserRuleCall_1_1; }
	}

	public class External_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "external_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLanguageSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLanguageSpecificationSTRINGTerminalRuleCall_1_0 = (RuleCall)cLanguageSpecificationAssignment_1.eContents().get(0);
		private final RuleCall cExternal_function_callParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cExtAnnotationAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cExtAnnotationAnnotationParserRuleCall_5_0_0 = (RuleCall)cExtAnnotationAssignment_5_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//external_clause returns ExternalClause:
		//  "external" languageSpecification=STRING? external_function_call? annotation=
		//  annotation? SEMICOLON (extAnnotation=annotation SEMICOLON)?;
		public ParserRule getRule() { return rule; }

		//"external" languageSpecification=STRING? external_function_call? annotation=
		//annotation? SEMICOLON (extAnnotation=annotation SEMICOLON)?
		public Group getGroup() { return cGroup; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//languageSpecification=STRING?
		public Assignment getLanguageSpecificationAssignment_1() { return cLanguageSpecificationAssignment_1; }

		//STRING
		public RuleCall getLanguageSpecificationSTRINGTerminalRuleCall_1_0() { return cLanguageSpecificationSTRINGTerminalRuleCall_1_0; }

		//external_function_call?
		public RuleCall getExternal_function_callParserRuleCall_2() { return cExternal_function_callParserRuleCall_2; }

		//annotation=annotation?
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }

		//annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }

		//(extAnnotation=annotation SEMICOLON)?
		public Group getGroup_5() { return cGroup_5; }

		//extAnnotation=annotation
		public Assignment getExtAnnotationAssignment_5_0() { return cExtAnnotationAssignment_5_0; }

		//annotation
		public RuleCall getExtAnnotationAnnotationParserRuleCall_5_0_0() { return cExtAnnotationAnnotationParserRuleCall_5_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5_1() { return cSEMICOLONTerminalRuleCall_5_1; }
	}

	public class External_function_callElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "external_function_call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cComponent_referenceParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cExpression_listParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cRPARTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//external_function_call returns ecore::EString:
		//  (component_reference EQUALS)? IDENT LPAR expression_list? RPAR;
		public ParserRule getRule() { return rule; }

		//(component_reference EQUALS)? IDENT LPAR expression_list? RPAR
		public Group getGroup() { return cGroup; }

		//(component_reference EQUALS)?
		public Group getGroup_0() { return cGroup_0; }

		//component_reference
		public RuleCall getComponent_referenceParserRuleCall_0_0() { return cComponent_referenceParserRuleCall_0_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_1() { return cEQUALSTerminalRuleCall_0_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1() { return cIDENTTerminalRuleCall_1; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }

		//expression_list?
		public RuleCall getExpression_listParserRuleCall_3() { return cExpression_listParserRuleCall_3; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_4() { return cRPARTerminalRuleCall_4; }
	}

	public class ElementListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cElementsClassElementParserRuleCall_0_0_0 = (RuleCall)cElementsAssignment_0_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ElementList:
		//  ((elements+=ClassElement|annotations+=annotation) SEMICOLON)*;
		public ParserRule getRule() { return rule; }

		//((elements+=ClassElement|annotations+=annotation) SEMICOLON)*
		public Group getGroup() { return cGroup; }

		//elements+=ClassElement|annotations+=annotation
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//elements+=ClassElement
		public Assignment getElementsAssignment_0_0() { return cElementsAssignment_0_0; }

		//ClassElement
		public RuleCall getElementsClassElementParserRuleCall_0_0_0() { return cElementsClassElementParserRuleCall_0_0_0; }

		//annotations+=annotation
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }

		//annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1() { return cSEMICOLONTerminalRuleCall_1; }
	}

	public class ElementList2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementList2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPublicKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cPublicElementListAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_2_0 = (Alternatives)cGroup_0_2.eContents().get(0);
		private final Assignment cElementsAssignment_0_2_0_0 = (Assignment)cAlternatives_0_2_0.eContents().get(0);
		private final RuleCall cElementsClassElementParserRuleCall_0_2_0_0_0 = (RuleCall)cElementsAssignment_0_2_0_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_2_0_1 = (Assignment)cAlternatives_0_2_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_2_0_1_0 = (RuleCall)cAnnotationsAssignment_0_2_0_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cProtectesElementListAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_2_0_0 = (Assignment)cAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cElementsClassElementParserRuleCall_1_2_0_0_0 = (RuleCall)cElementsAssignment_1_2_0_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_2_0_1 = (Assignment)cAlternatives_1_2_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_2_0_1_0 = (RuleCall)cAnnotationsAssignment_1_2_0_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		
		//ElementList2 returns ElementList:
		//  "public" {PublicElementList} ((elements+=ClassElement|annotations+=annotation)
		//  SEMICOLON)*|"protected" {ProtectesElementList} ((elements+=ClassElement|
		//  annotations+=annotation) SEMICOLON)*;
		public ParserRule getRule() { return rule; }

		//"public" {PublicElementList} ((elements+=ClassElement|annotations+=annotation)
		//SEMICOLON)*|"protected" {ProtectesElementList} ((elements+=ClassElement|
		//annotations+=annotation) SEMICOLON)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public" {PublicElementList} ((elements+=ClassElement|annotations+=annotation)
		//SEMICOLON)*
		public Group getGroup_0() { return cGroup_0; }

		//"public"
		public Keyword getPublicKeyword_0_0() { return cPublicKeyword_0_0; }

		//{PublicElementList}
		public Action getPublicElementListAction_0_1() { return cPublicElementListAction_0_1; }

		//((elements+=ClassElement|annotations+=annotation) SEMICOLON)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//elements+=ClassElement|annotations+=annotation
		public Alternatives getAlternatives_0_2_0() { return cAlternatives_0_2_0; }

		//elements+=ClassElement
		public Assignment getElementsAssignment_0_2_0_0() { return cElementsAssignment_0_2_0_0; }

		//ClassElement
		public RuleCall getElementsClassElementParserRuleCall_0_2_0_0_0() { return cElementsClassElementParserRuleCall_0_2_0_0_0; }

		//annotations+=annotation
		public Assignment getAnnotationsAssignment_0_2_0_1() { return cAnnotationsAssignment_0_2_0_1; }

		//annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_2_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_2_0_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_2_1() { return cSEMICOLONTerminalRuleCall_0_2_1; }

		//"protected" {ProtectesElementList} ((elements+=ClassElement|annotations+=
		//annotation) SEMICOLON)*
		public Group getGroup_1() { return cGroup_1; }

		//"protected"
		public Keyword getProtectedKeyword_1_0() { return cProtectedKeyword_1_0; }

		//{ProtectesElementList}
		public Action getProtectesElementListAction_1_1() { return cProtectesElementListAction_1_1; }

		//((elements+=ClassElement|annotations+=annotation) SEMICOLON)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//elements+=ClassElement|annotations+=annotation
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }

		//elements+=ClassElement
		public Assignment getElementsAssignment_1_2_0_0() { return cElementsAssignment_1_2_0_0; }

		//ClassElement
		public RuleCall getElementsClassElementParserRuleCall_1_2_0_0_0() { return cElementsClassElementParserRuleCall_1_2_0_0_0; }

		//annotations+=annotation
		public Assignment getAnnotationsAssignment_1_2_0_1() { return cAnnotationsAssignment_1_2_0_1; }

		//annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_2_0_1_0() { return cAnnotationsAnnotationParserRuleCall_1_2_0_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_2_1() { return cSEMICOLONTerminalRuleCall_1_2_1; }
	}

	public class ClassElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImport_clauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtends_clauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cRedeclareKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFinalKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cInnerKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cOuterKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_2_4 = (Alternatives)cGroup_2.eContents().get(4);
		private final Alternatives cAlternatives_2_4_0 = (Alternatives)cAlternatives_2_4.eContents().get(0);
		private final RuleCall cClassDefinitionParserRuleCall_2_4_0_0 = (RuleCall)cAlternatives_2_4_0.eContents().get(0);
		private final RuleCall cComponent_clauseParserRuleCall_2_4_0_1 = (RuleCall)cAlternatives_2_4_0.eContents().get(1);
		private final RuleCall cReplaceableElementClauseParserRuleCall_2_4_1 = (RuleCall)cAlternatives_2_4.eContents().get(1);
		
		//ClassElement:
		//  import_clause|extends_clause|"redeclare"? "final"? "inner"? "outer"? ((
		//  ClassDefinition|component_clause)|ReplaceableElementClause); 
		//
		//
		//
		//	  
		//	  
		//	//| defineunit_clause
		public ParserRule getRule() { return rule; }

		//import_clause|extends_clause|"redeclare"? "final"? "inner"? "outer"? ((
		//ClassDefinition|component_clause)|ReplaceableElementClause) 
		//
		//
		//
		//	  
		//	  
		//	//| defineunit_clause
		public Alternatives getAlternatives() { return cAlternatives; }

		//import_clause
		public RuleCall getImport_clauseParserRuleCall_0() { return cImport_clauseParserRuleCall_0; }

		//extends_clause   
		//	//| defineunit_clause
		public RuleCall getExtends_clauseParserRuleCall_1() { return cExtends_clauseParserRuleCall_1; }

		//"redeclare"? "final"? "inner"? "outer"? ((ClassDefinition|component_clause)|
		//ReplaceableElementClause) 
		//	  
		//	  
		//	//| defineunit_clause
		public Group getGroup_2() { return cGroup_2; }

		//"redeclare"?
		public Keyword getRedeclareKeyword_2_0() { return cRedeclareKeyword_2_0; }

		//"final"?
		public Keyword getFinalKeyword_2_1() { return cFinalKeyword_2_1; }

		//"inner"?
		public Keyword getInnerKeyword_2_2() { return cInnerKeyword_2_2; }

		//"outer"?
		public Keyword getOuterKeyword_2_3() { return cOuterKeyword_2_3; }

		//(ClassDefinition|component_clause)|ReplaceableElementClause
		public Alternatives getAlternatives_2_4() { return cAlternatives_2_4; }

		//ClassDefinition|component_clause
		public Alternatives getAlternatives_2_4_0() { return cAlternatives_2_4_0; }

		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall_2_4_0_0() { return cClassDefinitionParserRuleCall_2_4_0_0; }

		//component_clause
		public RuleCall getComponent_clauseParserRuleCall_2_4_0_1() { return cComponent_clauseParserRuleCall_2_4_0_1; }

		//ReplaceableElementClause
		public RuleCall getReplaceableElementClauseParserRuleCall_2_4_1() { return cReplaceableElementClauseParserRuleCall_2_4_1; }
	}

	public class ReplaceableElementClauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceableElementClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cEntityAlternatives_1_0 = (Alternatives)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityClassDefinitionParserRuleCall_1_0_0 = (RuleCall)cEntityAlternatives_1_0.eContents().get(0);
		private final RuleCall cEntityComponent_clauseParserRuleCall_1_0_1 = (RuleCall)cEntityAlternatives_1_0.eContents().get(1);
		private final Assignment cConstrainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstrainConstraining_clauseParserRuleCall_2_0 = (RuleCall)cConstrainAssignment_2.eContents().get(0);
		
		//ReplaceableElementClause:
		//  "replaceable" entity=( ClassDefinition | component_clause ) constrain=
		//  constraining_clause?;
		public ParserRule getRule() { return rule; }

		//"replaceable" entity=( ClassDefinition | component_clause ) constrain=
		//constraining_clause?
		public Group getGroup() { return cGroup; }

		//"replaceable"
		public Keyword getReplaceableKeyword_0() { return cReplaceableKeyword_0; }

		//entity=( ClassDefinition | component_clause )
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }

		//ClassDefinition|component_clause
		public Alternatives getEntityAlternatives_1_0() { return cEntityAlternatives_1_0; }

		//ClassDefinition
		public RuleCall getEntityClassDefinitionParserRuleCall_1_0_0() { return cEntityClassDefinitionParserRuleCall_1_0_0; }

		//component_clause
		public RuleCall getEntityComponent_clauseParserRuleCall_1_0_1() { return cEntityComponent_clauseParserRuleCall_1_0_1; }

		//constrain=constraining_clause?
		public Assignment getConstrainAssignment_2() { return cConstrainAssignment_2; }

		//constraining_clause
		public RuleCall getConstrainConstraining_clauseParserRuleCall_2_0() { return cConstrainConstraining_clauseParserRuleCall_2_0; }
	}

	public class Import_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "import_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAsNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAsNameIDENTTerminalRuleCall_1_0_0_0 = (RuleCall)cAsNameAssignment_1_0_0.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameName_pathParserRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameName_path_starParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCommentParserRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//import_clause returns ImportClause:
		//  "import" (asName=IDENT EQUALS name=name_path|name=name_path_star) comment=comment; 
		//
		//    
		//	            
		//	
		//
		/// *
		//defineunit_clause :
		//	DEFINEUNIT IDENT (LPAR named_arguments RPAR)?		
		//	;
		// * /
		//
		//
		/// *
		// * 2.2.3 Extends
		// * /
		//
		//// Note that this is a minor modification of the standard by
		//// allowing the comment.
		public ParserRule getRule() { return rule; }

		//"import" (asName=IDENT EQUALS name=name_path|name=name_path_star) comment=comment
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//asName=IDENT EQUALS name=name_path|name=name_path_star
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//asName=IDENT EQUALS name=name_path
		public Group getGroup_1_0() { return cGroup_1_0; }

		//asName=IDENT
		public Assignment getAsNameAssignment_1_0_0() { return cAsNameAssignment_1_0_0; }

		//IDENT
		public RuleCall getAsNameIDENTTerminalRuleCall_1_0_0_0() { return cAsNameIDENTTerminalRuleCall_1_0_0_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0_1() { return cEQUALSTerminalRuleCall_1_0_1; }

		//name=name_path
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//name_path
		public RuleCall getNameName_pathParserRuleCall_1_0_2_0() { return cNameName_pathParserRuleCall_1_0_2_0; }

		//name=name_path_star
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//name_path_star
		public RuleCall getNameName_path_starParserRuleCall_1_1_0() { return cNameName_path_starParserRuleCall_1_1_0; }

		//comment=comment
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_2_0() { return cCommentCommentParserRuleCall_2_0; }
	}

	public class Extends_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "extends_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseClassName_pathParserRuleCall_1_0 = (RuleCall)cBaseClassAssignment_1.eContents().get(0);
		private final Assignment cModificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModificationClass_modificationParserRuleCall_2_0 = (RuleCall)cModificationAssignment_2.eContents().get(0);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		
		//extends_clause returns ExtendsClause:
		//  "extends" baseClass=name_path modification=class_modification? annotation=
		//  annotation?; 
		//
		/// *
		//defineunit_clause :
		//	DEFINEUNIT IDENT (LPAR named_arguments RPAR)?		
		//	;
		// * /
		//
		//
		/// *
		// * 2.2.3 Extends
		// * /
		//
		//// Note that this is a minor modification of the standard by
		//// allowing the comment.
		public ParserRule getRule() { return rule; }

		//"extends" baseClass=name_path modification=class_modification? annotation=
		//annotation?
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//baseClass=name_path
		public Assignment getBaseClassAssignment_1() { return cBaseClassAssignment_1; }

		//name_path
		public RuleCall getBaseClassName_pathParserRuleCall_1_0() { return cBaseClassName_pathParserRuleCall_1_0; }

		//modification=class_modification?
		public Assignment getModificationAssignment_2() { return cModificationAssignment_2; }

		//class_modification
		public RuleCall getModificationClass_modificationParserRuleCall_2_0() { return cModificationClass_modificationParserRuleCall_2_0; }

		//annotation=annotation?
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }

		//annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }
	}

	public class Constraining_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constraining_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cExtendsKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNameName_pathParserRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final Assignment cModificationAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cModificationClass_modificationParserRuleCall_0_0_2_0 = (RuleCall)cModificationAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cConstrainedbyKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameName_pathParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cModificationAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cModificationClass_modificationParserRuleCall_0_1_2_0 = (RuleCall)cModificationAssignment_0_1_2.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentCommentParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		
		//constraining_clause returns ConstrainingClause:
		//  ("extends" name=name_path modification=class_modification?|"constrainedby" name=
		//  name_path modification=class_modification?) comment=comment; 
		//
		//    
		//	      
		//	        
		//	  
		//	
		//
		/// *
		// * 2.2.4 Component clause
		// * /
		public ParserRule getRule() { return rule; }

		//("extends" name=name_path modification=class_modification?|"constrainedby" name=
		//name_path modification=class_modification?) comment=comment
		public Group getGroup() { return cGroup; }

		//"extends" name=name_path modification=class_modification?|"constrainedby" name=
		//name_path modification=class_modification?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"extends" name=name_path modification=class_modification?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"extends"
		public Keyword getExtendsKeyword_0_0_0() { return cExtendsKeyword_0_0_0; }

		//name=name_path
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//name_path
		public RuleCall getNameName_pathParserRuleCall_0_0_1_0() { return cNameName_pathParserRuleCall_0_0_1_0; }

		//modification=class_modification?
		public Assignment getModificationAssignment_0_0_2() { return cModificationAssignment_0_0_2; }

		//class_modification
		public RuleCall getModificationClass_modificationParserRuleCall_0_0_2_0() { return cModificationClass_modificationParserRuleCall_0_0_2_0; }

		//"constrainedby" name=name_path modification=class_modification?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"constrainedby"
		public Keyword getConstrainedbyKeyword_0_1_0() { return cConstrainedbyKeyword_0_1_0; }

		//name=name_path
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//name_path
		public RuleCall getNameName_pathParserRuleCall_0_1_1_0() { return cNameName_pathParserRuleCall_0_1_1_0; }

		//modification=class_modification?
		public Assignment getModificationAssignment_0_1_2() { return cModificationAssignment_0_1_2; }

		//class_modification
		public RuleCall getModificationClass_modificationParserRuleCall_0_1_2_0() { return cModificationClass_modificationParserRuleCall_0_1_2_0; }

		//comment=comment
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_1_0() { return cCommentCommentParserRuleCall_1_0; }
	}

	public class Component_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "component_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrefixType_prefixParserRuleCall_0_0 = (RuleCall)cTypePrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeSpecifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_1_0 = (RuleCall)cTypeSpecifierAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsComponent_declarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclarationsComponent_declarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		
		//component_clause returns ComponentClause:
		//  typePrefix=type_prefix typeSpecifier=type_specifier declarations+=
		//  component_declaration (COMMA declarations+=component_declaration)*; 
		//
		/// *
		// * 2.2.4 Component clause
		// * /
		public ParserRule getRule() { return rule; }

		//typePrefix=type_prefix typeSpecifier=type_specifier declarations+=
		//component_declaration (COMMA declarations+=component_declaration)*
		public Group getGroup() { return cGroup; }

		//typePrefix=type_prefix
		public Assignment getTypePrefixAssignment_0() { return cTypePrefixAssignment_0; }

		//type_prefix
		public RuleCall getTypePrefixType_prefixParserRuleCall_0_0() { return cTypePrefixType_prefixParserRuleCall_0_0; }

		//typeSpecifier=type_specifier
		public Assignment getTypeSpecifierAssignment_1() { return cTypeSpecifierAssignment_1; }

		//type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_1_0() { return cTypeSpecifierType_specifierParserRuleCall_1_0; }

		//declarations+=component_declaration
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//component_declaration
		public RuleCall getDeclarationsComponent_declarationParserRuleCall_2_0() { return cDeclarationsComponent_declarationParserRuleCall_2_0; }

		//(COMMA declarations+=component_declaration)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//declarations+=component_declaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }

		//component_declaration
		public RuleCall getDeclarationsComponent_declarationParserRuleCall_3_1_0() { return cDeclarationsComponent_declarationParserRuleCall_3_1_0; }
	}

	public class Type_prefixElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFlowKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStreamKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDiscreteKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cParameterKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cConstantKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cInputKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cOutputKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//type_prefix returns ecore::EString:
		//  ("flow"|"stream")? ("discrete"|"parameter"|"constant")? ("input"|"output")?;
		public ParserRule getRule() { return rule; }

		//("flow"|"stream")? ("discrete"|"parameter"|"constant")? ("input"|"output")?
		public Group getGroup() { return cGroup; }

		//("flow"|"stream")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"flow"
		public Keyword getFlowKeyword_0_0() { return cFlowKeyword_0_0; }

		//"stream"
		public Keyword getStreamKeyword_0_1() { return cStreamKeyword_0_1; }

		//("discrete"|"parameter"|"constant")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"discrete"
		public Keyword getDiscreteKeyword_1_0() { return cDiscreteKeyword_1_0; }

		//"parameter"
		public Keyword getParameterKeyword_1_1() { return cParameterKeyword_1_1; }

		//"constant"
		public Keyword getConstantKeyword_1_2() { return cConstantKeyword_1_2; }

		//("input"|"output")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"input"
		public Keyword getInputKeyword_2_0() { return cInputKeyword_2_0; }

		//"output"
		public Keyword getOutputKeyword_2_1() { return cOutputKeyword_2_1; }
	}

	public class Type_specifierElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_specifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameName_pathParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cSubscriptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubscriptsArray_subscriptsParserRuleCall_1_0 = (RuleCall)cSubscriptsAssignment_1.eContents().get(0);
		
		//type_specifier returns TypeSpecifier:
		//  name=name_path subscripts=array_subscripts?; 
		//
		//    
		//	
		//	// TODO MML expr?
		//	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
		public ParserRule getRule() { return rule; }

		//name=name_path subscripts=array_subscripts? 
		//	
		//	// TODO MML expr?
		//	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
		public Group getGroup() { return cGroup; }

		//name=name_path 
		//	
		//	// TODO MML expr?
		//	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//name_path 
		//	// TODO MML expr?
		//	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
		public RuleCall getNameName_pathParserRuleCall_0_0() { return cNameName_pathParserRuleCall_0_0; }

		//subscripts=array_subscripts?
		public Assignment getSubscriptsAssignment_1() { return cSubscriptsAssignment_1; }

		//array_subscripts
		public RuleCall getSubscriptsArray_subscriptsParserRuleCall_1_0() { return cSubscriptsArray_subscriptsParserRuleCall_1_0; }
	}

	public class Component_declarationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "component_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cSubscriptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubscriptsArray_subscriptsParserRuleCall_1_0 = (RuleCall)cSubscriptsAssignment_1.eContents().get(0);
		private final Assignment cModificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModificationModificationParserRuleCall_2_0 = (RuleCall)cModificationAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentCommentParserRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//component_declaration returns ComponentDeclaration:
		//  IDENT subscripts=array_subscripts? modification=modification? ("if" condition=
		//  expression)? comment=comment; 
		//
		//    
		//	          
		//	
		//
		/// *
		// * 2.2.5 Modification
		// * /
		public ParserRule getRule() { return rule; }

		//IDENT subscripts=array_subscripts? modification=modification? ("if" condition=
		//expression)? comment=comment
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//subscripts=array_subscripts?
		public Assignment getSubscriptsAssignment_1() { return cSubscriptsAssignment_1; }

		//array_subscripts
		public RuleCall getSubscriptsArray_subscriptsParserRuleCall_1_0() { return cSubscriptsArray_subscriptsParserRuleCall_1_0; }

		//modification=modification?
		public Assignment getModificationAssignment_2() { return cModificationAssignment_2; }

		//modification
		public RuleCall getModificationModificationParserRuleCall_2_0() { return cModificationModificationParserRuleCall_2_0; }

		//("if" condition=expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"if"
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//condition=expression
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_3_1_0() { return cConditionExpressionParserRuleCall_3_1_0; }

		//comment=comment
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_4_0() { return cCommentCommentParserRuleCall_4_0; }
	}

	public class ModificationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClass_modificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleModificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//modification returns Modification:
		//  class_modification|SimpleModification; 
		//
		/// *
		// * 2.2.5 Modification
		// * /
		public ParserRule getRule() { return rule; }

		//class_modification|SimpleModification 
		//
		/// *
		// * 2.2.5 Modification
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//class_modification
		public RuleCall getClass_modificationParserRuleCall_0() { return cClass_modificationParserRuleCall_0; }

		//SimpleModification
		public RuleCall getSimpleModificationParserRuleCall_1() { return cSimpleModificationParserRuleCall_1; }
	}

	public class SimpleModificationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleModification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cASSIGNTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//SimpleModification:
		//  EQUALS expression=expression|ASSIGN expression=expression;
		public ParserRule getRule() { return rule; }

		//EQUALS expression=expression|ASSIGN expression=expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUALS expression=expression
		public Group getGroup_0() { return cGroup_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0_0() { return cEQUALSTerminalRuleCall_0_0; }

		//expression=expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }

		//ASSIGN expression=expression
		public Group getGroup_1() { return cGroup_1; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_1_0() { return cASSIGNTerminalRuleCall_1_0; }

		//expression=expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class Class_modificationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "class_modification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_0_0 = (RuleCall)cArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cEQUALSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//class_modification returns ClassModification:
		//  LPAR (arguments+=argument (COMMA arguments+=argument)*)? RPAR (EQUALS expression=
		//  expression)?;
		public ParserRule getRule() { return rule; }

		//LPAR (arguments+=argument (COMMA arguments+=argument)*)? RPAR (EQUALS expression=
		//expression)?
		public Group getGroup() { return cGroup; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_0() { return cLPARTerminalRuleCall_0; }

		//(arguments+=argument (COMMA arguments+=argument)*)?
		public Group getGroup_1() { return cGroup_1; }

		//arguments+=argument
		public Assignment getArgumentsAssignment_1_0() { return cArgumentsAssignment_1_0; }

		//argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_0_0() { return cArgumentsArgumentParserRuleCall_1_0_0; }

		//(COMMA arguments+=argument)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_1_0() { return cCOMMATerminalRuleCall_1_1_0; }

		//arguments+=argument
		public Assignment getArgumentsAssignment_1_1_1() { return cArgumentsAssignment_1_1_1; }

		//argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_1_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_2() { return cRPARTerminalRuleCall_2; }

		//(EQUALS expression=expression)?
		public Group getGroup_3() { return cGroup_3; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_3_0() { return cEQUALSTerminalRuleCall_3_0; }

		//expression=expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}

	public class ArgumentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEachKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cFinalKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cElementModificationParserRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cElementReplaceableClauseParserRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cElementRedeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//argument:
		//  "each"? "final"? (ElementModification|ElementReplaceableClause)|
		//  ElementRedeclaration;
		public ParserRule getRule() { return rule; }

		//"each"? "final"? (ElementModification|ElementReplaceableClause)|
		//ElementRedeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//"each"? "final"? (ElementModification|ElementReplaceableClause)
		public Group getGroup_0() { return cGroup_0; }

		//"each"?
		public Keyword getEachKeyword_0_0() { return cEachKeyword_0_0; }

		//"final"?
		public Keyword getFinalKeyword_0_1() { return cFinalKeyword_0_1; }

		//ElementModification|ElementReplaceableClause
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//ElementModification
		public RuleCall getElementModificationParserRuleCall_0_2_0() { return cElementModificationParserRuleCall_0_2_0; }

		//ElementReplaceableClause
		public RuleCall getElementReplaceableClauseParserRuleCall_0_2_1() { return cElementReplaceableClauseParserRuleCall_0_2_1; }

		//ElementRedeclaration
		public RuleCall getElementRedeclarationParserRuleCall_1() { return cElementRedeclarationParserRuleCall_1; }
	}

	public class ElementModificationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponetRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponetRefComponent_referenceParserRuleCall_0_0 = (RuleCall)cComponetRefAssignment_0.eContents().get(0);
		private final Assignment cModificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModificationModificationParserRuleCall_1_0 = (RuleCall)cModificationAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentString_commentParserRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//ElementModification:
		//  componetRef=component_reference modification=modification? comment=string_comment?
		//;
		public ParserRule getRule() { return rule; }

		//componetRef=component_reference modification=modification? comment=string_comment?
		public Group getGroup() { return cGroup; }

		//componetRef=component_reference
		public Assignment getComponetRefAssignment_0() { return cComponetRefAssignment_0; }

		//component_reference
		public RuleCall getComponetRefComponent_referenceParserRuleCall_0_0() { return cComponetRefComponent_referenceParserRuleCall_0_0; }

		//modification=modification?
		public Assignment getModificationAssignment_1() { return cModificationAssignment_1; }

		//modification
		public RuleCall getModificationModificationParserRuleCall_1_0() { return cModificationModificationParserRuleCall_1_0; }

		//comment=string_comment?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//string_comment
		public RuleCall getCommentString_commentParserRuleCall_2_0() { return cCommentString_commentParserRuleCall_2_0; }
	}

	public class ElementRedeclarationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementRedeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRedeclareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFinalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cAlternatives_3.eContents().get(0);
		private final RuleCall cClassDefinitionParserRuleCall_3_0_0 = (RuleCall)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cElementComponentClauseParserRuleCall_3_0_1 = (RuleCall)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cElementReplaceableClauseParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//ElementRedeclaration:
		//  "redeclare" "each"? "final"? ((ClassDefinition|ElementComponentClause)|
		//  ElementReplaceableClause);
		public ParserRule getRule() { return rule; }

		//"redeclare" "each"? "final"? ((ClassDefinition|ElementComponentClause)|
		//ElementReplaceableClause)
		public Group getGroup() { return cGroup; }

		//"redeclare"
		public Keyword getRedeclareKeyword_0() { return cRedeclareKeyword_0; }

		//"each"?
		public Keyword getEachKeyword_1() { return cEachKeyword_1; }

		//"final"?
		public Keyword getFinalKeyword_2() { return cFinalKeyword_2; }

		//(ClassDefinition|ElementComponentClause)|ElementReplaceableClause
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ClassDefinition|ElementComponentClause
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//ClassDefinition
		public RuleCall getClassDefinitionParserRuleCall_3_0_0() { return cClassDefinitionParserRuleCall_3_0_0; }

		//ElementComponentClause
		public RuleCall getElementComponentClauseParserRuleCall_3_0_1() { return cElementComponentClauseParserRuleCall_3_0_1; }

		//ElementReplaceableClause
		public RuleCall getElementReplaceableClauseParserRuleCall_3_1() { return cElementReplaceableClauseParserRuleCall_3_1; }
	}

	public class ElementReplaceableClauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementReplaceableClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cElementAlternatives_1_0 = (Alternatives)cElementAssignment_1.eContents().get(0);
		private final RuleCall cElementClassDefinitionParserRuleCall_1_0_0 = (RuleCall)cElementAlternatives_1_0.eContents().get(0);
		private final RuleCall cElementElementComponentClauseParserRuleCall_1_0_1 = (RuleCall)cElementAlternatives_1_0.eContents().get(1);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintConstraining_clauseParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		//ElementReplaceableClause:
		//  "replaceable" element=( ClassDefinition | ElementComponentClause ) constraint=
		//  constraining_clause?;
		public ParserRule getRule() { return rule; }

		//"replaceable" element=( ClassDefinition | ElementComponentClause ) constraint=
		//constraining_clause?
		public Group getGroup() { return cGroup; }

		//"replaceable"
		public Keyword getReplaceableKeyword_0() { return cReplaceableKeyword_0; }

		//element=( ClassDefinition | ElementComponentClause )
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//ClassDefinition|ElementComponentClause
		public Alternatives getElementAlternatives_1_0() { return cElementAlternatives_1_0; }

		//ClassDefinition
		public RuleCall getElementClassDefinitionParserRuleCall_1_0_0() { return cElementClassDefinitionParserRuleCall_1_0_0; }

		//ElementComponentClause
		public RuleCall getElementElementComponentClauseParserRuleCall_1_0_1() { return cElementElementComponentClauseParserRuleCall_1_0_1; }

		//constraint=constraining_clause?
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }

		//constraining_clause
		public RuleCall getConstraintConstraining_clauseParserRuleCall_2_0() { return cConstraintConstraining_clauseParserRuleCall_2_0; }
	}

	public class ElementComponentClauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementComponentClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrefixType_prefixParserRuleCall_0_0 = (RuleCall)cTypePrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeSpecifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_1_0 = (RuleCall)cTypeSpecifierAssignment_1.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSubscriptsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubscriptsArray_subscriptsParserRuleCall_3_0 = (RuleCall)cSubscriptsAssignment_3.eContents().get(0);
		private final Assignment cModificationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModificationModificationParserRuleCall_4_0 = (RuleCall)cModificationAssignment_4.eContents().get(0);
		private final Assignment cCommentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommentCommentParserRuleCall_5_0 = (RuleCall)cCommentAssignment_5.eContents().get(0);
		
		//ElementComponentClause:
		//  typePrefix=type_prefix typeSpecifier=type_specifier IDENT subscripts=
		//  array_subscripts? modification=modification? comment=comment; 
		//	
		//  
		//	       
		//	  
		//	
		//
		//
		/// *
		// * 2.2.6 Equations
		// * /
		public ParserRule getRule() { return rule; }

		//typePrefix=type_prefix typeSpecifier=type_specifier IDENT subscripts=
		//array_subscripts? modification=modification? comment=comment
		public Group getGroup() { return cGroup; }

		//typePrefix=type_prefix
		public Assignment getTypePrefixAssignment_0() { return cTypePrefixAssignment_0; }

		//type_prefix
		public RuleCall getTypePrefixType_prefixParserRuleCall_0_0() { return cTypePrefixType_prefixParserRuleCall_0_0; }

		//typeSpecifier=type_specifier
		public Assignment getTypeSpecifierAssignment_1() { return cTypeSpecifierAssignment_1; }

		//type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_1_0() { return cTypeSpecifierType_specifierParserRuleCall_1_0; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2() { return cIDENTTerminalRuleCall_2; }

		//subscripts=array_subscripts?
		public Assignment getSubscriptsAssignment_3() { return cSubscriptsAssignment_3; }

		//array_subscripts
		public RuleCall getSubscriptsArray_subscriptsParserRuleCall_3_0() { return cSubscriptsArray_subscriptsParserRuleCall_3_0; }

		//modification=modification?
		public Assignment getModificationAssignment_4() { return cModificationAssignment_4; }

		//modification
		public RuleCall getModificationModificationParserRuleCall_4_0() { return cModificationModificationParserRuleCall_4_0; }

		//comment=comment
		public Assignment getCommentAssignment_5() { return cCommentAssignment_5; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_5_0() { return cCommentCommentParserRuleCall_5_0; }
	}

	public class Equation_rule_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "equation_rule_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cEquationRulesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cEquationRulesEquation_ruleParserRuleCall_1_0_0_0 = (RuleCall)cEquationRulesAssignment_1_0_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0_0 = (RuleCall)cAnnotationsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//equation_rule_clause returns EquationClause:
		//  "equation" (equationRules+=equation_rule SEMICOLON|annotations+=annotation
		//  SEMICOLON)+; 
		//
		//
		/// *
		// * 2.2.6 Equations
		// * /
		public ParserRule getRule() { return rule; }

		//"equation" (equationRules+=equation_rule SEMICOLON|annotations+=annotation
		//SEMICOLON)+
		public Group getGroup() { return cGroup; }

		//"equation"
		public Keyword getEquationKeyword_0() { return cEquationKeyword_0; }

		//(equationRules+=equation_rule SEMICOLON|annotations+=annotation SEMICOLON)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//equationRules+=equation_rule SEMICOLON
		public Group getGroup_1_0() { return cGroup_1_0; }

		//equationRules+=equation_rule
		public Assignment getEquationRulesAssignment_1_0_0() { return cEquationRulesAssignment_1_0_0; }

		//equation_rule
		public RuleCall getEquationRulesEquation_ruleParserRuleCall_1_0_0_0() { return cEquationRulesEquation_ruleParserRuleCall_1_0_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_1() { return cSEMICOLONTerminalRuleCall_1_0_1; }

		//annotations+=annotation SEMICOLON
		public Group getGroup_1_1() { return cGroup_1_1; }

		//annotations+=annotation
		public Assignment getAnnotationsAssignment_1_1_0() { return cAnnotationsAssignment_1_1_0; }

		//annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_1() { return cSEMICOLONTerminalRuleCall_1_1_1; }
	}

	public class Algorithm_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithm_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAlgorithmRulesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAlgorithmRulesAlgorithmParserRuleCall_1_0_0_0 = (RuleCall)cAlgorithmRulesAssignment_1_0_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0_0 = (RuleCall)cAnnotationsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//algorithm_clause:
		//  "algorithm" (algorithmRules+=algorithm SEMICOLON|annotations+=annotation SEMICOLON)
		//  +;
		public ParserRule getRule() { return rule; }

		//"algorithm" (algorithmRules+=algorithm SEMICOLON|annotations+=annotation SEMICOLON)
		//+
		public Group getGroup() { return cGroup; }

		//"algorithm"
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }

		//(algorithmRules+=algorithm SEMICOLON|annotations+=annotation SEMICOLON)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//algorithmRules+=algorithm SEMICOLON
		public Group getGroup_1_0() { return cGroup_1_0; }

		//algorithmRules+=algorithm
		public Assignment getAlgorithmRulesAssignment_1_0_0() { return cAlgorithmRulesAssignment_1_0_0; }

		//algorithm
		public RuleCall getAlgorithmRulesAlgorithmParserRuleCall_1_0_0_0() { return cAlgorithmRulesAlgorithmParserRuleCall_1_0_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_1() { return cSEMICOLONTerminalRuleCall_1_0_1; }

		//annotations+=annotation SEMICOLON
		public Group getGroup_1_1() { return cGroup_1_1; }

		//annotations+=annotation
		public Assignment getAnnotationsAssignment_1_1_0() { return cAnnotationsAssignment_1_1_0; }

		//annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_1() { return cSEMICOLONTerminalRuleCall_1_1_1; }
	}

	public class Initial_equation_rule_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "initial_equation_rule_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEquation_rule_clauseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//initial_equation_rule_clause:
		//  "initial" equation_rule_clause;
		public ParserRule getRule() { return rule; }

		//"initial" equation_rule_clause
		public Group getGroup() { return cGroup; }

		//"initial"
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }

		//equation_rule_clause
		public RuleCall getEquation_rule_clauseParserRuleCall_1() { return cEquation_rule_clauseParserRuleCall_1; }
	}

	public class Initial_algorithm_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "initial_algorithm_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAlgorithm_clauseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//initial_algorithm_clause:
		//  "initial" algorithm_clause;
		public ParserRule getRule() { return rule; }

		//"initial" algorithm_clause
		public Group getGroup() { return cGroup; }

		//"initial"
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }

		//algorithm_clause
		public RuleCall getAlgorithm_clauseParserRuleCall_1() { return cAlgorithm_clauseParserRuleCall_1; }
	}

	public class Equation_ruleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "equation_rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cEquality_equation_ruleParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cConditional_equation_rule_eParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFor_clause_eParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cConnect_clauseParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWhen_clause_eParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentCommentParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		
		//equation_rule:
		//  (equality_equation_rule|conditional_equation_rule_e|for_clause_e|connect_clause|
		//  when_clause_e) comment=comment; 
		//
		//  
		//	  	 
		//	  
		//	  
		//	  
		//	     
		//	//| FAILURE LPAR equation_rule RPAR
		//	 //| EQUALITY LPAR equation_rule RPAR
		public ParserRule getRule() { return rule; }

		//(equality_equation_rule|conditional_equation_rule_e|for_clause_e|connect_clause|
		//when_clause_e) comment=comment 
		//	  	 
		//	  
		//	  
		//	  
		//	     
		//	//| FAILURE LPAR equation_rule RPAR
		//	 //| EQUALITY LPAR equation_rule RPAR
		public Group getGroup() { return cGroup; }

		//equality_equation_rule|conditional_equation_rule_e|for_clause_e|connect_clause|
		//when_clause_e 
		//	  	 
		//	  
		//	  
		//	  
		//	     
		//	//| FAILURE LPAR equation_rule RPAR
		//	 //| EQUALITY LPAR equation_rule RPAR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//equality_equation_rule
		public RuleCall getEquality_equation_ruleParserRuleCall_0_0() { return cEquality_equation_ruleParserRuleCall_0_0; }

		//conditional_equation_rule_e
		public RuleCall getConditional_equation_rule_eParserRuleCall_0_1() { return cConditional_equation_rule_eParserRuleCall_0_1; }

		//for_clause_e
		public RuleCall getFor_clause_eParserRuleCall_0_2() { return cFor_clause_eParserRuleCall_0_2; }

		//connect_clause
		public RuleCall getConnect_clauseParserRuleCall_0_3() { return cConnect_clauseParserRuleCall_0_3; }

		//when_clause_e      
		//	//| FAILURE LPAR equation_rule RPAR
		//	 //| EQUALITY LPAR equation_rule RPAR
		public RuleCall getWhen_clause_eParserRuleCall_0_4() { return cWhen_clause_eParserRuleCall_0_4; }

		//comment=comment
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_1_0() { return cCommentCommentParserRuleCall_1_0; }
	}

	public class AlgorithmElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAssign_clause_aParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cConditional_equation_rule_aParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFor_clause_aParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cWhile_clauseParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cWhen_clause_aParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cBreakKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cReturnKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentCommentParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		
		//algorithm:
		//  (assign_clause_a|conditional_equation_rule_a|for_clause_a|while_clause|
		//  when_clause_a|"break"|"return") comment=comment; 
		//
		//  
		//	  
		//	  
		//	  
		//	  
		//	  
		//	  
		//	  
		//	//| FAILURE LPAR algorithm RPAR
		//	 //| EQUALITY LPAR algorithm RPAR
		public ParserRule getRule() { return rule; }

		//(assign_clause_a|conditional_equation_rule_a|for_clause_a|while_clause|
		//when_clause_a|"break"|"return") comment=comment 
		//	  
		//	  
		//	  
		//	  
		//	  
		//	  
		//	  
		//	//| FAILURE LPAR algorithm RPAR
		//	 //| EQUALITY LPAR algorithm RPAR
		public Group getGroup() { return cGroup; }

		//assign_clause_a|conditional_equation_rule_a|for_clause_a|while_clause|
		//when_clause_a|"break"|"return" 
		//	  
		//	  
		//	  
		//	  
		//	  
		//	  
		//	  
		//	//| FAILURE LPAR algorithm RPAR
		//	 //| EQUALITY LPAR algorithm RPAR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//assign_clause_a
		public RuleCall getAssign_clause_aParserRuleCall_0_0() { return cAssign_clause_aParserRuleCall_0_0; }

		//conditional_equation_rule_a
		public RuleCall getConditional_equation_rule_aParserRuleCall_0_1() { return cConditional_equation_rule_aParserRuleCall_0_1; }

		//for_clause_a
		public RuleCall getFor_clause_aParserRuleCall_0_2() { return cFor_clause_aParserRuleCall_0_2; }

		//while_clause
		public RuleCall getWhile_clauseParserRuleCall_0_3() { return cWhile_clauseParserRuleCall_0_3; }

		//when_clause_a
		public RuleCall getWhen_clause_aParserRuleCall_0_4() { return cWhen_clause_aParserRuleCall_0_4; }

		//"break"
		public Keyword getBreakKeyword_0_5() { return cBreakKeyword_0_5; }

		//"return"   
		//	//| FAILURE LPAR algorithm RPAR
		//	 //| EQUALITY LPAR algorithm RPAR
		public Keyword getReturnKeyword_0_6() { return cReturnKeyword_0_6; }

		//comment=comment
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//comment
		public RuleCall getCommentCommentParserRuleCall_1_0() { return cCommentCommentParserRuleCall_1_0; }
	}

	public class Assign_clause_aElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assign_clause_a");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimple_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cEQUALSTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//assign_clause_a returns ecore::EString:
		//  simple_expression (ASSIGN expression|EQUALS expression)?;
		public ParserRule getRule() { return rule; }

		//simple_expression (ASSIGN expression|EQUALS expression)?
		public Group getGroup() { return cGroup; }

		//simple_expression
		public RuleCall getSimple_expressionParserRuleCall_0() { return cSimple_expressionParserRuleCall_0; }

		//(ASSIGN expression|EQUALS expression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ASSIGN expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_1_0_0() { return cASSIGNTerminalRuleCall_1_0_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_0_1() { return cExpressionParserRuleCall_1_0_1; }

		//EQUALS expression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_1_0() { return cEQUALSTerminalRuleCall_1_1_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_1_1() { return cExpressionParserRuleCall_1_1_1; }
	}

	public class Equality_equation_ruleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "equality_equation_rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimple_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cEQUALSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//equality_equation_rule returns ecore::EString:
		//  simple_expression (EQUALS expression)?;
		public ParserRule getRule() { return rule; }

		//simple_expression (EQUALS expression)?
		public Group getGroup() { return cGroup; }

		//simple_expression
		public RuleCall getSimple_expressionParserRuleCall_0() { return cSimple_expressionParserRuleCall_0; }

		//(EQUALS expression)?
		public Group getGroup_1() { return cGroup_1; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_0() { return cEQUALSTerminalRuleCall_1_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}

	public class Conditional_equation_rule_eElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_equation_rule_e");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenEquationClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenEquationClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cThenEquationClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cElseifClausesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseifClausesEquation_rule_elseifParserRuleCall_4_0 = (RuleCall)cElseifClausesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cElseEquationClausesAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cElseEquationClausesEquation_ruleParserRuleCall_5_1_0_0 = (RuleCall)cElseEquationClausesAssignment_5_1_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_5_1_1 = (RuleCall)cGroup_5_1.eContents().get(1);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//conditional_equation_rule_e returns ConditionalEquationRule:
		//  "if" expression "then" (thenEquationClauses+=equation_rule SEMICOLON)* elseifClauses
		//  +=equation_rule_elseif* ("else" (elseEquationClauses+=equation_rule SEMICOLON)*)?
		//  "end" "if";
		public ParserRule getRule() { return rule; }

		//"if" expression "then" (thenEquationClauses+=equation_rule SEMICOLON)* elseifClauses
		//+=equation_rule_elseif* ("else" (elseEquationClauses+=equation_rule SEMICOLON)*)?
		//"end" "if"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenEquationClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenEquationClauses+=equation_rule
		public Assignment getThenEquationClausesAssignment_3_0() { return cThenEquationClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getThenEquationClausesEquation_ruleParserRuleCall_3_0_0() { return cThenEquationClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }

		//elseifClauses+=equation_rule_elseif*
		public Assignment getElseifClausesAssignment_4() { return cElseifClausesAssignment_4; }

		//equation_rule_elseif
		public RuleCall getElseifClausesEquation_rule_elseifParserRuleCall_4_0() { return cElseifClausesEquation_rule_elseifParserRuleCall_4_0; }

		//("else" (elseEquationClauses+=equation_rule SEMICOLON)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//(elseEquationClauses+=equation_rule SEMICOLON)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//elseEquationClauses+=equation_rule
		public Assignment getElseEquationClausesAssignment_5_1_0() { return cElseEquationClausesAssignment_5_1_0; }

		//equation_rule
		public RuleCall getElseEquationClausesEquation_ruleParserRuleCall_5_1_0_0() { return cElseEquationClausesEquation_ruleParserRuleCall_5_1_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5_1_1() { return cSEMICOLONTerminalRuleCall_5_1_1; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"if"
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}

	public class Conditional_equation_rule_aElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_equation_rule_a");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenAlgorithmClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenAlgorithmClausesAlgorithmParserRuleCall_3_0_0 = (RuleCall)cThenAlgorithmClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cElseifClausesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseifClausesAlgorithm_elseifParserRuleCall_4_0 = (RuleCall)cElseifClausesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cElseAlgotithmClausesAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cElseAlgotithmClausesAlgorithmParserRuleCall_5_1_0_0 = (RuleCall)cElseAlgotithmClausesAssignment_5_1_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_5_1_1 = (RuleCall)cGroup_5_1.eContents().get(1);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//conditional_equation_rule_a returns ConditionAlgorithmRule:
		//  "if" condition=expression "then" (thenAlgorithmClauses+=algorithm SEMICOLON)*
		//  elseifClauses+=algorithm_elseif* ("else" (elseAlgotithmClauses+=algorithm SEMICOLON
		//  )*)? "end" "if";
		public ParserRule getRule() { return rule; }

		//"if" condition=expression "then" (thenAlgorithmClauses+=algorithm SEMICOLON)*
		//elseifClauses+=algorithm_elseif* ("else" (elseAlgotithmClauses+=algorithm SEMICOLON
		//)*)? "end" "if"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenAlgorithmClauses+=algorithm SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenAlgorithmClauses+=algorithm
		public Assignment getThenAlgorithmClausesAssignment_3_0() { return cThenAlgorithmClausesAssignment_3_0; }

		//algorithm
		public RuleCall getThenAlgorithmClausesAlgorithmParserRuleCall_3_0_0() { return cThenAlgorithmClausesAlgorithmParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }

		//elseifClauses+=algorithm_elseif*
		public Assignment getElseifClausesAssignment_4() { return cElseifClausesAssignment_4; }

		//algorithm_elseif
		public RuleCall getElseifClausesAlgorithm_elseifParserRuleCall_4_0() { return cElseifClausesAlgorithm_elseifParserRuleCall_4_0; }

		//("else" (elseAlgotithmClauses+=algorithm SEMICOLON)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//(elseAlgotithmClauses+=algorithm SEMICOLON)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//elseAlgotithmClauses+=algorithm
		public Assignment getElseAlgotithmClausesAssignment_5_1_0() { return cElseAlgotithmClausesAssignment_5_1_0; }

		//algorithm
		public RuleCall getElseAlgotithmClausesAlgorithmParserRuleCall_5_1_0_0() { return cElseAlgotithmClausesAlgorithmParserRuleCall_5_1_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5_1_1() { return cSEMICOLONTerminalRuleCall_5_1_1; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"if"
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}

	public class For_clause_eElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_clause_e");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cForIndicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForIndicesFor_indicesParserRuleCall_1_0 = (RuleCall)cForIndicesAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEquationClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEquationClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cEquationClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//for_clause_e returns ForEquationClause:
		//  "for" forIndices=for_indices "loop" (equationClauses+=equation_rule SEMICOLON)* "end"
		//  "for";
		public ParserRule getRule() { return rule; }

		//"for" forIndices=for_indices "loop" (equationClauses+=equation_rule SEMICOLON)* "end"
		//"for"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//forIndices=for_indices
		public Assignment getForIndicesAssignment_1() { return cForIndicesAssignment_1; }

		//for_indices
		public RuleCall getForIndicesFor_indicesParserRuleCall_1_0() { return cForIndicesFor_indicesParserRuleCall_1_0; }

		//"loop"
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }

		//(equationClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//equationClauses+=equation_rule
		public Assignment getEquationClausesAssignment_3_0() { return cEquationClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getEquationClausesEquation_ruleParserRuleCall_3_0_0() { return cEquationClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"for"
		public Keyword getForKeyword_5() { return cForKeyword_5; }
	}

	public class For_clause_aElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_clause_a");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cForIndicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForIndicesFor_indicesParserRuleCall_1_0 = (RuleCall)cForIndicesAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAlgorithmClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAlgorithmClausesAlgorithmParserRuleCall_3_0_0 = (RuleCall)cAlgorithmClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//for_clause_a returns ForAlgorithmClause:
		//  "for" forIndices=for_indices "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
		//  "for";
		public ParserRule getRule() { return rule; }

		//"for" forIndices=for_indices "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
		//"for"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//forIndices=for_indices
		public Assignment getForIndicesAssignment_1() { return cForIndicesAssignment_1; }

		//for_indices
		public RuleCall getForIndicesFor_indicesParserRuleCall_1_0() { return cForIndicesFor_indicesParserRuleCall_1_0; }

		//"loop"
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }

		//(algorithmClauses+=algorithm SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//algorithmClauses+=algorithm
		public Assignment getAlgorithmClausesAssignment_3_0() { return cAlgorithmClausesAssignment_3_0; }

		//algorithm
		public RuleCall getAlgorithmClausesAlgorithmParserRuleCall_3_0_0() { return cAlgorithmClausesAlgorithmParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"for"
		public Keyword getForKeyword_5() { return cForKeyword_5; }
	}

	public class While_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "while_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAlgorithmClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAlgorithmClausesAlgorithmParserRuleCall_3_0_0 = (RuleCall)cAlgorithmClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWhileKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//while_clause returns WhileClause:
		//  "while" condition=expression "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
		//  "while";
		public ParserRule getRule() { return rule; }

		//"while" condition=expression "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
		//"while"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"loop"
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }

		//(algorithmClauses+=algorithm SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//algorithmClauses+=algorithm
		public Assignment getAlgorithmClausesAssignment_3_0() { return cAlgorithmClausesAssignment_3_0; }

		//algorithm
		public RuleCall getAlgorithmClausesAlgorithmParserRuleCall_3_0_0() { return cAlgorithmClausesAlgorithmParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"while"
		public Keyword getWhileKeyword_5() { return cWhileKeyword_5; }
	}

	public class When_clause_eElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "when_clause_e");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenEquationClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenEquationClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cThenEquationClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cElseWhenClausesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseWhenClausesElse_when_eParserRuleCall_4_0 = (RuleCall)cElseWhenClausesAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//when_clause_e:
		//  "when" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
		//  elseWhenClauses+=else_when_e* "end" "when";
		public ParserRule getRule() { return rule; }

		//"when" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
		//elseWhenClauses+=else_when_e* "end" "when"
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenEquationClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenEquationClauses+=equation_rule
		public Assignment getThenEquationClausesAssignment_3_0() { return cThenEquationClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getThenEquationClausesEquation_ruleParserRuleCall_3_0_0() { return cThenEquationClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }

		//elseWhenClauses+=else_when_e*
		public Assignment getElseWhenClausesAssignment_4() { return cElseWhenClausesAssignment_4; }

		//else_when_e
		public RuleCall getElseWhenClausesElse_when_eParserRuleCall_4_0() { return cElseWhenClausesElse_when_eParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"when"
		public Keyword getWhenKeyword_6() { return cWhenKeyword_6; }
	}

	public class Else_when_eElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "else_when_e");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsewhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenEquationClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenEquationClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cThenEquationClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//else_when_e:
		//  "elsewhen" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON
		//  )*;
		public ParserRule getRule() { return rule; }

		//"elsewhen" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON
		//)*
		public Group getGroup() { return cGroup; }

		//"elsewhen"
		public Keyword getElsewhenKeyword_0() { return cElsewhenKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenEquationClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenEquationClauses+=equation_rule
		public Assignment getThenEquationClausesAssignment_3_0() { return cThenEquationClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getThenEquationClausesEquation_ruleParserRuleCall_3_0_0() { return cThenEquationClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }
	}

	public class When_clause_aElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "when_clause_a");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenAlgorithmClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cThenAlgorithmClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cElseWhenClausesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseWhenClausesElse_when_aParserRuleCall_4_0 = (RuleCall)cElseWhenClausesAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//when_clause_a:
		//  "when" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)*
		//  elseWhenClauses+=else_when_a* "end" "when";
		public ParserRule getRule() { return rule; }

		//"when" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)*
		//elseWhenClauses+=else_when_a* "end" "when"
		public Group getGroup() { return cGroup; }

		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenAlgorithmClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenAlgorithmClauses+=equation_rule
		public Assignment getThenAlgorithmClausesAssignment_3_0() { return cThenAlgorithmClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0() { return cThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }

		//elseWhenClauses+=else_when_a*
		public Assignment getElseWhenClausesAssignment_4() { return cElseWhenClausesAssignment_4; }

		//else_when_a
		public RuleCall getElseWhenClausesElse_when_aParserRuleCall_4_0() { return cElseWhenClausesElse_when_aParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"when"
		public Keyword getWhenKeyword_6() { return cWhenKeyword_6; }
	}

	public class Else_when_aElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "else_when_a");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsewhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenAlgorithmClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cThenAlgorithmClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//else_when_a:
		//  "elsewhen" condition=expression "then" (thenAlgorithmClauses+=equation_rule
		//  SEMICOLON)*;
		public ParserRule getRule() { return rule; }

		//"elsewhen" condition=expression "then" (thenAlgorithmClauses+=equation_rule
		//SEMICOLON)*
		public Group getGroup() { return cGroup; }

		//"elsewhen"
		public Keyword getElsewhenKeyword_0() { return cElsewhenKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenAlgorithmClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenAlgorithmClauses+=equation_rule
		public Assignment getThenAlgorithmClausesAssignment_3_0() { return cThenAlgorithmClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0() { return cThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }
	}

	public class Equation_rule_elseifElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "equation_rule_elseif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenEquationClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenEquationClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cThenEquationClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//equation_rule_elseif:
		//  "elseif" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
		//;
		public ParserRule getRule() { return rule; }

		//"elseif" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
		public Group getGroup() { return cGroup; }

		//"elseif"
		public Keyword getElseifKeyword_0() { return cElseifKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenEquationClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenEquationClauses+=equation_rule
		public Assignment getThenEquationClausesAssignment_3_0() { return cThenEquationClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getThenEquationClausesEquation_ruleParserRuleCall_3_0_0() { return cThenEquationClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }
	}

	public class Algorithm_elseifElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithm_elseif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenAlgorithmClausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0 = (RuleCall)cThenAlgorithmClausesAssignment_3_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//algorithm_elseif:
		//  "elseif" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)
		//  *;
		public ParserRule getRule() { return rule; }

		//"elseif" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)
		// *
		public Group getGroup() { return cGroup; }

		//"elseif"
		public Keyword getElseifKeyword_0() { return cElseifKeyword_0; }

		//condition=expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//(thenAlgorithmClauses+=equation_rule SEMICOLON)*
		public Group getGroup_3() { return cGroup_3; }

		//thenAlgorithmClauses+=equation_rule
		public Assignment getThenAlgorithmClausesAssignment_3_0() { return cThenAlgorithmClausesAssignment_3_0; }

		//equation_rule
		public RuleCall getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0() { return cThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_1() { return cSEMICOLONTerminalRuleCall_3_1; }
	}

	public class Connect_clauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "connect_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConnector_refParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cConnector_refParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cRPARTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//connect_clause returns ecore::EString:
		//  "connect" LPAR connector_ref COMMA connector_ref RPAR;
		public ParserRule getRule() { return rule; }

		//"connect" LPAR connector_ref COMMA connector_ref RPAR
		public Group getGroup() { return cGroup; }

		//"connect"
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_1() { return cLPARTerminalRuleCall_1; }

		//connector_ref
		public RuleCall getConnector_refParserRuleCall_2() { return cConnector_refParserRuleCall_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3() { return cCOMMATerminalRuleCall_3; }

		//connector_ref
		public RuleCall getConnector_refParserRuleCall_4() { return cConnector_refParserRuleCall_4; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_5() { return cRPARTerminalRuleCall_5; }
	}

	public class Connector_refElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "connector_ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArray_subscriptsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cConnector_ref_2ParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//connector_ref returns ecore::EString:
		//  IDENT array_subscripts? (DOT connector_ref_2)?;
		public ParserRule getRule() { return rule; }

		//IDENT array_subscripts? (DOT connector_ref_2)?
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//array_subscripts?
		public RuleCall getArray_subscriptsParserRuleCall_1() { return cArray_subscriptsParserRuleCall_1; }

		//(DOT connector_ref_2)?
		public Group getGroup_2() { return cGroup_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }

		//connector_ref_2
		public RuleCall getConnector_ref_2ParserRuleCall_2_1() { return cConnector_ref_2ParserRuleCall_2_1; }
	}

	public class Connector_ref_2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "connector_ref_2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArray_subscriptsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//connector_ref_2 returns ecore::EString:
		//  IDENT array_subscripts?; 
		//
		//  
		//	      
		//	
		//
		/// *
		// * 2.2.7 Expressions
		// * /
		public ParserRule getRule() { return rule; }

		//IDENT array_subscripts?
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//array_subscripts?
		public RuleCall getArray_subscriptsParserRuleCall_1() { return cArray_subscriptsParserRuleCall_1; }
	}

	public class ExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIf_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimple_expressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//expression returns ecore::EString:
		//  if_expression|simple_expression; 
		//
		/// *
		// * 2.2.7 Expressions
		// * /
		//  
		//	  
		//	  
		//	//| code_expression
		//	 / *| (MATCHCONTINUE expression_or_empty
		//	   local_clause
		//	   cases
		//	   T_END MATCHCONTINUE)
		//	| (MATCH expression_or_empty
		//	   local_clause
		//	   cases
		//	   T_END MATCH)
		//	   * /
		public ParserRule getRule() { return rule; }

		//if_expression|simple_expression 
		//	  
		//	  
		//	//| code_expression
		//	 / *| (MATCHCONTINUE expression_or_empty
		//	   local_clause
		//	   cases
		//	   T_END MATCHCONTINUE)
		//	| (MATCH expression_or_empty
		//	   local_clause
		//	   cases
		//	   T_END MATCH)
		//	   * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//if_expression
		public RuleCall getIf_expressionParserRuleCall_0() { return cIf_expressionParserRuleCall_0; }

		//simple_expression   
		//	//| code_expression
		//	 / *| (MATCHCONTINUE expression_or_empty
		//	   local_clause
		//	   cases
		//	   T_END MATCHCONTINUE)
		//	| (MATCH expression_or_empty
		//	   local_clause
		//	   cases
		//	   T_END MATCH)
		//	   * /
		public RuleCall getSimple_expressionParserRuleCall_1() { return cSimple_expressionParserRuleCall_1; }
	}

	public class Expression_or_emptyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_or_empty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expression_or_empty returns ecore::EString:
		//  expression|LPAR RPAR; 
		//
		//  
		//	
		//	    
		//	
		//
		/// *
		//// The element_list is now modified
		//local_clause:
		//	(LOCAL element_list)?
		//	;
		//
		//cases:
		//	(onecase)+ (ELSE string_comment local_clause (EQUATION equation_rule_list_then)?
		//	THEN expression_or_empty SEMICOLON)?
		//	;
		//
		//onecase:
		//	(CASE pattern string_comment local_clause (EQUATION equation_rule_list_then)?
		//	THEN expression_or_empty SEMICOLON)
		//	;
		//
		//pattern:
		//	expression_or_empty
		//	;
		// * /
		public ParserRule getRule() { return rule; }

		//expression|LPAR RPAR 
		//
		//  
		//	
		//	    
		//	
		//
		/// *
		//// The element_list is now modified
		//local_clause:
		//	(LOCAL element_list)?
		//	;
		//
		//cases:
		//	(onecase)+ (ELSE string_comment local_clause (EQUATION equation_rule_list_then)?
		//	THEN expression_or_empty SEMICOLON)?
		//	;
		//
		//onecase:
		//	(CASE pattern string_comment local_clause (EQUATION equation_rule_list_then)?
		//	THEN expression_or_empty SEMICOLON)
		//	;
		//
		//pattern:
		//	expression_or_empty
		//	;
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//LPAR RPAR
		public Group getGroup_1() { return cGroup_1; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_1_0() { return cLPARTerminalRuleCall_1_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_1_1() { return cRPARTerminalRuleCall_1_1; }
	}

	public class If_expressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cElseif_expressionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cExpressionParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//if_expression returns ecore::EString:
		//  "if" expression "then" expression elseif_expression* "else" expression; 
		//
		/// *
		//// The element_list is now modified
		//local_clause:
		//	(LOCAL element_list)?
		//	;
		//
		//cases:
		//	(onecase)+ (ELSE string_comment local_clause (EQUATION equation_rule_list_then)?
		//	THEN expression_or_empty SEMICOLON)?
		//	;
		//
		//onecase:
		//	(CASE pattern string_comment local_clause (EQUATION equation_rule_list_then)?
		//	THEN expression_or_empty SEMICOLON)
		//	;
		//
		//pattern:
		//	expression_or_empty
		//	;
		// * /
		public ParserRule getRule() { return rule; }

		//"if" expression "then" expression elseif_expression* "else" expression
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }

		//elseif_expression*
		public RuleCall getElseif_expressionParserRuleCall_4() { return cElseif_expressionParserRuleCall_4; }

		//"else"
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }

		//expression
		public RuleCall getExpressionParserRuleCall_6() { return cExpressionParserRuleCall_6; }
	}

	public class Elseif_expressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elseif_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//elseif_expression returns ecore::EString:
		//  "elseif" expression "then" expression;
		public ParserRule getRule() { return rule; }

		//"elseif" expression "then" expression
		public Group getGroup() { return cGroup; }

		//"elseif"
		public Keyword getElseifKeyword_0() { return cElseifKeyword_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
	}

	public class For_indicesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_indices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFor_indexParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFor_indexParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//for_indices returns ecore::EString:
		//  for_index (COMMA for_index)*;
		public ParserRule getRule() { return rule; }

		//for_index (COMMA for_index)*
		public Group getGroup() { return cGroup; }

		//for_index
		public RuleCall getFor_indexParserRuleCall_0() { return cFor_indexParserRuleCall_0; }

		//(COMMA for_index)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//for_index
		public RuleCall getFor_indexParserRuleCall_1_1() { return cFor_indexParserRuleCall_1_1; }
	}

	public class For_indexElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//for_index returns ecore::EString:
		//  IDENT ("in" expression)?;
		public ParserRule getRule() { return rule; }

		//IDENT ("in" expression)?
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//("in" expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"in"
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}

	public class Simple_expressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_expression");
		private final RuleCall cSimple_exprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//simple_expression returns ecore::EString:
		//  simple_expr; 
		//
		//  
		//	   
		//	//(COLONCOLON simple_expr)*
		//	 //| IDENT AS simple_expression
		public ParserRule getRule() { return rule; }

		//simple_expr 
		//	   
		//	//(COLONCOLON simple_expr)*
		//	 //| IDENT AS simple_expression
		public RuleCall getSimple_exprParserRuleCall() { return cSimple_exprParserRuleCall; }
	}

	public class Simple_exprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cLogical_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cCOLONTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final RuleCall cLogical_expressionParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		
		//simple_expr returns ecore::EString:
		//  logical_expression (COLON logical_expression (COLON logical_expression)?)?; 
		//
		//  
		//	                
		//	
		//
		/// * Code quotation mechanism * / 
		/// *
		//code_expression  :
		//	CODE LPAR ((expression RPAR)=> e=expression | m=modification | el=element (SEMICOLON)?
		//	| eq=code_equation_rule_clause | ieq=code_initial_equation_rule_clause
		//	| alg=code_algorithm_clause | ialg=code_initial_algorithm_clause
		//	)  RPAR
		//	;
		//
		//code_equation_rule_clause :
		//	( EQUATION ( equation_rule SEMICOLON | annotation SEMICOLON )*  )
		//	;
		//
		//code_initial_equation_rule_clause :
		//	{ LA(2)==EQUATION }?
		//	INITIAL ec=code_equation_rule_clause 
		//	;
		//
		//code_algorithm_clause :
		//	'algorithm' (algorithm SEMICOLON | annotation SEMICOLON)*
		//	;
		//
		//code_initial_algorithm_clause :
		//	{ LA(2) == 'algorithm' }?
		//	INITIAL 'algorithm'
		//	( algorithm SEMICOLON | annotation SEMICOLON )* 
		//	;
		// * /
		/// * End Code quotation mechanism * /
		public ParserRule getRule() { return rule; }

		//logical_expression (COLON logical_expression (COLON logical_expression)?)?
		public Group getGroup() { return cGroup; }

		//logical_expression
		public RuleCall getLogical_expressionParserRuleCall_0() { return cLogical_expressionParserRuleCall_0; }

		//(COLON logical_expression (COLON logical_expression)?)?
		public Group getGroup_1() { return cGroup_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_0() { return cCOLONTerminalRuleCall_1_0; }

		//logical_expression
		public RuleCall getLogical_expressionParserRuleCall_1_1() { return cLogical_expressionParserRuleCall_1_1; }

		//(COLON logical_expression)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_2_0() { return cCOLONTerminalRuleCall_1_2_0; }

		//logical_expression
		public RuleCall getLogical_expressionParserRuleCall_1_2_1() { return cLogical_expressionParserRuleCall_1_2_1; }
	}

	public class Logical_expressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_termParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLogical_termParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//logical_expression returns ecore::EString:
		//  logical_term ("or" logical_term)*; 
		//
		/// * Code quotation mechanism * / 
		/// *
		//code_expression  :
		//	CODE LPAR ((expression RPAR)=> e=expression | m=modification | el=element (SEMICOLON)?
		//	| eq=code_equation_rule_clause | ieq=code_initial_equation_rule_clause
		//	| alg=code_algorithm_clause | ialg=code_initial_algorithm_clause
		//	)  RPAR
		//	;
		//
		//code_equation_rule_clause :
		//	( EQUATION ( equation_rule SEMICOLON | annotation SEMICOLON )*  )
		//	;
		//
		//code_initial_equation_rule_clause :
		//	{ LA(2)==EQUATION }?
		//	INITIAL ec=code_equation_rule_clause 
		//	;
		//
		//code_algorithm_clause :
		//	'algorithm' (algorithm SEMICOLON | annotation SEMICOLON)*
		//	;
		//
		//code_initial_algorithm_clause :
		//	{ LA(2) == 'algorithm' }?
		//	INITIAL 'algorithm'
		//	( algorithm SEMICOLON | annotation SEMICOLON )* 
		//	;
		// * /
		/// * End Code quotation mechanism * /
		public ParserRule getRule() { return rule; }

		//logical_term ("or" logical_term)*
		public Group getGroup() { return cGroup; }

		//logical_term
		public RuleCall getLogical_termParserRuleCall_0() { return cLogical_termParserRuleCall_0; }

		//("or" logical_term)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//logical_term
		public RuleCall getLogical_termParserRuleCall_1_1() { return cLogical_termParserRuleCall_1_1; }
	}

	public class Logical_termElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_factorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLogical_factorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//logical_term returns ecore::EString:
		//  logical_factor ("and" logical_factor)*;
		public ParserRule getRule() { return rule; }

		//logical_factor ("and" logical_factor)*
		public Group getGroup() { return cGroup; }

		//logical_factor
		public RuleCall getLogical_factorParserRuleCall_0() { return cLogical_factorParserRuleCall_0; }

		//("and" logical_factor)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//logical_factor
		public RuleCall getLogical_factorParserRuleCall_1_1() { return cLogical_factorParserRuleCall_1_1; }
	}

	public class Logical_factorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//logical_factor returns ecore::EString:
		//  "not"? relation;
		public ParserRule getRule() { return rule; }

		//"not"? relation
		public Group getGroup() { return cGroup; }

		//"not"?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}

	public class RelationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmetic_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cLESSTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cLESSEQTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cGREATERTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cGREATEREQTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cEQEQTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cLESSGTTerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cArithmetic_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//relation returns ecore::EString:
		//  arithmetic_expression ((LESS|LESSEQ|GREATER|GREATEREQ|EQEQ|LESSGT)
		//  arithmetic_expression)?;
		public ParserRule getRule() { return rule; }

		//arithmetic_expression ((LESS|LESSEQ|GREATER|GREATEREQ|EQEQ|LESSGT)
		//arithmetic_expression)?
		public Group getGroup() { return cGroup; }

		//arithmetic_expression
		public RuleCall getArithmetic_expressionParserRuleCall_0() { return cArithmetic_expressionParserRuleCall_0; }

		//((LESS|LESSEQ|GREATER|GREATEREQ|EQEQ|LESSGT) arithmetic_expression)?
		public Group getGroup_1() { return cGroup_1; }

		//LESS|LESSEQ|GREATER|GREATEREQ|EQEQ|LESSGT
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//LESS
		public RuleCall getLESSTerminalRuleCall_1_0_0() { return cLESSTerminalRuleCall_1_0_0; }

		//LESSEQ
		public RuleCall getLESSEQTerminalRuleCall_1_0_1() { return cLESSEQTerminalRuleCall_1_0_1; }

		//GREATER
		public RuleCall getGREATERTerminalRuleCall_1_0_2() { return cGREATERTerminalRuleCall_1_0_2; }

		//GREATEREQ
		public RuleCall getGREATEREQTerminalRuleCall_1_0_3() { return cGREATEREQTerminalRuleCall_1_0_3; }

		//EQEQ
		public RuleCall getEQEQTerminalRuleCall_1_0_4() { return cEQEQTerminalRuleCall_1_0_4; }

		//LESSGT
		public RuleCall getLESSGTTerminalRuleCall_1_0_5() { return cLESSGTTerminalRuleCall_1_0_5; }

		//arithmetic_expression
		public RuleCall getArithmetic_expressionParserRuleCall_1_1() { return cArithmetic_expressionParserRuleCall_1_1; }
	}

	public class Arithmetic_expressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arithmetic_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_arithmetic_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cPLUS_EWTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cMINUS_EWTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cTermParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//arithmetic_expression returns ecore::EString:
		//  unary_arithmetic_expression ((PLUS|MINUS|PLUS_EW|MINUS_EW) term)*;
		public ParserRule getRule() { return rule; }

		//unary_arithmetic_expression ((PLUS|MINUS|PLUS_EW|MINUS_EW) term)*
		public Group getGroup() { return cGroup; }

		//unary_arithmetic_expression
		public RuleCall getUnary_arithmetic_expressionParserRuleCall_0() { return cUnary_arithmetic_expressionParserRuleCall_0; }

		//((PLUS|MINUS|PLUS_EW|MINUS_EW) term)*
		public Group getGroup_1() { return cGroup_1; }

		//PLUS|MINUS|PLUS_EW|MINUS_EW
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_0() { return cPLUSTerminalRuleCall_1_0_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_1() { return cMINUSTerminalRuleCall_1_0_1; }

		//PLUS_EW
		public RuleCall getPLUS_EWTerminalRuleCall_1_0_2() { return cPLUS_EWTerminalRuleCall_1_0_2; }

		//MINUS_EW
		public RuleCall getMINUS_EWTerminalRuleCall_1_0_3() { return cMINUS_EWTerminalRuleCall_1_0_3; }

		//term
		public RuleCall getTermParserRuleCall_1_1() { return cTermParserRuleCall_1_1; }
	}

	public class Unary_arithmetic_expressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_arithmetic_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cTermParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMINUSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cTermParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPLUS_EWTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cTermParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cMINUS_EWTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cTermParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cTermParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//unary_arithmetic_expression returns ecore::EString:
		//  PLUS term|MINUS term|PLUS_EW term|MINUS_EW term|term;
		public ParserRule getRule() { return rule; }

		//PLUS term|MINUS term|PLUS_EW term|MINUS_EW term|term
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS term
		public Group getGroup_0() { return cGroup_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_0() { return cPLUSTerminalRuleCall_0_0; }

		//term
		public RuleCall getTermParserRuleCall_0_1() { return cTermParserRuleCall_0_1; }

		//MINUS term
		public Group getGroup_1() { return cGroup_1; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0() { return cMINUSTerminalRuleCall_1_0; }

		//term
		public RuleCall getTermParserRuleCall_1_1() { return cTermParserRuleCall_1_1; }

		//PLUS_EW term
		public Group getGroup_2() { return cGroup_2; }

		//PLUS_EW
		public RuleCall getPLUS_EWTerminalRuleCall_2_0() { return cPLUS_EWTerminalRuleCall_2_0; }

		//term
		public RuleCall getTermParserRuleCall_2_1() { return cTermParserRuleCall_2_1; }

		//MINUS_EW term
		public Group getGroup_3() { return cGroup_3; }

		//MINUS_EW
		public RuleCall getMINUS_EWTerminalRuleCall_3_0() { return cMINUS_EWTerminalRuleCall_3_0; }

		//term
		public RuleCall getTermParserRuleCall_3_1() { return cTermParserRuleCall_3_1; }

		//term
		public RuleCall getTermParserRuleCall_4() { return cTermParserRuleCall_4; }
	}

	public class TermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cSTARTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cSLASHTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cSTAR_EWTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cSLASH_EWTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cFactorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//term returns ecore::EString:
		//  factor ((STAR|SLASH|STAR_EW|SLASH_EW) factor)*;
		public ParserRule getRule() { return rule; }

		//factor ((STAR|SLASH|STAR_EW|SLASH_EW) factor)*
		public Group getGroup() { return cGroup; }

		//factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }

		//((STAR|SLASH|STAR_EW|SLASH_EW) factor)*
		public Group getGroup_1() { return cGroup_1; }

		//STAR|SLASH|STAR_EW|SLASH_EW
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_1_0_0() { return cSTARTerminalRuleCall_1_0_0; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_1_0_1() { return cSLASHTerminalRuleCall_1_0_1; }

		//STAR_EW
		public RuleCall getSTAR_EWTerminalRuleCall_1_0_2() { return cSTAR_EWTerminalRuleCall_1_0_2; }

		//SLASH_EW
		public RuleCall getSLASH_EWTerminalRuleCall_1_0_3() { return cSLASH_EWTerminalRuleCall_1_0_3; }

		//factor
		public RuleCall getFactorParserRuleCall_1_1() { return cFactorParserRuleCall_1_1; }
	}

	public class FactorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cPOWERTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cPOWER_EWTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//factor returns ecore::EString:
		//  primary ((POWER|POWER_EW) primary)?;
		public ParserRule getRule() { return rule; }

		//primary ((POWER|POWER_EW) primary)?
		public Group getGroup() { return cGroup; }

		//primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//((POWER|POWER_EW) primary)?
		public Group getGroup_1() { return cGroup_1; }

		//POWER|POWER_EW
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//POWER
		public RuleCall getPOWERTerminalRuleCall_1_0_0() { return cPOWERTerminalRuleCall_1_0_0; }

		//POWER_EW
		public RuleCall getPOWER_EWTerminalRuleCall_1_0_1() { return cPOWER_EWTerminalRuleCall_1_0_1; }

		//primary
		public RuleCall getPrimaryParserRuleCall_1_1() { return cPrimaryParserRuleCall_1_1; }
	}

	public class PrimaryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUNSIGNED_INTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNSIGNED_REALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTrueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final RuleCall cComponent_reference__function_callParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cDerKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cFunction_callParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cLPARTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cExpression_listParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cRPARTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cLBRACKTerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final RuleCall cExpression_listParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final RuleCall cSEMICOLONTerminalRuleCall_8_2_0 = (RuleCall)cGroup_8_2.eContents().get(0);
		private final RuleCall cExpression_listParserRuleCall_8_2_1 = (RuleCall)cGroup_8_2.eContents().get(1);
		private final RuleCall cRBRACKTerminalRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cLBRACETerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final RuleCall cFor_or_expression_listParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final RuleCall cRBRACETerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Keyword cEndKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//primary returns ecore::EString:
		//  UNSIGNED_INTEGER|UNSIGNED_REAL|STRING|"false"|"true"|
		//  component_reference__function_call|"der" function_call|LPAR expression_list RPAR|
		//  LBRACK expression_list (SEMICOLON expression_list)* RBRACK|LBRACE
		//  for_or_expression_list RBRACE|"end";
		public ParserRule getRule() { return rule; }

		//UNSIGNED_INTEGER|UNSIGNED_REAL|STRING|"false"|"true"|
		//component_reference__function_call|"der" function_call|LPAR expression_list RPAR|
		//LBRACK expression_list (SEMICOLON expression_list)* RBRACK|LBRACE
		//for_or_expression_list RBRACE|"end"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNSIGNED_INTEGER
		public RuleCall getUNSIGNED_INTEGERTerminalRuleCall_0() { return cUNSIGNED_INTEGERTerminalRuleCall_0; }

		//UNSIGNED_REAL
		public RuleCall getUNSIGNED_REALTerminalRuleCall_1() { return cUNSIGNED_REALTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//"false"
		public Keyword getFalseKeyword_3() { return cFalseKeyword_3; }

		//"true"
		public Keyword getTrueKeyword_4() { return cTrueKeyword_4; }

		//component_reference__function_call
		public RuleCall getComponent_reference__function_callParserRuleCall_5() { return cComponent_reference__function_callParserRuleCall_5; }

		//"der" function_call
		public Group getGroup_6() { return cGroup_6; }

		//"der"
		public Keyword getDerKeyword_6_0() { return cDerKeyword_6_0; }

		//function_call
		public RuleCall getFunction_callParserRuleCall_6_1() { return cFunction_callParserRuleCall_6_1; }

		//LPAR expression_list RPAR
		public Group getGroup_7() { return cGroup_7; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_7_0() { return cLPARTerminalRuleCall_7_0; }

		//expression_list
		public RuleCall getExpression_listParserRuleCall_7_1() { return cExpression_listParserRuleCall_7_1; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_7_2() { return cRPARTerminalRuleCall_7_2; }

		//LBRACK expression_list (SEMICOLON expression_list)* RBRACK
		public Group getGroup_8() { return cGroup_8; }

		//LBRACK
		public RuleCall getLBRACKTerminalRuleCall_8_0() { return cLBRACKTerminalRuleCall_8_0; }

		//expression_list
		public RuleCall getExpression_listParserRuleCall_8_1() { return cExpression_listParserRuleCall_8_1; }

		//(SEMICOLON expression_list)*
		public Group getGroup_8_2() { return cGroup_8_2; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_8_2_0() { return cSEMICOLONTerminalRuleCall_8_2_0; }

		//expression_list
		public RuleCall getExpression_listParserRuleCall_8_2_1() { return cExpression_listParserRuleCall_8_2_1; }

		//RBRACK
		public RuleCall getRBRACKTerminalRuleCall_8_3() { return cRBRACKTerminalRuleCall_8_3; }

		//LBRACE for_or_expression_list RBRACE
		public Group getGroup_9() { return cGroup_9; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_9_0() { return cLBRACETerminalRuleCall_9_0; }

		//for_or_expression_list
		public RuleCall getFor_or_expression_listParserRuleCall_9_1() { return cFor_or_expression_listParserRuleCall_9_1; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_9_2() { return cRBRACETerminalRuleCall_9_2; }

		//"end"
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}

	public class Component_reference__function_callElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "component_reference__function_call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cComponent_referenceParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cFunction_callParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cInitialKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRPARTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//component_reference__function_call returns ecore::EString:
		//  component_reference function_call?|"initial" LPAR RPAR;
		public ParserRule getRule() { return rule; }

		//component_reference function_call?|"initial" LPAR RPAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//component_reference function_call?
		public Group getGroup_0() { return cGroup_0; }

		//component_reference
		public RuleCall getComponent_referenceParserRuleCall_0_0() { return cComponent_referenceParserRuleCall_0_0; }

		//function_call?
		public RuleCall getFunction_callParserRuleCall_0_1() { return cFunction_callParserRuleCall_0_1; }

		//"initial" LPAR RPAR
		public Group getGroup_1() { return cGroup_1; }

		//"initial"
		public Keyword getInitialKeyword_1_0() { return cInitialKeyword_1_0; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_1_1() { return cLPARTerminalRuleCall_1_1; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_1_2() { return cRPARTerminalRuleCall_1_2; }
	}

	public class Name_pathElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "name_path");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cName_pathParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//name_path returns ecore::EString:
		//  IDENT|IDENT DOT name_path; 
		//
		//  
		//	//{ LA(2)!=DOT }?
		public ParserRule getRule() { return rule; }

		//IDENT|IDENT DOT name_path 
		//
		//  
		//	//{ LA(2)!=DOT }?
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENT 
		//	//{ LA(2)!=DOT }?
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//IDENT DOT name_path 
		//	//{ LA(2)!=DOT }?
		public Group getGroup_1() { return cGroup_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0() { return cIDENTTerminalRuleCall_1_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_1() { return cDOTTerminalRuleCall_1_1; }

		//name_path
		public RuleCall getName_pathParserRuleCall_1_2() { return cName_pathParserRuleCall_1_2; }
	}

	public class Name_path_starElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "name_path_star");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSTAR_EWTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cName_path_starParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//name_path_star returns ecore::EString:
		//  IDENT STAR_EW?|IDENT DOT name_path_star; 
		//
		// 
		//	
		//	//{ LA(2) != DOT }?
		public ParserRule getRule() { return rule; }

		//IDENT STAR_EW?|IDENT DOT name_path_star 
		//
		// 
		//	
		//	//{ LA(2) != DOT }?
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENT STAR_EW? 
		//	//{ LA(2) != DOT }?
		public Group getGroup_0() { return cGroup_0; }

		//IDENT 
		//	//{ LA(2) != DOT }?
		public RuleCall getIDENTTerminalRuleCall_0_0() { return cIDENTTerminalRuleCall_0_0; }

		//STAR_EW?
		public RuleCall getSTAR_EWTerminalRuleCall_0_1() { return cSTAR_EWTerminalRuleCall_0_1; }

		//IDENT DOT name_path_star 
		//	//{ LA(2) != DOT }?
		public Group getGroup_1() { return cGroup_1; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_1_0() { return cIDENTTerminalRuleCall_1_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_1() { return cDOTTerminalRuleCall_1_1; }

		//name_path_star
		public RuleCall getName_path_starParserRuleCall_1_2() { return cName_path_starParserRuleCall_1_2; }
	}

	public class Component_referenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "component_reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArray_subscriptsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cComponent_referenceParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//component_reference returns ecore::EString:
		//  IDENT array_subscripts? (DOT component_reference)?; 
		//
		//  
		//	                
		//	//| WILD
		public ParserRule getRule() { return rule; }

		//IDENT array_subscripts? (DOT component_reference)? 
		//	                
		//	//| WILD
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//array_subscripts?
		public RuleCall getArray_subscriptsParserRuleCall_1() { return cArray_subscriptsParserRuleCall_1; }

		//(DOT component_reference)?
		public Group getGroup_2() { return cGroup_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }

		//component_reference
		public RuleCall getComponent_referenceParserRuleCall_2_1() { return cComponent_referenceParserRuleCall_2_1; }
	}

	public class Function_callElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFunction_argumentsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//function_call returns ecore::EString:
		//  LPAR function_arguments RPAR;
		public ParserRule getRule() { return rule; }

		//LPAR function_arguments RPAR
		public Group getGroup() { return cGroup; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_0() { return cLPARTerminalRuleCall_0; }

		//function_arguments
		public RuleCall getFunction_argumentsParserRuleCall_1() { return cFunction_argumentsParserRuleCall_1; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_2() { return cRPARTerminalRuleCall_2; }
	}

	public class Function_argumentsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFor_or_expression_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNamed_argumentsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//function_arguments returns ecore::EString:
		//  for_or_expression_list? named_arguments?;
		public ParserRule getRule() { return rule; }

		//for_or_expression_list? named_arguments?
		public Group getGroup() { return cGroup; }

		//for_or_expression_list?
		public RuleCall getFor_or_expression_listParserRuleCall_0() { return cFor_or_expression_listParserRuleCall_0; }

		//named_arguments?
		public RuleCall getNamed_argumentsParserRuleCall_1() { return cNamed_argumentsParserRuleCall_1; }
	}

	public class For_or_expression_listElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_or_expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cFor_or_expression_list2ParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cForKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cFor_indicesParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//for_or_expression_list returns ecore::EString:
		//  expression (COMMA for_or_expression_list2?|"for" for_indices)?; 
		//
		//  
		//	//({LA(1)==IDENT && LA(2) == EQUALS || LA(1) == RPAR || LA(1) == RBRACE}?|
		public ParserRule getRule() { return rule; }

		//expression (COMMA for_or_expression_list2?|"for" for_indices)?
		public Group getGroup() { return cGroup; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//(COMMA for_or_expression_list2?|"for" for_indices)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//COMMA for_or_expression_list2?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_0() { return cCOMMATerminalRuleCall_1_0_0; }

		//for_or_expression_list2?
		public RuleCall getFor_or_expression_list2ParserRuleCall_1_0_1() { return cFor_or_expression_list2ParserRuleCall_1_0_1; }

		//"for" for_indices
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"for"
		public Keyword getForKeyword_1_1_0() { return cForKeyword_1_1_0; }

		//for_indices
		public RuleCall getFor_indicesParserRuleCall_1_1_1() { return cFor_indicesParserRuleCall_1_1_1; }
	}

	public class For_or_expression_list2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_or_expression_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFor_or_expression_list2ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//for_or_expression_list2 returns ecore::EString:
		//  expression (COMMA for_or_expression_list2)?; 
		//
		//  
		//	// {LA(2) == EQUALS}? |
		public ParserRule getRule() { return rule; }

		//expression (COMMA for_or_expression_list2)? 
		//	// {LA(2) == EQUALS}? |
		public Group getGroup() { return cGroup; }

		//expression 
		//	// {LA(2) == EQUALS}? |
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//(COMMA for_or_expression_list2)?
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//for_or_expression_list2
		public RuleCall getFor_or_expression_list2ParserRuleCall_1_1() { return cFor_or_expression_list2ParserRuleCall_1_1; }
	}

	public class Named_argumentsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "named_arguments");
		private final RuleCall cNamed_arguments2ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//named_arguments returns ecore::EString:
		//  named_arguments2;
		public ParserRule getRule() { return rule; }

		//named_arguments2
		public RuleCall getNamed_arguments2ParserRuleCall() { return cNamed_arguments2ParserRuleCall; }
	}

	public class Named_arguments2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "named_arguments2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNamed_argumentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNamed_argumentParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//named_arguments2 returns ecore::EString:
		//  named_argument (COMMA named_argument)*;
		public ParserRule getRule() { return rule; }

		//named_argument (COMMA named_argument)*
		public Group getGroup() { return cGroup; }

		//named_argument
		public RuleCall getNamed_argumentParserRuleCall_0() { return cNamed_argumentParserRuleCall_0; }

		//(COMMA named_argument)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//named_argument
		public RuleCall getNamed_argumentParserRuleCall_1_1() { return cNamed_argumentParserRuleCall_1_1; }
	}

	public class Named_argumentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "named_argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//named_argument returns ecore::EString:
		//  IDENT EQUALS expression;
		public ParserRule getRule() { return rule; }

		//IDENT EQUALS expression
		public Group getGroup() { return cGroup; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1() { return cEQUALSTerminalRuleCall_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}

	public class Expression_listElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_list");
		private final RuleCall cExpression_list2ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//expression_list returns ecore::EString:
		//  expression_list2;
		public ParserRule getRule() { return rule; }

		//expression_list2
		public RuleCall getExpression_list2ParserRuleCall() { return cExpression_list2ParserRuleCall; }
	}

	public class Expression_list2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExpression_list2ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expression_list2 returns ecore::EString:
		//  expression (COMMA expression_list2)?;
		public ParserRule getRule() { return rule; }

		//expression (COMMA expression_list2)?
		public Group getGroup() { return cGroup; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//(COMMA expression_list2)?
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//expression_list2
		public RuleCall getExpression_list2ParserRuleCall_1_1() { return cExpression_list2ParserRuleCall_1_1; }
	}

	public class Array_subscriptsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "array_subscripts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLBRACKTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSubscriptParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSubscriptParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cRBRACKTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//array_subscripts returns ecore::EString:
		//  LBRACK subscript (COMMA subscript)* RBRACK;
		public ParserRule getRule() { return rule; }

		//LBRACK subscript (COMMA subscript)* RBRACK
		public Group getGroup() { return cGroup; }

		//LBRACK
		public RuleCall getLBRACKTerminalRuleCall_0() { return cLBRACKTerminalRuleCall_0; }

		//subscript
		public RuleCall getSubscriptParserRuleCall_1() { return cSubscriptParserRuleCall_1; }

		//(COMMA subscript)*
		public Group getGroup_2() { return cGroup_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }

		//subscript
		public RuleCall getSubscriptParserRuleCall_2_1() { return cSubscriptParserRuleCall_2_1; }

		//RBRACK
		public RuleCall getRBRACKTerminalRuleCall_3() { return cRBRACKTerminalRuleCall_3; }
	}

	public class SubscriptElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "subscript");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//subscript returns ecore::EString:
		//  expression|COLON;
		public ParserRule getRule() { return rule; }

		//expression|COLON
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }
	}

	public class CommentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStringString_commentParserRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		
		//comment returns Comment:
		//  string=string_comment? annotation=annotation?;
		public ParserRule getRule() { return rule; }

		//string=string_comment? annotation=annotation?
		public Group getGroup() { return cGroup; }

		//string=string_comment?
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }

		//string_comment
		public RuleCall getStringString_commentParserRuleCall_0_0() { return cStringString_commentParserRuleCall_0_0; }

		//annotation=annotation?
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_1_0() { return cAnnotationAnnotationParserRuleCall_1_0; }
	}

	public class String_commentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "string_comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//string_comment returns ecore::EString:
		//  STRING (PLUS STRING)*;
		public ParserRule getRule() { return rule; }

		//STRING (PLUS STRING)*
		public Group getGroup() { return cGroup; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//(PLUS STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0() { return cPLUSTerminalRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}

	public class AnnotationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cClass_modificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//annotation returns Annotation:
		//  "annotation" class_modification; 
		//
		//    
		//	  
		//	
		//
		//
		//
		/// *------------------------------------------------------------------
		// * LEXER RULES
		// *------------------------------------------------------------------* /
		//
		/// * Keywords * / 
		//
		////terminal T_ALGORITHM	: 'algorithm'	;
		////terminal T_AND		: 'and'		;
		////terminal T_ANNOTATION	: 'annotation'	;
		////terminal BLOCK		: 'block'	;
		////terminal CODE		: 'Code'	;
		////terminal   CLASS		: 'class'	;
		/// *
		//terminal CONNECT	: 'connect'	;
		//terminal CONNECTOR	: 'connector'	;
		//terminal   CONSTANT	: 'constant'	;
		//terminal   DISCRETE	: 'discrete'	;
		//terminal   DER           : 'der' 	;
		//terminal   EACH		: 'each'	;
		//terminal   ELSE		: 'else'	;
		//terminal   ELSEIF	: 'elseif'	;
		//terminal   ELSEWHEN	: 'elsewhen'	;
		//terminal   T_END		: 'end'		;
		//terminal   ENUMERATION	: 'enumeration'	;
		//terminal   EQUATION	: 'equation'	;
		//terminal   ENCAPSULATED	: 'encapsulated';
		//terminal   EXPANDABLE	: 'expandable'  ;
		//terminal   EXTENDS	: 'extends'     ;
		//terminal   CONSTRAINEDBY : 'constrainedby' ;
		//terminal   EXTERNAL	: 'external'	;
		//terminal   T_FALSE	: 'false'	;
		////terminal   FINAL		: 'final'	;
		//terminal   FLOW		: 'flow'	;
		//terminal   FOR		: 'for'		;
		//terminal   FUNCTION	: 'function'	;
		//terminal   IF		: 'if'		;
		//terminal   IMPORT	: 'import'	;
		//terminal   T_IN		: 'in'		;
		//terminal   INITIAL	: 'initial'	;
		//terminal   INNER		: 'inner'	;
		//terminal   T_INPUT	: 'input'	;
		//terminal   LOOP		: 'loop'	;
		//terminal   MODEL		: 'model'	;
		//terminal   T_NOT		: 'not'		;
		//terminal   T_OUTER	: 'outer'	;
		//terminal   OVERLOAD	: 'overload'	;
		//terminal   T_OR		: 'or'		;
		//terminal   T_OUTPUT	: 'output'	;
		//terminal   PACKAGE	: 'package'	;
		//terminal   PARAMETER	: 'parameter'	;
		//terminal   PARTIAL	: 'partial'	;
		//terminal   PROTECTED	: 'protected'	;
		//terminal   PUBLIC	: 'public'	;
		//terminal   RECORD	: 'record'	;
		//terminal   REDECLARE	: 'redeclare'	;
		//terminal   REPLACEABLE	: 'replaceable'	;
		//terminal   RESULTS	: 'results'	;
		//terminal   THEN		: 'then'	;
		//terminal   T_TRUE	: 'true'	;
		//terminal   TYPE		: 'type'	;
		//terminal   WHEN		: 'when'	;
		//terminal   WHILE		: 'while'	;
		//terminal   WITHIN	: 'within' 	;
		//terminal   RETURN	: 'return'  ;
		//terminal   BREAK		: 'break'	;
		//terminal   STREAM	: 'stream'	; / * for Modelica 3.1 stream connectors * /	
		//
		//  // ---------
		//   // Operators
		//   // ---------
		public ParserRule getRule() { return rule; }

		//"annotation" class_modification
		public Group getGroup() { return cGroup; }

		//"annotation"
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }

		//class_modification
		public RuleCall getClass_modificationParserRuleCall_1() { return cClass_modificationParserRuleCall_1; }
	}
	
	
	public class ClassTypeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ClassType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCLASSClassKeyword_0_0 = (Keyword)cCLASSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMODELEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMODELModelKeyword_1_0 = (Keyword)cMODELEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRECORDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRECORDRecordKeyword_2_0 = (Keyword)cRECORDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBLOCKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBLOCKBlockKeyword_3_0 = (Keyword)cBLOCKEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCONNECTOREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCONNECTORConnectorKeyword_4_0 = (Keyword)cCONNECTOREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTYPEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTYPETypeKeyword_5_0 = (Keyword)cTYPEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPACKAGEPackageKeyword_6_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFUNCTIONEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFUNCTIONFunctionKeyword_7_0 = (Keyword)cFUNCTIONEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ClassType:
		//  CLASS="class" | MODEL="model" | RECORD="record" | BLOCK="block" | CONNECTOR="connector" |
		//  TYPE="type" | PACKAGE="package" | FUNCTION="function";
		public EnumRule getRule() { return rule; }

		//CLASS="class" | MODEL="model" | RECORD="record" | BLOCK="block" | CONNECTOR="connector" |
		//TYPE="type" | PACKAGE="package" | FUNCTION="function"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CLASS="class"
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_0() { return cCLASSEnumLiteralDeclaration_0; }

		//"class"
		public Keyword getCLASSClassKeyword_0_0() { return cCLASSClassKeyword_0_0; }

		//MODEL="model"
		public EnumLiteralDeclaration getMODELEnumLiteralDeclaration_1() { return cMODELEnumLiteralDeclaration_1; }

		//"model"
		public Keyword getMODELModelKeyword_1_0() { return cMODELModelKeyword_1_0; }

		//RECORD="record"
		public EnumLiteralDeclaration getRECORDEnumLiteralDeclaration_2() { return cRECORDEnumLiteralDeclaration_2; }

		//"record"
		public Keyword getRECORDRecordKeyword_2_0() { return cRECORDRecordKeyword_2_0; }

		//BLOCK="block"
		public EnumLiteralDeclaration getBLOCKEnumLiteralDeclaration_3() { return cBLOCKEnumLiteralDeclaration_3; }

		//"block"
		public Keyword getBLOCKBlockKeyword_3_0() { return cBLOCKBlockKeyword_3_0; }

		//CONNECTOR="connector"
		public EnumLiteralDeclaration getCONNECTOREnumLiteralDeclaration_4() { return cCONNECTOREnumLiteralDeclaration_4; }

		//"connector"
		public Keyword getCONNECTORConnectorKeyword_4_0() { return cCONNECTORConnectorKeyword_4_0; }

		//TYPE="type"
		public EnumLiteralDeclaration getTYPEEnumLiteralDeclaration_5() { return cTYPEEnumLiteralDeclaration_5; }

		//"type"
		public Keyword getTYPETypeKeyword_5_0() { return cTYPETypeKeyword_5_0; }

		//PACKAGE="package"
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_6() { return cPACKAGEEnumLiteralDeclaration_6; }

		//"package"
		public Keyword getPACKAGEPackageKeyword_6_0() { return cPACKAGEPackageKeyword_6_0; }

		//FUNCTION="function"
		public EnumLiteralDeclaration getFUNCTIONEnumLiteralDeclaration_7() { return cFUNCTIONEnumLiteralDeclaration_7; }

		//"function"
		public Keyword getFUNCTIONFunctionKeyword_7_0() { return cFUNCTIONFunctionKeyword_7_0; }
	}
	
	private StorageUnitElements pStorageUnit;
	private EntityDefinitionElements pEntityDefinition;
	private ClassDefinitionElements pClassDefinition;
	private ClassTypeElements unknownRuleClassType;
	private PartialDerivativeElements pPartialDerivative;
	private ClassModificationElements pClassModification;
	private ClassOverloadingElements pClassOverloading;
	private EnumerationElements pEnumeration;
	private Ident_listElements pIdent_list;
	private Name_listElements pName_list;
	private External_clauseElements pExternal_clause;
	private External_function_callElements pExternal_function_call;
	private ElementListElements pElementList;
	private ElementList2Elements pElementList2;
	private ClassElementElements pClassElement;
	private ReplaceableElementClauseElements pReplaceableElementClause;
	private Import_clauseElements pImport_clause;
	private Extends_clauseElements pExtends_clause;
	private Constraining_clauseElements pConstraining_clause;
	private Component_clauseElements pComponent_clause;
	private Type_prefixElements pType_prefix;
	private Type_specifierElements pType_specifier;
	private Component_declarationElements pComponent_declaration;
	private ModificationElements pModification;
	private SimpleModificationElements pSimpleModification;
	private Class_modificationElements pClass_modification;
	private ArgumentElements pArgument;
	private ElementModificationElements pElementModification;
	private ElementRedeclarationElements pElementRedeclaration;
	private ElementReplaceableClauseElements pElementReplaceableClause;
	private ElementComponentClauseElements pElementComponentClause;
	private Equation_rule_clauseElements pEquation_rule_clause;
	private Algorithm_clauseElements pAlgorithm_clause;
	private Initial_equation_rule_clauseElements pInitial_equation_rule_clause;
	private Initial_algorithm_clauseElements pInitial_algorithm_clause;
	private Equation_ruleElements pEquation_rule;
	private AlgorithmElements pAlgorithm;
	private Assign_clause_aElements pAssign_clause_a;
	private Equality_equation_ruleElements pEquality_equation_rule;
	private Conditional_equation_rule_eElements pConditional_equation_rule_e;
	private Conditional_equation_rule_aElements pConditional_equation_rule_a;
	private For_clause_eElements pFor_clause_e;
	private For_clause_aElements pFor_clause_a;
	private While_clauseElements pWhile_clause;
	private When_clause_eElements pWhen_clause_e;
	private Else_when_eElements pElse_when_e;
	private When_clause_aElements pWhen_clause_a;
	private Else_when_aElements pElse_when_a;
	private Equation_rule_elseifElements pEquation_rule_elseif;
	private Algorithm_elseifElements pAlgorithm_elseif;
	private Connect_clauseElements pConnect_clause;
	private Connector_refElements pConnector_ref;
	private Connector_ref_2Elements pConnector_ref_2;
	private ExpressionElements pExpression;
	private Expression_or_emptyElements pExpression_or_empty;
	private If_expressionElements pIf_expression;
	private Elseif_expressionElements pElseif_expression;
	private For_indicesElements pFor_indices;
	private For_indexElements pFor_index;
	private Simple_expressionElements pSimple_expression;
	private Simple_exprElements pSimple_expr;
	private Logical_expressionElements pLogical_expression;
	private Logical_termElements pLogical_term;
	private Logical_factorElements pLogical_factor;
	private RelationElements pRelation;
	private Arithmetic_expressionElements pArithmetic_expression;
	private Unary_arithmetic_expressionElements pUnary_arithmetic_expression;
	private TermElements pTerm;
	private FactorElements pFactor;
	private PrimaryElements pPrimary;
	private Component_reference__function_callElements pComponent_reference__function_call;
	private Name_pathElements pName_path;
	private Name_path_starElements pName_path_star;
	private Component_referenceElements pComponent_reference;
	private Function_callElements pFunction_call;
	private Function_argumentsElements pFunction_arguments;
	private For_or_expression_listElements pFor_or_expression_list;
	private For_or_expression_list2Elements pFor_or_expression_list2;
	private Named_argumentsElements pNamed_arguments;
	private Named_arguments2Elements pNamed_arguments2;
	private Named_argumentElements pNamed_argument;
	private Expression_listElements pExpression_list;
	private Expression_list2Elements pExpression_list2;
	private Array_subscriptsElements pArray_subscripts;
	private SubscriptElements pSubscript;
	private CommentElements pComment;
	private String_commentElements pString_comment;
	private AnnotationElements pAnnotation;
	private TerminalRule tDOT;
	private TerminalRule tLPAR;
	private TerminalRule tRPAR;
	private TerminalRule tLBRACK;
	private TerminalRule tRBRACK;
	private TerminalRule tLBRACE;
	private TerminalRule tRBRACE;
	private TerminalRule tEQUALS;
	private TerminalRule tASSIGN;
	private TerminalRule tCOMMA;
	private TerminalRule tCOLON;
	private TerminalRule tSEMICOLON;
	private TerminalRule tPLUS_EW;
	private TerminalRule tMINUS_EW;
	private TerminalRule tSTAR_EW;
	private TerminalRule tSLASH_EW;
	private TerminalRule tPOWER_EW;
	private TerminalRule tSTAR;
	private TerminalRule tMINUS;
	private TerminalRule tPLUS;
	private TerminalRule tLESS;
	private TerminalRule tLESSEQ;
	private TerminalRule tLESSGT;
	private TerminalRule tGREATER;
	private TerminalRule tGREATEREQ;
	private TerminalRule tEQEQ;
	private TerminalRule tPOWER;
	private TerminalRule tSLASH;
	private TerminalRule tUNSIGNED_REAL;
	private TerminalRule tUNSIGNED_INTEGER;
	private TerminalRule tIDENT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModelicaBaseGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StorageUnit:
	//  ("within" name_path? SEMICOLON)? ("final"? classDefinition+=ClassDefinition ";")*; 
	//
	/// *
	// * Copyright (c) 2009 - currentYear, Adrian Pop [adrpo@ida.liu.se] 
	// * All rights reserved.
	// * /
	//
	//  
	//
	//
	/// *------------------------------------------------------------------
	// * PARSER RULES
	// *------------------------------------------------------------------* /
	public StorageUnitElements getStorageUnitAccess() {
		return (pStorageUnit != null) ? pStorageUnit : (pStorageUnit = new StorageUnitElements());
	}
	
	public ParserRule getStorageUnitRule() {
		return getStorageUnitAccess().getRule();
	}

	//EntityDefinition:
	//  ClassDefinition|PartialDerivative|ClassModification|ClassOverloading|Enumeration
	//;
	public EntityDefinitionElements getEntityDefinitionAccess() {
		return (pEntityDefinition != null) ? pEntityDefinition : (pEntityDefinition = new EntityDefinitionElements());
	}
	
	public ParserRule getEntityDefinitionRule() {
		return getEntityDefinitionAccess().getRule();
	}

	//ClassDefinition:
	//  encapsulated?="encapsulated"? partial?="partial"? expandable?="expandable"?
	//  classType=ClassType (name=IDENT comment=string_comment?|"extends" IDENT modification
	//  =class_modification? string_comment?) elemList+=ElementList (elemList+=ElementList2
	//  |initialEquationClauses+=initial_equation_rule_clause|initialAlgorithmClauses+=
	//  initial_algorithm_clause|equationClauses+=equation_rule_clause|algorithmClauses
	//  +=algorithm_clause)* extClause=external_clause? "end" IDENT; 
	//
	//
	//	     
	//	 
	//	  
	//            
	//    
	//		 
	//		  
	//		  
	//		  
	//		  
	//	
	//	    
	//      
	//	//| SUBTYPEOF type_specifier
	public ClassDefinitionElements getClassDefinitionAccess() {
		return (pClassDefinition != null) ? pClassDefinition : (pClassDefinition = new ClassDefinitionElements());
	}
	
	public ParserRule getClassDefinitionRule() {
		return getClassDefinitionAccess().getRule();
	}

	//enum ClassType:
	//  CLASS="class" | MODEL="model" | RECORD="record" | BLOCK="block" | CONNECTOR="connector" |
	//  TYPE="type" | PACKAGE="package" | FUNCTION="function";
	public ClassTypeElements getClassTypeAccess() {
		return (unknownRuleClassType != null) ? unknownRuleClassType : (unknownRuleClassType = new ClassTypeElements());
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}

	//PartialDerivative:
	//  "function" name=IDENT EQUALS "der" "(" name_path "," ident_list ")" comment=comment;
	public PartialDerivativeElements getPartialDerivativeAccess() {
		return (pPartialDerivative != null) ? pPartialDerivative : (pPartialDerivative = new PartialDerivativeElements());
	}
	
	public ParserRule getPartialDerivativeRule() {
		return getPartialDerivativeAccess().getRule();
	}

	//ClassModification:
	//  classType=ClassType name=IDENT EQUALS type_prefix typeSpecifier=type_specifier
	//  modification=class_modification? comment=comment;
	public ClassModificationElements getClassModificationAccess() {
		return (pClassModification != null) ? pClassModification : (pClassModification = new ClassModificationElements());
	}
	
	public ParserRule getClassModificationRule() {
		return getClassModificationAccess().getRule();
	}

	//ClassOverloading:
	//  classType=ClassType name=IDENT EQUALS "overload" "(" name_list ")" comment=comment;
	public ClassOverloadingElements getClassOverloadingAccess() {
		return (pClassOverloading != null) ? pClassOverloading : (pClassOverloading = new ClassOverloadingElements());
	}
	
	public ParserRule getClassOverloadingRule() {
		return getClassOverloadingAccess().getRule();
	}

	//Enumeration:
	//  classType=ClassType name=IDENT EQUALS "enumeration" LPAR (ident+=IDENT enumComments+=
	//  comment (COMMA ident+=IDENT enumComments+=comment)*|COLON) RPAR comment=comment;
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//ident_list returns ecore::EString:
	//  IDENT (COMMA IDENT)*;
	public Ident_listElements getIdent_listAccess() {
		return (pIdent_list != null) ? pIdent_list : (pIdent_list = new Ident_listElements());
	}
	
	public ParserRule getIdent_listRule() {
		return getIdent_listAccess().getRule();
	}

	//name_list returns ecore::EString:
	//  name_path ("," name_path)*;
	public Name_listElements getName_listAccess() {
		return (pName_list != null) ? pName_list : (pName_list = new Name_listElements());
	}
	
	public ParserRule getName_listRule() {
		return getName_listAccess().getRule();
	}

	//external_clause returns ExternalClause:
	//  "external" languageSpecification=STRING? external_function_call? annotation=
	//  annotation? SEMICOLON (extAnnotation=annotation SEMICOLON)?;
	public External_clauseElements getExternal_clauseAccess() {
		return (pExternal_clause != null) ? pExternal_clause : (pExternal_clause = new External_clauseElements());
	}
	
	public ParserRule getExternal_clauseRule() {
		return getExternal_clauseAccess().getRule();
	}

	//external_function_call returns ecore::EString:
	//  (component_reference EQUALS)? IDENT LPAR expression_list? RPAR;
	public External_function_callElements getExternal_function_callAccess() {
		return (pExternal_function_call != null) ? pExternal_function_call : (pExternal_function_call = new External_function_callElements());
	}
	
	public ParserRule getExternal_function_callRule() {
		return getExternal_function_callAccess().getRule();
	}

	//ElementList:
	//  ((elements+=ClassElement|annotations+=annotation) SEMICOLON)*;
	public ElementListElements getElementListAccess() {
		return (pElementList != null) ? pElementList : (pElementList = new ElementListElements());
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}

	//ElementList2 returns ElementList:
	//  "public" {PublicElementList} ((elements+=ClassElement|annotations+=annotation)
	//  SEMICOLON)*|"protected" {ProtectesElementList} ((elements+=ClassElement|
	//  annotations+=annotation) SEMICOLON)*;
	public ElementList2Elements getElementList2Access() {
		return (pElementList2 != null) ? pElementList2 : (pElementList2 = new ElementList2Elements());
	}
	
	public ParserRule getElementList2Rule() {
		return getElementList2Access().getRule();
	}

	//ClassElement:
	//  import_clause|extends_clause|"redeclare"? "final"? "inner"? "outer"? ((
	//  ClassDefinition|component_clause)|ReplaceableElementClause); 
	//
	//
	//
	//	  
	//	  
	//	//| defineunit_clause
	public ClassElementElements getClassElementAccess() {
		return (pClassElement != null) ? pClassElement : (pClassElement = new ClassElementElements());
	}
	
	public ParserRule getClassElementRule() {
		return getClassElementAccess().getRule();
	}

	//ReplaceableElementClause:
	//  "replaceable" entity=( ClassDefinition | component_clause ) constrain=
	//  constraining_clause?;
	public ReplaceableElementClauseElements getReplaceableElementClauseAccess() {
		return (pReplaceableElementClause != null) ? pReplaceableElementClause : (pReplaceableElementClause = new ReplaceableElementClauseElements());
	}
	
	public ParserRule getReplaceableElementClauseRule() {
		return getReplaceableElementClauseAccess().getRule();
	}

	//import_clause returns ImportClause:
	//  "import" (asName=IDENT EQUALS name=name_path|name=name_path_star) comment=comment; 
	//
	//    
	//	            
	//	
	//
	/// *
	//defineunit_clause :
	//	DEFINEUNIT IDENT (LPAR named_arguments RPAR)?		
	//	;
	// * /
	//
	//
	/// *
	// * 2.2.3 Extends
	// * /
	//
	//// Note that this is a minor modification of the standard by
	//// allowing the comment.
	public Import_clauseElements getImport_clauseAccess() {
		return (pImport_clause != null) ? pImport_clause : (pImport_clause = new Import_clauseElements());
	}
	
	public ParserRule getImport_clauseRule() {
		return getImport_clauseAccess().getRule();
	}

	//extends_clause returns ExtendsClause:
	//  "extends" baseClass=name_path modification=class_modification? annotation=
	//  annotation?; 
	//
	/// *
	//defineunit_clause :
	//	DEFINEUNIT IDENT (LPAR named_arguments RPAR)?		
	//	;
	// * /
	//
	//
	/// *
	// * 2.2.3 Extends
	// * /
	//
	//// Note that this is a minor modification of the standard by
	//// allowing the comment.
	public Extends_clauseElements getExtends_clauseAccess() {
		return (pExtends_clause != null) ? pExtends_clause : (pExtends_clause = new Extends_clauseElements());
	}
	
	public ParserRule getExtends_clauseRule() {
		return getExtends_clauseAccess().getRule();
	}

	//constraining_clause returns ConstrainingClause:
	//  ("extends" name=name_path modification=class_modification?|"constrainedby" name=
	//  name_path modification=class_modification?) comment=comment; 
	//
	//    
	//	      
	//	        
	//	  
	//	
	//
	/// *
	// * 2.2.4 Component clause
	// * /
	public Constraining_clauseElements getConstraining_clauseAccess() {
		return (pConstraining_clause != null) ? pConstraining_clause : (pConstraining_clause = new Constraining_clauseElements());
	}
	
	public ParserRule getConstraining_clauseRule() {
		return getConstraining_clauseAccess().getRule();
	}

	//component_clause returns ComponentClause:
	//  typePrefix=type_prefix typeSpecifier=type_specifier declarations+=
	//  component_declaration (COMMA declarations+=component_declaration)*; 
	//
	/// *
	// * 2.2.4 Component clause
	// * /
	public Component_clauseElements getComponent_clauseAccess() {
		return (pComponent_clause != null) ? pComponent_clause : (pComponent_clause = new Component_clauseElements());
	}
	
	public ParserRule getComponent_clauseRule() {
		return getComponent_clauseAccess().getRule();
	}

	//type_prefix returns ecore::EString:
	//  ("flow"|"stream")? ("discrete"|"parameter"|"constant")? ("input"|"output")?;
	public Type_prefixElements getType_prefixAccess() {
		return (pType_prefix != null) ? pType_prefix : (pType_prefix = new Type_prefixElements());
	}
	
	public ParserRule getType_prefixRule() {
		return getType_prefixAccess().getRule();
	}

	//type_specifier returns TypeSpecifier:
	//  name=name_path subscripts=array_subscripts?; 
	//
	//    
	//	
	//	// TODO MML expr?
	//	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
	public Type_specifierElements getType_specifierAccess() {
		return (pType_specifier != null) ? pType_specifier : (pType_specifier = new Type_specifierElements());
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}

	//component_declaration returns ComponentDeclaration:
	//  IDENT subscripts=array_subscripts? modification=modification? ("if" condition=
	//  expression)? comment=comment; 
	//
	//    
	//	          
	//	
	//
	/// *
	// * 2.2.5 Modification
	// * /
	public Component_declarationElements getComponent_declarationAccess() {
		return (pComponent_declaration != null) ? pComponent_declaration : (pComponent_declaration = new Component_declarationElements());
	}
	
	public ParserRule getComponent_declarationRule() {
		return getComponent_declarationAccess().getRule();
	}

	//modification returns Modification:
	//  class_modification|SimpleModification; 
	//
	/// *
	// * 2.2.5 Modification
	// * /
	public ModificationElements getModificationAccess() {
		return (pModification != null) ? pModification : (pModification = new ModificationElements());
	}
	
	public ParserRule getModificationRule() {
		return getModificationAccess().getRule();
	}

	//SimpleModification:
	//  EQUALS expression=expression|ASSIGN expression=expression;
	public SimpleModificationElements getSimpleModificationAccess() {
		return (pSimpleModification != null) ? pSimpleModification : (pSimpleModification = new SimpleModificationElements());
	}
	
	public ParserRule getSimpleModificationRule() {
		return getSimpleModificationAccess().getRule();
	}

	//class_modification returns ClassModification:
	//  LPAR (arguments+=argument (COMMA arguments+=argument)*)? RPAR (EQUALS expression=
	//  expression)?;
	public Class_modificationElements getClass_modificationAccess() {
		return (pClass_modification != null) ? pClass_modification : (pClass_modification = new Class_modificationElements());
	}
	
	public ParserRule getClass_modificationRule() {
		return getClass_modificationAccess().getRule();
	}

	//argument:
	//  "each"? "final"? (ElementModification|ElementReplaceableClause)|
	//  ElementRedeclaration;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ElementModification:
	//  componetRef=component_reference modification=modification? comment=string_comment?
	//;
	public ElementModificationElements getElementModificationAccess() {
		return (pElementModification != null) ? pElementModification : (pElementModification = new ElementModificationElements());
	}
	
	public ParserRule getElementModificationRule() {
		return getElementModificationAccess().getRule();
	}

	//ElementRedeclaration:
	//  "redeclare" "each"? "final"? ((ClassDefinition|ElementComponentClause)|
	//  ElementReplaceableClause);
	public ElementRedeclarationElements getElementRedeclarationAccess() {
		return (pElementRedeclaration != null) ? pElementRedeclaration : (pElementRedeclaration = new ElementRedeclarationElements());
	}
	
	public ParserRule getElementRedeclarationRule() {
		return getElementRedeclarationAccess().getRule();
	}

	//ElementReplaceableClause:
	//  "replaceable" element=( ClassDefinition | ElementComponentClause ) constraint=
	//  constraining_clause?;
	public ElementReplaceableClauseElements getElementReplaceableClauseAccess() {
		return (pElementReplaceableClause != null) ? pElementReplaceableClause : (pElementReplaceableClause = new ElementReplaceableClauseElements());
	}
	
	public ParserRule getElementReplaceableClauseRule() {
		return getElementReplaceableClauseAccess().getRule();
	}

	//ElementComponentClause:
	//  typePrefix=type_prefix typeSpecifier=type_specifier IDENT subscripts=
	//  array_subscripts? modification=modification? comment=comment; 
	//	
	//  
	//	       
	//	  
	//	
	//
	//
	/// *
	// * 2.2.6 Equations
	// * /
	public ElementComponentClauseElements getElementComponentClauseAccess() {
		return (pElementComponentClause != null) ? pElementComponentClause : (pElementComponentClause = new ElementComponentClauseElements());
	}
	
	public ParserRule getElementComponentClauseRule() {
		return getElementComponentClauseAccess().getRule();
	}

	//equation_rule_clause returns EquationClause:
	//  "equation" (equationRules+=equation_rule SEMICOLON|annotations+=annotation
	//  SEMICOLON)+; 
	//
	//
	/// *
	// * 2.2.6 Equations
	// * /
	public Equation_rule_clauseElements getEquation_rule_clauseAccess() {
		return (pEquation_rule_clause != null) ? pEquation_rule_clause : (pEquation_rule_clause = new Equation_rule_clauseElements());
	}
	
	public ParserRule getEquation_rule_clauseRule() {
		return getEquation_rule_clauseAccess().getRule();
	}

	//algorithm_clause:
	//  "algorithm" (algorithmRules+=algorithm SEMICOLON|annotations+=annotation SEMICOLON)
	//  +;
	public Algorithm_clauseElements getAlgorithm_clauseAccess() {
		return (pAlgorithm_clause != null) ? pAlgorithm_clause : (pAlgorithm_clause = new Algorithm_clauseElements());
	}
	
	public ParserRule getAlgorithm_clauseRule() {
		return getAlgorithm_clauseAccess().getRule();
	}

	//initial_equation_rule_clause:
	//  "initial" equation_rule_clause;
	public Initial_equation_rule_clauseElements getInitial_equation_rule_clauseAccess() {
		return (pInitial_equation_rule_clause != null) ? pInitial_equation_rule_clause : (pInitial_equation_rule_clause = new Initial_equation_rule_clauseElements());
	}
	
	public ParserRule getInitial_equation_rule_clauseRule() {
		return getInitial_equation_rule_clauseAccess().getRule();
	}

	//initial_algorithm_clause:
	//  "initial" algorithm_clause;
	public Initial_algorithm_clauseElements getInitial_algorithm_clauseAccess() {
		return (pInitial_algorithm_clause != null) ? pInitial_algorithm_clause : (pInitial_algorithm_clause = new Initial_algorithm_clauseElements());
	}
	
	public ParserRule getInitial_algorithm_clauseRule() {
		return getInitial_algorithm_clauseAccess().getRule();
	}

	//equation_rule:
	//  (equality_equation_rule|conditional_equation_rule_e|for_clause_e|connect_clause|
	//  when_clause_e) comment=comment; 
	//
	//  
	//	  	 
	//	  
	//	  
	//	  
	//	     
	//	//| FAILURE LPAR equation_rule RPAR
	//	 //| EQUALITY LPAR equation_rule RPAR
	public Equation_ruleElements getEquation_ruleAccess() {
		return (pEquation_rule != null) ? pEquation_rule : (pEquation_rule = new Equation_ruleElements());
	}
	
	public ParserRule getEquation_ruleRule() {
		return getEquation_ruleAccess().getRule();
	}

	//algorithm:
	//  (assign_clause_a|conditional_equation_rule_a|for_clause_a|while_clause|
	//  when_clause_a|"break"|"return") comment=comment; 
	//
	//  
	//	  
	//	  
	//	  
	//	  
	//	  
	//	  
	//	  
	//	//| FAILURE LPAR algorithm RPAR
	//	 //| EQUALITY LPAR algorithm RPAR
	public AlgorithmElements getAlgorithmAccess() {
		return (pAlgorithm != null) ? pAlgorithm : (pAlgorithm = new AlgorithmElements());
	}
	
	public ParserRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}

	//assign_clause_a returns ecore::EString:
	//  simple_expression (ASSIGN expression|EQUALS expression)?;
	public Assign_clause_aElements getAssign_clause_aAccess() {
		return (pAssign_clause_a != null) ? pAssign_clause_a : (pAssign_clause_a = new Assign_clause_aElements());
	}
	
	public ParserRule getAssign_clause_aRule() {
		return getAssign_clause_aAccess().getRule();
	}

	//equality_equation_rule returns ecore::EString:
	//  simple_expression (EQUALS expression)?;
	public Equality_equation_ruleElements getEquality_equation_ruleAccess() {
		return (pEquality_equation_rule != null) ? pEquality_equation_rule : (pEquality_equation_rule = new Equality_equation_ruleElements());
	}
	
	public ParserRule getEquality_equation_ruleRule() {
		return getEquality_equation_ruleAccess().getRule();
	}

	//conditional_equation_rule_e returns ConditionalEquationRule:
	//  "if" expression "then" (thenEquationClauses+=equation_rule SEMICOLON)* elseifClauses
	//  +=equation_rule_elseif* ("else" (elseEquationClauses+=equation_rule SEMICOLON)*)?
	//  "end" "if";
	public Conditional_equation_rule_eElements getConditional_equation_rule_eAccess() {
		return (pConditional_equation_rule_e != null) ? pConditional_equation_rule_e : (pConditional_equation_rule_e = new Conditional_equation_rule_eElements());
	}
	
	public ParserRule getConditional_equation_rule_eRule() {
		return getConditional_equation_rule_eAccess().getRule();
	}

	//conditional_equation_rule_a returns ConditionAlgorithmRule:
	//  "if" condition=expression "then" (thenAlgorithmClauses+=algorithm SEMICOLON)*
	//  elseifClauses+=algorithm_elseif* ("else" (elseAlgotithmClauses+=algorithm SEMICOLON
	//  )*)? "end" "if";
	public Conditional_equation_rule_aElements getConditional_equation_rule_aAccess() {
		return (pConditional_equation_rule_a != null) ? pConditional_equation_rule_a : (pConditional_equation_rule_a = new Conditional_equation_rule_aElements());
	}
	
	public ParserRule getConditional_equation_rule_aRule() {
		return getConditional_equation_rule_aAccess().getRule();
	}

	//for_clause_e returns ForEquationClause:
	//  "for" forIndices=for_indices "loop" (equationClauses+=equation_rule SEMICOLON)* "end"
	//  "for";
	public For_clause_eElements getFor_clause_eAccess() {
		return (pFor_clause_e != null) ? pFor_clause_e : (pFor_clause_e = new For_clause_eElements());
	}
	
	public ParserRule getFor_clause_eRule() {
		return getFor_clause_eAccess().getRule();
	}

	//for_clause_a returns ForAlgorithmClause:
	//  "for" forIndices=for_indices "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
	//  "for";
	public For_clause_aElements getFor_clause_aAccess() {
		return (pFor_clause_a != null) ? pFor_clause_a : (pFor_clause_a = new For_clause_aElements());
	}
	
	public ParserRule getFor_clause_aRule() {
		return getFor_clause_aAccess().getRule();
	}

	//while_clause returns WhileClause:
	//  "while" condition=expression "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
	//  "while";
	public While_clauseElements getWhile_clauseAccess() {
		return (pWhile_clause != null) ? pWhile_clause : (pWhile_clause = new While_clauseElements());
	}
	
	public ParserRule getWhile_clauseRule() {
		return getWhile_clauseAccess().getRule();
	}

	//when_clause_e:
	//  "when" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
	//  elseWhenClauses+=else_when_e* "end" "when";
	public When_clause_eElements getWhen_clause_eAccess() {
		return (pWhen_clause_e != null) ? pWhen_clause_e : (pWhen_clause_e = new When_clause_eElements());
	}
	
	public ParserRule getWhen_clause_eRule() {
		return getWhen_clause_eAccess().getRule();
	}

	//else_when_e:
	//  "elsewhen" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON
	//  )*;
	public Else_when_eElements getElse_when_eAccess() {
		return (pElse_when_e != null) ? pElse_when_e : (pElse_when_e = new Else_when_eElements());
	}
	
	public ParserRule getElse_when_eRule() {
		return getElse_when_eAccess().getRule();
	}

	//when_clause_a:
	//  "when" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)*
	//  elseWhenClauses+=else_when_a* "end" "when";
	public When_clause_aElements getWhen_clause_aAccess() {
		return (pWhen_clause_a != null) ? pWhen_clause_a : (pWhen_clause_a = new When_clause_aElements());
	}
	
	public ParserRule getWhen_clause_aRule() {
		return getWhen_clause_aAccess().getRule();
	}

	//else_when_a:
	//  "elsewhen" condition=expression "then" (thenAlgorithmClauses+=equation_rule
	//  SEMICOLON)*;
	public Else_when_aElements getElse_when_aAccess() {
		return (pElse_when_a != null) ? pElse_when_a : (pElse_when_a = new Else_when_aElements());
	}
	
	public ParserRule getElse_when_aRule() {
		return getElse_when_aAccess().getRule();
	}

	//equation_rule_elseif:
	//  "elseif" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
	//;
	public Equation_rule_elseifElements getEquation_rule_elseifAccess() {
		return (pEquation_rule_elseif != null) ? pEquation_rule_elseif : (pEquation_rule_elseif = new Equation_rule_elseifElements());
	}
	
	public ParserRule getEquation_rule_elseifRule() {
		return getEquation_rule_elseifAccess().getRule();
	}

	//algorithm_elseif:
	//  "elseif" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)
	//  *;
	public Algorithm_elseifElements getAlgorithm_elseifAccess() {
		return (pAlgorithm_elseif != null) ? pAlgorithm_elseif : (pAlgorithm_elseif = new Algorithm_elseifElements());
	}
	
	public ParserRule getAlgorithm_elseifRule() {
		return getAlgorithm_elseifAccess().getRule();
	}

	//connect_clause returns ecore::EString:
	//  "connect" LPAR connector_ref COMMA connector_ref RPAR;
	public Connect_clauseElements getConnect_clauseAccess() {
		return (pConnect_clause != null) ? pConnect_clause : (pConnect_clause = new Connect_clauseElements());
	}
	
	public ParserRule getConnect_clauseRule() {
		return getConnect_clauseAccess().getRule();
	}

	//connector_ref returns ecore::EString:
	//  IDENT array_subscripts? (DOT connector_ref_2)?;
	public Connector_refElements getConnector_refAccess() {
		return (pConnector_ref != null) ? pConnector_ref : (pConnector_ref = new Connector_refElements());
	}
	
	public ParserRule getConnector_refRule() {
		return getConnector_refAccess().getRule();
	}

	//connector_ref_2 returns ecore::EString:
	//  IDENT array_subscripts?; 
	//
	//  
	//	      
	//	
	//
	/// *
	// * 2.2.7 Expressions
	// * /
	public Connector_ref_2Elements getConnector_ref_2Access() {
		return (pConnector_ref_2 != null) ? pConnector_ref_2 : (pConnector_ref_2 = new Connector_ref_2Elements());
	}
	
	public ParserRule getConnector_ref_2Rule() {
		return getConnector_ref_2Access().getRule();
	}

	//expression returns ecore::EString:
	//  if_expression|simple_expression; 
	//
	/// *
	// * 2.2.7 Expressions
	// * /
	//  
	//	  
	//	  
	//	//| code_expression
	//	 / *| (MATCHCONTINUE expression_or_empty
	//	   local_clause
	//	   cases
	//	   T_END MATCHCONTINUE)
	//	| (MATCH expression_or_empty
	//	   local_clause
	//	   cases
	//	   T_END MATCH)
	//	   * /
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//expression_or_empty returns ecore::EString:
	//  expression|LPAR RPAR; 
	//
	//  
	//	
	//	    
	//	
	//
	/// *
	//// The element_list is now modified
	//local_clause:
	//	(LOCAL element_list)?
	//	;
	//
	//cases:
	//	(onecase)+ (ELSE string_comment local_clause (EQUATION equation_rule_list_then)?
	//	THEN expression_or_empty SEMICOLON)?
	//	;
	//
	//onecase:
	//	(CASE pattern string_comment local_clause (EQUATION equation_rule_list_then)?
	//	THEN expression_or_empty SEMICOLON)
	//	;
	//
	//pattern:
	//	expression_or_empty
	//	;
	// * /
	public Expression_or_emptyElements getExpression_or_emptyAccess() {
		return (pExpression_or_empty != null) ? pExpression_or_empty : (pExpression_or_empty = new Expression_or_emptyElements());
	}
	
	public ParserRule getExpression_or_emptyRule() {
		return getExpression_or_emptyAccess().getRule();
	}

	//if_expression returns ecore::EString:
	//  "if" expression "then" expression elseif_expression* "else" expression; 
	//
	/// *
	//// The element_list is now modified
	//local_clause:
	//	(LOCAL element_list)?
	//	;
	//
	//cases:
	//	(onecase)+ (ELSE string_comment local_clause (EQUATION equation_rule_list_then)?
	//	THEN expression_or_empty SEMICOLON)?
	//	;
	//
	//onecase:
	//	(CASE pattern string_comment local_clause (EQUATION equation_rule_list_then)?
	//	THEN expression_or_empty SEMICOLON)
	//	;
	//
	//pattern:
	//	expression_or_empty
	//	;
	// * /
	public If_expressionElements getIf_expressionAccess() {
		return (pIf_expression != null) ? pIf_expression : (pIf_expression = new If_expressionElements());
	}
	
	public ParserRule getIf_expressionRule() {
		return getIf_expressionAccess().getRule();
	}

	//elseif_expression returns ecore::EString:
	//  "elseif" expression "then" expression;
	public Elseif_expressionElements getElseif_expressionAccess() {
		return (pElseif_expression != null) ? pElseif_expression : (pElseif_expression = new Elseif_expressionElements());
	}
	
	public ParserRule getElseif_expressionRule() {
		return getElseif_expressionAccess().getRule();
	}

	//for_indices returns ecore::EString:
	//  for_index (COMMA for_index)*;
	public For_indicesElements getFor_indicesAccess() {
		return (pFor_indices != null) ? pFor_indices : (pFor_indices = new For_indicesElements());
	}
	
	public ParserRule getFor_indicesRule() {
		return getFor_indicesAccess().getRule();
	}

	//for_index returns ecore::EString:
	//  IDENT ("in" expression)?;
	public For_indexElements getFor_indexAccess() {
		return (pFor_index != null) ? pFor_index : (pFor_index = new For_indexElements());
	}
	
	public ParserRule getFor_indexRule() {
		return getFor_indexAccess().getRule();
	}

	//simple_expression returns ecore::EString:
	//  simple_expr; 
	//
	//  
	//	   
	//	//(COLONCOLON simple_expr)*
	//	 //| IDENT AS simple_expression
	public Simple_expressionElements getSimple_expressionAccess() {
		return (pSimple_expression != null) ? pSimple_expression : (pSimple_expression = new Simple_expressionElements());
	}
	
	public ParserRule getSimple_expressionRule() {
		return getSimple_expressionAccess().getRule();
	}

	//simple_expr returns ecore::EString:
	//  logical_expression (COLON logical_expression (COLON logical_expression)?)?; 
	//
	//  
	//	                
	//	
	//
	/// * Code quotation mechanism * / 
	/// *
	//code_expression  :
	//	CODE LPAR ((expression RPAR)=> e=expression | m=modification | el=element (SEMICOLON)?
	//	| eq=code_equation_rule_clause | ieq=code_initial_equation_rule_clause
	//	| alg=code_algorithm_clause | ialg=code_initial_algorithm_clause
	//	)  RPAR
	//	;
	//
	//code_equation_rule_clause :
	//	( EQUATION ( equation_rule SEMICOLON | annotation SEMICOLON )*  )
	//	;
	//
	//code_initial_equation_rule_clause :
	//	{ LA(2)==EQUATION }?
	//	INITIAL ec=code_equation_rule_clause 
	//	;
	//
	//code_algorithm_clause :
	//	'algorithm' (algorithm SEMICOLON | annotation SEMICOLON)*
	//	;
	//
	//code_initial_algorithm_clause :
	//	{ LA(2) == 'algorithm' }?
	//	INITIAL 'algorithm'
	//	( algorithm SEMICOLON | annotation SEMICOLON )* 
	//	;
	// * /
	/// * End Code quotation mechanism * /
	public Simple_exprElements getSimple_exprAccess() {
		return (pSimple_expr != null) ? pSimple_expr : (pSimple_expr = new Simple_exprElements());
	}
	
	public ParserRule getSimple_exprRule() {
		return getSimple_exprAccess().getRule();
	}

	//logical_expression returns ecore::EString:
	//  logical_term ("or" logical_term)*; 
	//
	/// * Code quotation mechanism * / 
	/// *
	//code_expression  :
	//	CODE LPAR ((expression RPAR)=> e=expression | m=modification | el=element (SEMICOLON)?
	//	| eq=code_equation_rule_clause | ieq=code_initial_equation_rule_clause
	//	| alg=code_algorithm_clause | ialg=code_initial_algorithm_clause
	//	)  RPAR
	//	;
	//
	//code_equation_rule_clause :
	//	( EQUATION ( equation_rule SEMICOLON | annotation SEMICOLON )*  )
	//	;
	//
	//code_initial_equation_rule_clause :
	//	{ LA(2)==EQUATION }?
	//	INITIAL ec=code_equation_rule_clause 
	//	;
	//
	//code_algorithm_clause :
	//	'algorithm' (algorithm SEMICOLON | annotation SEMICOLON)*
	//	;
	//
	//code_initial_algorithm_clause :
	//	{ LA(2) == 'algorithm' }?
	//	INITIAL 'algorithm'
	//	( algorithm SEMICOLON | annotation SEMICOLON )* 
	//	;
	// * /
	/// * End Code quotation mechanism * /
	public Logical_expressionElements getLogical_expressionAccess() {
		return (pLogical_expression != null) ? pLogical_expression : (pLogical_expression = new Logical_expressionElements());
	}
	
	public ParserRule getLogical_expressionRule() {
		return getLogical_expressionAccess().getRule();
	}

	//logical_term returns ecore::EString:
	//  logical_factor ("and" logical_factor)*;
	public Logical_termElements getLogical_termAccess() {
		return (pLogical_term != null) ? pLogical_term : (pLogical_term = new Logical_termElements());
	}
	
	public ParserRule getLogical_termRule() {
		return getLogical_termAccess().getRule();
	}

	//logical_factor returns ecore::EString:
	//  "not"? relation;
	public Logical_factorElements getLogical_factorAccess() {
		return (pLogical_factor != null) ? pLogical_factor : (pLogical_factor = new Logical_factorElements());
	}
	
	public ParserRule getLogical_factorRule() {
		return getLogical_factorAccess().getRule();
	}

	//relation returns ecore::EString:
	//  arithmetic_expression ((LESS|LESSEQ|GREATER|GREATEREQ|EQEQ|LESSGT)
	//  arithmetic_expression)?;
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//arithmetic_expression returns ecore::EString:
	//  unary_arithmetic_expression ((PLUS|MINUS|PLUS_EW|MINUS_EW) term)*;
	public Arithmetic_expressionElements getArithmetic_expressionAccess() {
		return (pArithmetic_expression != null) ? pArithmetic_expression : (pArithmetic_expression = new Arithmetic_expressionElements());
	}
	
	public ParserRule getArithmetic_expressionRule() {
		return getArithmetic_expressionAccess().getRule();
	}

	//unary_arithmetic_expression returns ecore::EString:
	//  PLUS term|MINUS term|PLUS_EW term|MINUS_EW term|term;
	public Unary_arithmetic_expressionElements getUnary_arithmetic_expressionAccess() {
		return (pUnary_arithmetic_expression != null) ? pUnary_arithmetic_expression : (pUnary_arithmetic_expression = new Unary_arithmetic_expressionElements());
	}
	
	public ParserRule getUnary_arithmetic_expressionRule() {
		return getUnary_arithmetic_expressionAccess().getRule();
	}

	//term returns ecore::EString:
	//  factor ((STAR|SLASH|STAR_EW|SLASH_EW) factor)*;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//factor returns ecore::EString:
	//  primary ((POWER|POWER_EW) primary)?;
	public FactorElements getFactorAccess() {
		return (pFactor != null) ? pFactor : (pFactor = new FactorElements());
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//primary returns ecore::EString:
	//  UNSIGNED_INTEGER|UNSIGNED_REAL|STRING|"false"|"true"|
	//  component_reference__function_call|"der" function_call|LPAR expression_list RPAR|
	//  LBRACK expression_list (SEMICOLON expression_list)* RBRACK|LBRACE
	//  for_or_expression_list RBRACE|"end";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//component_reference__function_call returns ecore::EString:
	//  component_reference function_call?|"initial" LPAR RPAR;
	public Component_reference__function_callElements getComponent_reference__function_callAccess() {
		return (pComponent_reference__function_call != null) ? pComponent_reference__function_call : (pComponent_reference__function_call = new Component_reference__function_callElements());
	}
	
	public ParserRule getComponent_reference__function_callRule() {
		return getComponent_reference__function_callAccess().getRule();
	}

	//name_path returns ecore::EString:
	//  IDENT|IDENT DOT name_path; 
	//
	//  
	//	//{ LA(2)!=DOT }?
	public Name_pathElements getName_pathAccess() {
		return (pName_path != null) ? pName_path : (pName_path = new Name_pathElements());
	}
	
	public ParserRule getName_pathRule() {
		return getName_pathAccess().getRule();
	}

	//name_path_star returns ecore::EString:
	//  IDENT STAR_EW?|IDENT DOT name_path_star; 
	//
	// 
	//	
	//	//{ LA(2) != DOT }?
	public Name_path_starElements getName_path_starAccess() {
		return (pName_path_star != null) ? pName_path_star : (pName_path_star = new Name_path_starElements());
	}
	
	public ParserRule getName_path_starRule() {
		return getName_path_starAccess().getRule();
	}

	//component_reference returns ecore::EString:
	//  IDENT array_subscripts? (DOT component_reference)?; 
	//
	//  
	//	                
	//	//| WILD
	public Component_referenceElements getComponent_referenceAccess() {
		return (pComponent_reference != null) ? pComponent_reference : (pComponent_reference = new Component_referenceElements());
	}
	
	public ParserRule getComponent_referenceRule() {
		return getComponent_referenceAccess().getRule();
	}

	//function_call returns ecore::EString:
	//  LPAR function_arguments RPAR;
	public Function_callElements getFunction_callAccess() {
		return (pFunction_call != null) ? pFunction_call : (pFunction_call = new Function_callElements());
	}
	
	public ParserRule getFunction_callRule() {
		return getFunction_callAccess().getRule();
	}

	//function_arguments returns ecore::EString:
	//  for_or_expression_list? named_arguments?;
	public Function_argumentsElements getFunction_argumentsAccess() {
		return (pFunction_arguments != null) ? pFunction_arguments : (pFunction_arguments = new Function_argumentsElements());
	}
	
	public ParserRule getFunction_argumentsRule() {
		return getFunction_argumentsAccess().getRule();
	}

	//for_or_expression_list returns ecore::EString:
	//  expression (COMMA for_or_expression_list2?|"for" for_indices)?; 
	//
	//  
	//	//({LA(1)==IDENT && LA(2) == EQUALS || LA(1) == RPAR || LA(1) == RBRACE}?|
	public For_or_expression_listElements getFor_or_expression_listAccess() {
		return (pFor_or_expression_list != null) ? pFor_or_expression_list : (pFor_or_expression_list = new For_or_expression_listElements());
	}
	
	public ParserRule getFor_or_expression_listRule() {
		return getFor_or_expression_listAccess().getRule();
	}

	//for_or_expression_list2 returns ecore::EString:
	//  expression (COMMA for_or_expression_list2)?; 
	//
	//  
	//	// {LA(2) == EQUALS}? |
	public For_or_expression_list2Elements getFor_or_expression_list2Access() {
		return (pFor_or_expression_list2 != null) ? pFor_or_expression_list2 : (pFor_or_expression_list2 = new For_or_expression_list2Elements());
	}
	
	public ParserRule getFor_or_expression_list2Rule() {
		return getFor_or_expression_list2Access().getRule();
	}

	//named_arguments returns ecore::EString:
	//  named_arguments2;
	public Named_argumentsElements getNamed_argumentsAccess() {
		return (pNamed_arguments != null) ? pNamed_arguments : (pNamed_arguments = new Named_argumentsElements());
	}
	
	public ParserRule getNamed_argumentsRule() {
		return getNamed_argumentsAccess().getRule();
	}

	//named_arguments2 returns ecore::EString:
	//  named_argument (COMMA named_argument)*;
	public Named_arguments2Elements getNamed_arguments2Access() {
		return (pNamed_arguments2 != null) ? pNamed_arguments2 : (pNamed_arguments2 = new Named_arguments2Elements());
	}
	
	public ParserRule getNamed_arguments2Rule() {
		return getNamed_arguments2Access().getRule();
	}

	//named_argument returns ecore::EString:
	//  IDENT EQUALS expression;
	public Named_argumentElements getNamed_argumentAccess() {
		return (pNamed_argument != null) ? pNamed_argument : (pNamed_argument = new Named_argumentElements());
	}
	
	public ParserRule getNamed_argumentRule() {
		return getNamed_argumentAccess().getRule();
	}

	//expression_list returns ecore::EString:
	//  expression_list2;
	public Expression_listElements getExpression_listAccess() {
		return (pExpression_list != null) ? pExpression_list : (pExpression_list = new Expression_listElements());
	}
	
	public ParserRule getExpression_listRule() {
		return getExpression_listAccess().getRule();
	}

	//expression_list2 returns ecore::EString:
	//  expression (COMMA expression_list2)?;
	public Expression_list2Elements getExpression_list2Access() {
		return (pExpression_list2 != null) ? pExpression_list2 : (pExpression_list2 = new Expression_list2Elements());
	}
	
	public ParserRule getExpression_list2Rule() {
		return getExpression_list2Access().getRule();
	}

	//array_subscripts returns ecore::EString:
	//  LBRACK subscript (COMMA subscript)* RBRACK;
	public Array_subscriptsElements getArray_subscriptsAccess() {
		return (pArray_subscripts != null) ? pArray_subscripts : (pArray_subscripts = new Array_subscriptsElements());
	}
	
	public ParserRule getArray_subscriptsRule() {
		return getArray_subscriptsAccess().getRule();
	}

	//subscript returns ecore::EString:
	//  expression|COLON;
	public SubscriptElements getSubscriptAccess() {
		return (pSubscript != null) ? pSubscript : (pSubscript = new SubscriptElements());
	}
	
	public ParserRule getSubscriptRule() {
		return getSubscriptAccess().getRule();
	}

	//comment returns Comment:
	//  string=string_comment? annotation=annotation?;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//string_comment returns ecore::EString:
	//  STRING (PLUS STRING)*;
	public String_commentElements getString_commentAccess() {
		return (pString_comment != null) ? pString_comment : (pString_comment = new String_commentElements());
	}
	
	public ParserRule getString_commentRule() {
		return getString_commentAccess().getRule();
	}

	//annotation returns Annotation:
	//  "annotation" class_modification; 
	//
	//    
	//	  
	//	
	//
	//
	//
	/// *------------------------------------------------------------------
	// * LEXER RULES
	// *------------------------------------------------------------------* /
	//
	/// * Keywords * / 
	//
	////terminal T_ALGORITHM	: 'algorithm'	;
	////terminal T_AND		: 'and'		;
	////terminal T_ANNOTATION	: 'annotation'	;
	////terminal BLOCK		: 'block'	;
	////terminal CODE		: 'Code'	;
	////terminal   CLASS		: 'class'	;
	/// *
	//terminal CONNECT	: 'connect'	;
	//terminal CONNECTOR	: 'connector'	;
	//terminal   CONSTANT	: 'constant'	;
	//terminal   DISCRETE	: 'discrete'	;
	//terminal   DER           : 'der' 	;
	//terminal   EACH		: 'each'	;
	//terminal   ELSE		: 'else'	;
	//terminal   ELSEIF	: 'elseif'	;
	//terminal   ELSEWHEN	: 'elsewhen'	;
	//terminal   T_END		: 'end'		;
	//terminal   ENUMERATION	: 'enumeration'	;
	//terminal   EQUATION	: 'equation'	;
	//terminal   ENCAPSULATED	: 'encapsulated';
	//terminal   EXPANDABLE	: 'expandable'  ;
	//terminal   EXTENDS	: 'extends'     ;
	//terminal   CONSTRAINEDBY : 'constrainedby' ;
	//terminal   EXTERNAL	: 'external'	;
	//terminal   T_FALSE	: 'false'	;
	////terminal   FINAL		: 'final'	;
	//terminal   FLOW		: 'flow'	;
	//terminal   FOR		: 'for'		;
	//terminal   FUNCTION	: 'function'	;
	//terminal   IF		: 'if'		;
	//terminal   IMPORT	: 'import'	;
	//terminal   T_IN		: 'in'		;
	//terminal   INITIAL	: 'initial'	;
	//terminal   INNER		: 'inner'	;
	//terminal   T_INPUT	: 'input'	;
	//terminal   LOOP		: 'loop'	;
	//terminal   MODEL		: 'model'	;
	//terminal   T_NOT		: 'not'		;
	//terminal   T_OUTER	: 'outer'	;
	//terminal   OVERLOAD	: 'overload'	;
	//terminal   T_OR		: 'or'		;
	//terminal   T_OUTPUT	: 'output'	;
	//terminal   PACKAGE	: 'package'	;
	//terminal   PARAMETER	: 'parameter'	;
	//terminal   PARTIAL	: 'partial'	;
	//terminal   PROTECTED	: 'protected'	;
	//terminal   PUBLIC	: 'public'	;
	//terminal   RECORD	: 'record'	;
	//terminal   REDECLARE	: 'redeclare'	;
	//terminal   REPLACEABLE	: 'replaceable'	;
	//terminal   RESULTS	: 'results'	;
	//terminal   THEN		: 'then'	;
	//terminal   T_TRUE	: 'true'	;
	//terminal   TYPE		: 'type'	;
	//terminal   WHEN		: 'when'	;
	//terminal   WHILE		: 'while'	;
	//terminal   WITHIN	: 'within' 	;
	//terminal   RETURN	: 'return'  ;
	//terminal   BREAK		: 'break'	;
	//terminal   STREAM	: 'stream'	; / * for Modelica 3.1 stream connectors * /	
	//
	//  // ---------
	//   // Operators
	//   // ---------
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//terminal DOT:
	//  "."; 
	//
	//
	//
	/// *------------------------------------------------------------------
	// * LEXER RULES
	// *------------------------------------------------------------------* /
	//
	/// * Keywords * / 
	//
	////terminal T_ALGORITHM	: 'algorithm'	;
	////terminal T_AND		: 'and'		;
	////terminal T_ANNOTATION	: 'annotation'	;
	////terminal BLOCK		: 'block'	;
	////terminal CODE		: 'Code'	;
	////terminal   CLASS		: 'class'	;
	/// *
	//terminal CONNECT	: 'connect'	;
	//terminal CONNECTOR	: 'connector'	;
	//terminal   CONSTANT	: 'constant'	;
	//terminal   DISCRETE	: 'discrete'	;
	//terminal   DER           : 'der' 	;
	//terminal   EACH		: 'each'	;
	//terminal   ELSE		: 'else'	;
	//terminal   ELSEIF	: 'elseif'	;
	//terminal   ELSEWHEN	: 'elsewhen'	;
	//terminal   T_END		: 'end'		;
	//terminal   ENUMERATION	: 'enumeration'	;
	//terminal   EQUATION	: 'equation'	;
	//terminal   ENCAPSULATED	: 'encapsulated';
	//terminal   EXPANDABLE	: 'expandable'  ;
	//terminal   EXTENDS	: 'extends'     ;
	//terminal   CONSTRAINEDBY : 'constrainedby' ;
	//terminal   EXTERNAL	: 'external'	;
	//terminal   T_FALSE	: 'false'	;
	////terminal   FINAL		: 'final'	;
	//terminal   FLOW		: 'flow'	;
	//terminal   FOR		: 'for'		;
	//terminal   FUNCTION	: 'function'	;
	//terminal   IF		: 'if'		;
	//terminal   IMPORT	: 'import'	;
	//terminal   T_IN		: 'in'		;
	//terminal   INITIAL	: 'initial'	;
	//terminal   INNER		: 'inner'	;
	//terminal   T_INPUT	: 'input'	;
	//terminal   LOOP		: 'loop'	;
	//terminal   MODEL		: 'model'	;
	//terminal   T_NOT		: 'not'		;
	//terminal   T_OUTER	: 'outer'	;
	//terminal   OVERLOAD	: 'overload'	;
	//terminal   T_OR		: 'or'		;
	//terminal   T_OUTPUT	: 'output'	;
	//terminal   PACKAGE	: 'package'	;
	//terminal   PARAMETER	: 'parameter'	;
	//terminal   PARTIAL	: 'partial'	;
	//terminal   PROTECTED	: 'protected'	;
	//terminal   PUBLIC	: 'public'	;
	//terminal   RECORD	: 'record'	;
	//terminal   REDECLARE	: 'redeclare'	;
	//terminal   REPLACEABLE	: 'replaceable'	;
	//terminal   RESULTS	: 'results'	;
	//terminal   THEN		: 'then'	;
	//terminal   T_TRUE	: 'true'	;
	//terminal   TYPE		: 'type'	;
	//terminal   WHEN		: 'when'	;
	//terminal   WHILE		: 'while'	;
	//terminal   WITHIN	: 'within' 	;
	//terminal   RETURN	: 'return'  ;
	//terminal   BREAK		: 'break'	;
	//terminal   STREAM	: 'stream'	; / * for Modelica 3.1 stream connectors * /	
	//
	//  // ---------
	//   // Operators
	//   // ---------
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal LPAR:
	//  "(";
	public TerminalRule getLPARRule() {
		return (tLPAR != null) ? tLPAR : (tLPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAR"));
	} 

	//terminal RPAR:
	//  ")";
	public TerminalRule getRPARRule() {
		return (tRPAR != null) ? tRPAR : (tRPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAR"));
	} 

	//terminal LBRACK:
	//  "[";
	public TerminalRule getLBRACKRule() {
		return (tLBRACK != null) ? tLBRACK : (tLBRACK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACK"));
	} 

	//terminal RBRACK:
	//  "]";
	public TerminalRule getRBRACKRule() {
		return (tRBRACK != null) ? tRBRACK : (tRBRACK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACK"));
	} 

	//terminal LBRACE:
	//  "{";
	public TerminalRule getLBRACERule() {
		return (tLBRACE != null) ? tLBRACE : (tLBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACE"));
	} 

	//terminal RBRACE:
	//  "}";
	public TerminalRule getRBRACERule() {
		return (tRBRACE != null) ? tRBRACE : (tRBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACE"));
	} 

	//terminal EQUALS:
	//  "=";
	public TerminalRule getEQUALSRule() {
		return (tEQUALS != null) ? tEQUALS : (tEQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS"));
	} 

	//terminal ASSIGN:
	//  ":=";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//terminal COMMA:
	//  ",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal COLON:
	//  ":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal SEMICOLON:
	//  ";"; 
	//    	   		 
	//  / * elementwise operators * /
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal PLUS_EW:
	//  ".+"; 
	//  / * elementwise operators * /   
	//         	     	   / * Modelica 3.0 * /
	public TerminalRule getPLUS_EWRule() {
		return (tPLUS_EW != null) ? tPLUS_EW : (tPLUS_EW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS_EW"));
	} 

	//terminal MINUS_EW:
	//  ".-";   / * Modelica 3.0 * / 
	//        	        	   / * Modelica 3.0 * /
	public TerminalRule getMINUS_EWRule() {
		return (tMINUS_EW != null) ? tMINUS_EW : (tMINUS_EW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS_EW"));
	} 

	//terminal STAR_EW:
	//  ".*";   / * Modelica 3.0 * /     
	//         	        	   / * Modelica 3.0 * /
	public TerminalRule getSTAR_EWRule() {
		return (tSTAR_EW != null) ? tSTAR_EW : (tSTAR_EW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STAR_EW"));
	} 

	//terminal SLASH_EW:
	//  "./";   / * Modelica 3.0 * / 
	//        	   		   / * Modelica 3.0 * /
	public TerminalRule getSLASH_EWRule() {
		return (tSLASH_EW != null) ? tSLASH_EW : (tSLASH_EW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SLASH_EW"));
	} 

	//terminal POWER_EW:
	//  ".^";   / * Modelica 3.0 * /   
	//        	    		   / * Modelica 3.0 * /
	public TerminalRule getPOWER_EWRule() {
		return (tPOWER_EW != null) ? tPOWER_EW : (tPOWER_EW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POWER_EW"));
	} 

	//terminal STAR:
	//  "*" "."?;   / * Modelica 3.0 * /
	public TerminalRule getSTARRule() {
		return (tSTAR != null) ? tSTAR : (tSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STAR"));
	} 

	//terminal MINUS:
	//  "-" "."?;
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal PLUS:
	//  "+" ("." | "&")?;
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal LESS:
	//  "<" "."?;
	public TerminalRule getLESSRule() {
		return (tLESS != null) ? tLESS : (tLESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS"));
	} 

	//terminal LESSEQ:
	//  "<=" "."?;
	public TerminalRule getLESSEQRule() {
		return (tLESSEQ != null) ? tLESSEQ : (tLESSEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESSEQ"));
	} 

	//terminal LESSGT:
	//  "!=" "."? | "<>" "."?;
	public TerminalRule getLESSGTRule() {
		return (tLESSGT != null) ? tLESSGT : (tLESSGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESSGT"));
	} 

	//terminal GREATER:
	//  ">" "."?;
	public TerminalRule getGREATERRule() {
		return (tGREATER != null) ? tGREATER : (tGREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER"));
	} 

	//terminal GREATEREQ:
	//  ">=" "."?;
	public TerminalRule getGREATEREQRule() {
		return (tGREATEREQ != null) ? tGREATEREQ : (tGREATEREQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATEREQ"));
	} 

	//terminal EQEQ:
	//  "==" ("." | "&")?;
	public TerminalRule getEQEQRule() {
		return (tEQEQ != null) ? tEQEQ : (tEQEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQEQ"));
	} 

	//terminal POWER:
	//  "^" "."?;
	public TerminalRule getPOWERRule() {
		return (tPOWER != null) ? tPOWER : (tPOWER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POWER"));
	} 

	//terminal SLASH:
	//  "/" "."?;
	public TerminalRule getSLASHRule() {
		return (tSLASH != null) ? tSLASH : (tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SLASH"));
	} 

	//terminal UNSIGNED_REAL:
	//  "0".."9"+ "." "0".."9"* (("E" | "e") ("+" | "-")? "0".."9"+)? | "0".."9"+ ("E" | "e") ("+" | "-")
	//  ? "0".."9"+;
	public TerminalRule getUNSIGNED_REALRule() {
		return (tUNSIGNED_REAL != null) ? tUNSIGNED_REAL : (tUNSIGNED_REAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_REAL"));
	} 

	//terminal UNSIGNED_INTEGER:
	//  "0".."9"+;
	public TerminalRule getUNSIGNED_INTEGERRule() {
		return (tUNSIGNED_INTEGER != null) ? tUNSIGNED_INTEGER : (tUNSIGNED_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_INTEGER"));
	} 

	//terminal IDENT:
	//  ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
