/*
* generated by Xtext
*/
package org.modelica.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.modelica.xtext.services.ModelicaBaseGrammarAccess;

import com.google.inject.Inject;

public class ModelicaBaseParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ModelicaBaseGrammarAccess grammarAccess;
		
	public ModelicaBaseGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StorageUnit_Group(this, this, 0, inst);
			case 1: return new EntityDefinition_Alternatives(this, this, 1, inst);
			case 2: return new ClassDefinition_Group(this, this, 2, inst);
			case 3: return new PartialDerivative_Group(this, this, 3, inst);
			case 4: return new ClassModification_Group(this, this, 4, inst);
			case 5: return new ClassOverloading_Group(this, this, 5, inst);
			case 6: return new Enumeration_Group(this, this, 6, inst);
			case 7: return new External_clause_Group(this, this, 7, inst);
			case 8: return new ElementList_Group(this, this, 8, inst);
			case 9: return new ElementList2_Alternatives(this, this, 9, inst);
			case 10: return new ClassElement_Alternatives(this, this, 10, inst);
			case 11: return new ReplaceableElementClause_Group(this, this, 11, inst);
			case 12: return new Import_clause_Group(this, this, 12, inst);
			case 13: return new Extends_clause_Group(this, this, 13, inst);
			case 14: return new Constraining_clause_Group(this, this, 14, inst);
			case 15: return new Component_clause_Group(this, this, 15, inst);
			case 16: return new Type_specifier_Group(this, this, 16, inst);
			case 17: return new Component_declaration_Group(this, this, 17, inst);
			case 18: return new Modification_Alternatives(this, this, 18, inst);
			case 19: return new SimpleModification_Alternatives(this, this, 19, inst);
			case 20: return new Class_modification_Group(this, this, 20, inst);
			case 21: return new Argument_Alternatives(this, this, 21, inst);
			case 22: return new ElementModification_Group(this, this, 22, inst);
			case 23: return new ElementRedeclaration_Group(this, this, 23, inst);
			case 24: return new ElementReplaceableClause_Group(this, this, 24, inst);
			case 25: return new ElementComponentClause_Group(this, this, 25, inst);
			case 26: return new Equation_rule_clause_Group(this, this, 26, inst);
			case 27: return new Algorithm_clause_Group(this, this, 27, inst);
			case 28: return new Initial_equation_rule_clause_Group(this, this, 28, inst);
			case 29: return new Initial_algorithm_clause_Group(this, this, 29, inst);
			case 30: return new Equation_rule_Group(this, this, 30, inst);
			case 31: return new Algorithm_Group(this, this, 31, inst);
			case 32: return new Conditional_equation_rule_e_Group(this, this, 32, inst);
			case 33: return new Conditional_equation_rule_a_Group(this, this, 33, inst);
			case 34: return new For_clause_e_Group(this, this, 34, inst);
			case 35: return new For_clause_a_Group(this, this, 35, inst);
			case 36: return new While_clause_Group(this, this, 36, inst);
			case 37: return new When_clause_e_Group(this, this, 37, inst);
			case 38: return new Else_when_e_Group(this, this, 38, inst);
			case 39: return new When_clause_a_Group(this, this, 39, inst);
			case 40: return new Else_when_a_Group(this, this, 40, inst);
			case 41: return new Equation_rule_elseif_Group(this, this, 41, inst);
			case 42: return new Algorithm_elseif_Group(this, this, 42, inst);
			case 43: return new Comment_Group(this, this, 43, inst);
			case 44: return new Annotation_Group(this, this, 44, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule StorageUnit ****************
 *
 * StorageUnit:
 *   ("within" name_path? SEMICOLON)? ("final"? classDefinition+=ClassDefinition ";")*; 
 * 
 * / *
 *  * Copyright (c) 2009 - currentYear, Adrian Pop [adrpo@ida.liu.se] 
 *  * All rights reserved.
 *  * /
 * 
 *   
 * 
 * 
 * / *------------------------------------------------------------------
 *  * PARSER RULES
 *  *------------------------------------------------------------------* /
 *
 **/

// ("within" name_path? SEMICOLON)? ("final"? classDefinition+=ClassDefinition ";")*
protected class StorageUnit_Group extends GroupToken {
	
	public StorageUnit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StorageUnit_Group_1(parent, this, 0, inst);
			case 1: return new StorageUnit_Group_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStorageUnitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("within" name_path? SEMICOLON)?
protected class StorageUnit_Group_0 extends GroupToken {
	
	public StorageUnit_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StorageUnit_SEMICOLONTerminalRuleCall_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "within"
protected class StorageUnit_WithinKeyword_0_0 extends KeywordToken  {
	
	public StorageUnit_WithinKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getWithinKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name_path?
protected class StorageUnit_Name_pathParserRuleCall_0_1 extends UnassignedTextToken {

	public StorageUnit_Name_pathParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getName_pathParserRuleCall_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StorageUnit_WithinKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// SEMICOLON
protected class StorageUnit_SEMICOLONTerminalRuleCall_0_2 extends UnassignedTextToken {

	public StorageUnit_SEMICOLONTerminalRuleCall_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getSEMICOLONTerminalRuleCall_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StorageUnit_Name_pathParserRuleCall_0_1(parent, this, 0, inst);
			case 1: return new StorageUnit_WithinKeyword_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("final"? classDefinition+=ClassDefinition ";")*
protected class StorageUnit_Group_1 extends GroupToken {
	
	public StorageUnit_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StorageUnit_SemicolonKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// classDefinition+=ClassDefinition
protected class StorageUnit_ClassDefinitionAssignment_1_1 extends AssignmentToken  {
	
	public StorageUnit_ClassDefinitionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getClassDefinitionAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classDefinition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStorageUnitAccess().getClassDefinitionClassDefinitionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StorageUnit_Group_1(parent, next, actIndex, consumed);
			case 1: return new StorageUnit_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// ";"
protected class StorageUnit_SemicolonKeyword_1_2 extends KeywordToken  {
	
	public StorageUnit_SemicolonKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStorageUnitAccess().getSemicolonKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StorageUnit_ClassDefinitionAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule StorageUnit ****************/


/************ begin Rule EntityDefinition ****************
 *
 * EntityDefinition:
 *   ClassDefinition|PartialDerivative|ClassModification|ClassOverloading|Enumeration
 * ;
 *
 **/

// ClassDefinition|PartialDerivative|ClassModification|ClassOverloading|Enumeration
protected class EntityDefinition_Alternatives extends AlternativesToken {

	public EntityDefinition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getEntityDefinitionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EntityDefinition_ClassDefinitionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new EntityDefinition_PartialDerivativeParserRuleCall_1(parent, this, 1, inst);
			case 2: return new EntityDefinition_ClassModificationParserRuleCall_2(parent, this, 2, inst);
			case 3: return new EntityDefinition_ClassOverloadingParserRuleCall_3(parent, this, 3, inst);
			case 4: return new EntityDefinition_EnumerationParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEntityDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ClassDefinition
protected class EntityDefinition_ClassDefinitionParserRuleCall_0 extends RuleCallToken {
	
	public EntityDefinition_ClassDefinitionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityDefinitionAccess().getClassDefinitionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClassDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClassDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PartialDerivative
protected class EntityDefinition_PartialDerivativeParserRuleCall_1 extends RuleCallToken {
	
	public EntityDefinition_PartialDerivativeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityDefinitionAccess().getPartialDerivativeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PartialDerivative_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPartialDerivativeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ClassModification
protected class EntityDefinition_ClassModificationParserRuleCall_2 extends RuleCallToken {
	
	public EntityDefinition_ClassModificationParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityDefinitionAccess().getClassModificationParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassModification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClassModification_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClassModificationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ClassOverloading
protected class EntityDefinition_ClassOverloadingParserRuleCall_3 extends RuleCallToken {
	
	public EntityDefinition_ClassOverloadingParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityDefinitionAccess().getClassOverloadingParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClassOverloading_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClassOverloadingRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Enumeration
protected class EntityDefinition_EnumerationParserRuleCall_4 extends RuleCallToken {
	
	public EntityDefinition_EnumerationParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityDefinitionAccess().getEnumerationParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Enumeration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEnumerationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EntityDefinition ****************/


/************ begin Rule ClassDefinition ****************
 *
 * ClassDefinition:
 *   encapsulated?="encapsulated"? partial?="partial"? expandable?="expandable"?
 *   classType=ClassType (name=IDENT comment=string_comment?|"extends" IDENT modification
 *   =class_modification? string_comment?) elemList+=ElementList (elemList+=ElementList2
 *   |initialEquationClauses+=initial_equation_rule_clause|initialAlgorithmClauses+=
 *   initial_algorithm_clause|equationClauses+=equation_rule_clause|algorithmClauses
 *   +=algorithm_clause)* extClause=external_clause? "end" IDENT; 
 * 
 * 
 * 	     
 * 	 
 * 	  
 *             
 *     
 * 		 
 * 		  
 * 		  
 * 		  
 * 		  
 * 	
 * 	    
 *       
 * 	//| SUBTYPEOF type_specifier
 *
 **/

// encapsulated?="encapsulated"? partial?="partial"? expandable?="expandable"?
// classType=ClassType (name=IDENT comment=string_comment?|"extends" IDENT modification
// =class_modification? string_comment?) elemList+=ElementList (elemList+=ElementList2
// |initialEquationClauses+=initial_equation_rule_clause|initialAlgorithmClauses+=
// initial_algorithm_clause|equationClauses+=equation_rule_clause|algorithmClauses
// +=algorithm_clause)* extClause=external_clause? "end" IDENT 
// 	     
// 	 
// 	  
//             
//     
// 		 
// 		  
// 		  
// 		  
// 		  
// 	
// 	    
//       
// 	//| SUBTYPEOF type_specifier
protected class ClassDefinition_Group extends GroupToken {
	
	public ClassDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_IDENTTerminalRuleCall_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClassDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// encapsulated?="encapsulated"?
protected class ClassDefinition_EncapsulatedAssignment_0 extends AssignmentToken  {
	
	public ClassDefinition_EncapsulatedAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getEncapsulatedAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("encapsulated",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("encapsulated");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getClassDefinitionAccess().getEncapsulatedEncapsulatedKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// partial?="partial"?
protected class ClassDefinition_PartialAssignment_1 extends AssignmentToken  {
	
	public ClassDefinition_PartialAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getPartialAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_EncapsulatedAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partial",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getClassDefinitionAccess().getPartialPartialKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// expandable?="expandable"?
protected class ClassDefinition_ExpandableAssignment_2 extends AssignmentToken  {
	
	public ClassDefinition_ExpandableAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getExpandableAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_PartialAssignment_1(parent, this, 0, inst);
			case 1: return new ClassDefinition_EncapsulatedAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expandable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expandable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getClassDefinitionAccess().getExpandableExpandableKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// classType=ClassType
protected class ClassDefinition_ClassTypeAssignment_3 extends AssignmentToken  {
	
	public ClassDefinition_ClassTypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getClassTypeAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_ExpandableAssignment_2(parent, this, 0, inst);
			case 1: return new ClassDefinition_PartialAssignment_1(parent, this, 1, inst);
			case 2: return new ClassDefinition_EncapsulatedAssignment_0(parent, this, 2, inst);
			default: return parent.createParentFollower(this, index, index - 3, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getClassDefinitionAccess().getClassTypeClassTypeEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// name=IDENT comment=string_comment?|"extends" IDENT modification=class_modification?
// string_comment?
protected class ClassDefinition_Alternatives_4 extends AlternativesToken {

	public ClassDefinition_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getAlternatives_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_Group_4_0(parent, this, 0, inst);
			case 1: return new ClassDefinition_Group_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=IDENT comment=string_comment?
protected class ClassDefinition_Group_4_0 extends GroupToken {
	
	public ClassDefinition_Group_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getGroup_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_CommentAssignment_4_0_1(parent, this, 0, inst);
			case 1: return new ClassDefinition_NameAssignment_4_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=IDENT
protected class ClassDefinition_NameAssignment_4_0_0 extends AssignmentToken  {
	
	public ClassDefinition_NameAssignment_4_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getNameAssignment_4_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_ClassTypeAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassDefinitionAccess().getNameIDENTTerminalRuleCall_4_0_0_0();
			return obj;
		}
		return null;
	}

}

// comment=string_comment?
protected class ClassDefinition_CommentAssignment_4_0_1 extends AssignmentToken  {
	
	public ClassDefinition_CommentAssignment_4_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getCommentAssignment_4_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_NameAssignment_4_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassDefinitionAccess().getCommentString_commentParserRuleCall_4_0_1_0();
			return obj;
		}
		return null;
	}

}


// "extends" IDENT modification=class_modification? string_comment?
protected class ClassDefinition_Group_4_1 extends GroupToken {
	
	public ClassDefinition_Group_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getGroup_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_String_commentParserRuleCall_4_1_3(parent, this, 0, inst);
			case 1: return new ClassDefinition_ModificationAssignment_4_1_2(parent, this, 1, inst);
			case 2: return new ClassDefinition_IDENTTerminalRuleCall_4_1_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class ClassDefinition_ExtendsKeyword_4_1_0 extends KeywordToken  {
	
	public ClassDefinition_ExtendsKeyword_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getExtendsKeyword_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_ClassTypeAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// IDENT
protected class ClassDefinition_IDENTTerminalRuleCall_4_1_1 extends UnassignedTextToken {

	public ClassDefinition_IDENTTerminalRuleCall_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getIDENTTerminalRuleCall_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_ExtendsKeyword_4_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// modification=class_modification?
protected class ClassDefinition_ModificationAssignment_4_1_2 extends AssignmentToken  {
	
	public ClassDefinition_ModificationAssignment_4_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getModificationAssignment_4_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getModificationClass_modificationParserRuleCall_4_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_IDENTTerminalRuleCall_4_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// string_comment?
protected class ClassDefinition_String_commentParserRuleCall_4_1_3 extends UnassignedTextToken {

	public ClassDefinition_String_commentParserRuleCall_4_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getString_commentParserRuleCall_4_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_ModificationAssignment_4_1_2(parent, this, 0, inst);
			case 1: return new ClassDefinition_IDENTTerminalRuleCall_4_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// elemList+=ElementList
protected class ClassDefinition_ElemListAssignment_5 extends AssignmentToken  {
	
	public ClassDefinition_ElemListAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getElemListAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elemList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elemList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getElemListElementListParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_Alternatives_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (elemList+=ElementList2|initialEquationClauses+=initial_equation_rule_clause|
// initialAlgorithmClauses+=initial_algorithm_clause|equationClauses+=
// equation_rule_clause|algorithmClauses+=algorithm_clause)*
protected class ClassDefinition_Alternatives_6 extends AlternativesToken {

	public ClassDefinition_Alternatives_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getAlternatives_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_ElemListAssignment_6_0(parent, this, 0, inst);
			case 1: return new ClassDefinition_InitialEquationClausesAssignment_6_1(parent, this, 1, inst);
			case 2: return new ClassDefinition_InitialAlgorithmClausesAssignment_6_2(parent, this, 2, inst);
			case 3: return new ClassDefinition_EquationClausesAssignment_6_3(parent, this, 3, inst);
			case 4: return new ClassDefinition_AlgorithmClausesAssignment_6_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// elemList+=ElementList2
protected class ClassDefinition_ElemListAssignment_6_0 extends AssignmentToken  {
	
	public ClassDefinition_ElemListAssignment_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getElemListAssignment_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elemList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elemList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementList2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getElemListElementList2ParserRuleCall_6_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new ClassDefinition_ElemListAssignment_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// initialEquationClauses+=initial_equation_rule_clause
protected class ClassDefinition_InitialEquationClausesAssignment_6_1 extends AssignmentToken  {
	
	public ClassDefinition_InitialEquationClausesAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getInitialEquationClausesAssignment_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initial_equation_rule_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialEquationClauses",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialEquationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInitial_equation_rule_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getInitialEquationClausesInitial_equation_rule_clauseParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new ClassDefinition_ElemListAssignment_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// initialAlgorithmClauses+=initial_algorithm_clause
protected class ClassDefinition_InitialAlgorithmClausesAssignment_6_2 extends AssignmentToken  {
	
	public ClassDefinition_InitialAlgorithmClausesAssignment_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getInitialAlgorithmClausesAssignment_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initial_algorithm_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialAlgorithmClauses",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialAlgorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInitial_algorithm_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getInitialAlgorithmClausesInitial_algorithm_clauseParserRuleCall_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new ClassDefinition_ElemListAssignment_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// equationClauses+=equation_rule_clause
protected class ClassDefinition_EquationClausesAssignment_6_3 extends AssignmentToken  {
	
	public ClassDefinition_EquationClausesAssignment_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getEquationClausesAssignment_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("equationClauses",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("equationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_rule_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getEquationClausesEquation_rule_clauseParserRuleCall_6_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new ClassDefinition_ElemListAssignment_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// algorithmClauses+=algorithm_clause
protected class ClassDefinition_AlgorithmClausesAssignment_6_4 extends AssignmentToken  {
	
	public ClassDefinition_AlgorithmClausesAssignment_6_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getAlgorithmClausesAssignment_6_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("algorithmClauses",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("algorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlgorithm_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getAlgorithmClausesAlgorithm_clauseParserRuleCall_6_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new ClassDefinition_ElemListAssignment_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// extClause=external_clause?
protected class ClassDefinition_ExtClauseAssignment_7 extends AssignmentToken  {
	
	public ClassDefinition_ExtClauseAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getExtClauseAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new External_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extClause",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extClause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternal_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDefinitionAccess().getExtClauseExternal_clauseParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition_Alternatives_6(parent, next, actIndex, consumed);
			case 1: return new ClassDefinition_ElemListAssignment_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class ClassDefinition_EndKeyword_8 extends KeywordToken  {
	
	public ClassDefinition_EndKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getEndKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_ExtClauseAssignment_7(parent, this, 0, inst);
			case 1: return new ClassDefinition_Alternatives_6(parent, this, 1, inst);
			case 2: return new ClassDefinition_ElemListAssignment_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// IDENT   
// 	//| SUBTYPEOF type_specifier
protected class ClassDefinition_IDENTTerminalRuleCall_9 extends UnassignedTextToken {

	public ClassDefinition_IDENTTerminalRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassDefinitionAccess().getIDENTTerminalRuleCall_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_EndKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ClassDefinition ****************/


/************ begin Rule PartialDerivative ****************
 *
 * PartialDerivative:
 *   "function" name=IDENT EQUALS "der" "(" name_path "," ident_list ")" comment=comment;
 *
 **/

// "function" name=IDENT EQUALS "der" "(" name_path "," ident_list ")" comment=comment
protected class PartialDerivative_Group extends GroupToken {
	
	public PartialDerivative_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_CommentAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPartialDerivativeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "function"
protected class PartialDerivative_FunctionKeyword_0 extends KeywordToken  {
	
	public PartialDerivative_FunctionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getFunctionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=IDENT
protected class PartialDerivative_NameAssignment_1 extends AssignmentToken  {
	
	public PartialDerivative_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_FunctionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPartialDerivativeAccess().getNameIDENTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// EQUALS
protected class PartialDerivative_EQUALSTerminalRuleCall_2 extends UnassignedTextToken {

	public PartialDerivative_EQUALSTerminalRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getEQUALSTerminalRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "der"
protected class PartialDerivative_DerKeyword_3 extends KeywordToken  {
	
	public PartialDerivative_DerKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getDerKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_EQUALSTerminalRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class PartialDerivative_LeftParenthesisKeyword_4 extends KeywordToken  {
	
	public PartialDerivative_LeftParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getLeftParenthesisKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_DerKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name_path
protected class PartialDerivative_Name_pathParserRuleCall_5 extends UnassignedTextToken {

	public PartialDerivative_Name_pathParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getName_pathParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_LeftParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class PartialDerivative_CommaKeyword_6 extends KeywordToken  {
	
	public PartialDerivative_CommaKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getCommaKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_Name_pathParserRuleCall_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ident_list
protected class PartialDerivative_Ident_listParserRuleCall_7 extends UnassignedTextToken {

	public PartialDerivative_Ident_listParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getIdent_listParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_CommaKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ")"
protected class PartialDerivative_RightParenthesisKeyword_8 extends KeywordToken  {
	
	public PartialDerivative_RightParenthesisKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getRightParenthesisKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PartialDerivative_Ident_listParserRuleCall_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// comment=comment
protected class PartialDerivative_CommentAssignment_9 extends AssignmentToken  {
	
	public PartialDerivative_CommentAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPartialDerivativeAccess().getCommentAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPartialDerivativeAccess().getCommentCommentParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PartialDerivative_RightParenthesisKeyword_8(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PartialDerivative ****************/


/************ begin Rule ClassModification ****************
 *
 * ClassModification:
 *   classType=ClassType name=IDENT EQUALS type_prefix typeSpecifier=type_specifier
 *   modification=class_modification? comment=comment;
 *
 **/

// classType=ClassType name=IDENT EQUALS type_prefix typeSpecifier=type_specifier
// modification=class_modification? comment=comment
protected class ClassModification_Group extends GroupToken {
	
	public ClassModification_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassModification_CommentAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClassModificationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// classType=ClassType
protected class ClassModification_ClassTypeAssignment_0 extends AssignmentToken  {
	
	public ClassModification_ClassTypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getClassTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getClassModificationAccess().getClassTypeClassTypeEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=IDENT
protected class ClassModification_NameAssignment_1 extends AssignmentToken  {
	
	public ClassModification_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassModification_ClassTypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassModificationAccess().getNameIDENTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// EQUALS
protected class ClassModification_EQUALSTerminalRuleCall_2 extends UnassignedTextToken {

	public ClassModification_EQUALSTerminalRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getEQUALSTerminalRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassModification_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type_prefix
protected class ClassModification_Type_prefixParserRuleCall_3 extends UnassignedTextToken {

	public ClassModification_Type_prefixParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getType_prefixParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassModification_EQUALSTerminalRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// typeSpecifier=type_specifier
protected class ClassModification_TypeSpecifierAssignment_4 extends AssignmentToken  {
	
	public ClassModification_TypeSpecifierAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getTypeSpecifierAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeSpecifier",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeSpecifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassModificationAccess().getTypeSpecifierType_specifierParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassModification_Type_prefixParserRuleCall_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// modification=class_modification?
protected class ClassModification_ModificationAssignment_5 extends AssignmentToken  {
	
	public ClassModification_ModificationAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getModificationAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassModificationAccess().getModificationClass_modificationParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassModification_TypeSpecifierAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// comment=comment
protected class ClassModification_CommentAssignment_6 extends AssignmentToken  {
	
	public ClassModification_CommentAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassModificationAccess().getCommentAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassModificationAccess().getCommentCommentParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassModification_ModificationAssignment_5(parent, next, actIndex, consumed);
			case 1: return new ClassModification_TypeSpecifierAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ClassModification ****************/


/************ begin Rule ClassOverloading ****************
 *
 * ClassOverloading:
 *   classType=ClassType name=IDENT EQUALS "overload" "(" name_list ")" comment=comment;
 *
 **/

// classType=ClassType name=IDENT EQUALS "overload" "(" name_list ")" comment=comment
protected class ClassOverloading_Group extends GroupToken {
	
	public ClassOverloading_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_CommentAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClassOverloadingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// classType=ClassType
protected class ClassOverloading_ClassTypeAssignment_0 extends AssignmentToken  {
	
	public ClassOverloading_ClassTypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getClassTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getClassOverloadingAccess().getClassTypeClassTypeEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=IDENT
protected class ClassOverloading_NameAssignment_1 extends AssignmentToken  {
	
	public ClassOverloading_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_ClassTypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassOverloadingAccess().getNameIDENTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// EQUALS
protected class ClassOverloading_EQUALSTerminalRuleCall_2 extends UnassignedTextToken {

	public ClassOverloading_EQUALSTerminalRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getEQUALSTerminalRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "overload"
protected class ClassOverloading_OverloadKeyword_3 extends KeywordToken  {
	
	public ClassOverloading_OverloadKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getOverloadKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_EQUALSTerminalRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ClassOverloading_LeftParenthesisKeyword_4 extends KeywordToken  {
	
	public ClassOverloading_LeftParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getLeftParenthesisKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_OverloadKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name_list
protected class ClassOverloading_Name_listParserRuleCall_5 extends UnassignedTextToken {

	public ClassOverloading_Name_listParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getName_listParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_LeftParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ")"
protected class ClassOverloading_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public ClassOverloading_RightParenthesisKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getRightParenthesisKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassOverloading_Name_listParserRuleCall_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// comment=comment
protected class ClassOverloading_CommentAssignment_7 extends AssignmentToken  {
	
	public ClassOverloading_CommentAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassOverloadingAccess().getCommentAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassOverloadingAccess().getCommentCommentParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassOverloading_RightParenthesisKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ClassOverloading ****************/


/************ begin Rule Enumeration ****************
 *
 * Enumeration:
 *   classType=ClassType name=IDENT EQUALS "enumeration" LPAR (ident+=IDENT enumComments+=
 *   comment (COMMA ident+=IDENT enumComments+=comment)*|COLON) RPAR comment=comment;
 *
 **/

// classType=ClassType name=IDENT EQUALS "enumeration" LPAR (ident+=IDENT enumComments+=
// comment (COMMA ident+=IDENT enumComments+=comment)*|COLON) RPAR comment=comment
protected class Enumeration_Group extends GroupToken {
	
	public Enumeration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_CommentAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEnumerationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// classType=ClassType
protected class Enumeration_ClassTypeAssignment_0 extends AssignmentToken  {
	
	public Enumeration_ClassTypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getClassTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getEnumerationAccess().getClassTypeClassTypeEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=IDENT
protected class Enumeration_NameAssignment_1 extends AssignmentToken  {
	
	public Enumeration_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_ClassTypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationAccess().getNameIDENTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// EQUALS
protected class Enumeration_EQUALSTerminalRuleCall_2 extends UnassignedTextToken {

	public Enumeration_EQUALSTerminalRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getEQUALSTerminalRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "enumeration"
protected class Enumeration_EnumerationKeyword_3 extends KeywordToken  {
	
	public Enumeration_EnumerationKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getEnumerationKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_EQUALSTerminalRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// LPAR
protected class Enumeration_LPARTerminalRuleCall_4 extends UnassignedTextToken {

	public Enumeration_LPARTerminalRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getLPARTerminalRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_EnumerationKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ident+=IDENT enumComments+=comment (COMMA ident+=IDENT enumComments+=comment)*|COLON
protected class Enumeration_Alternatives_5 extends AlternativesToken {

	public Enumeration_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getAlternatives_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_Group_5_0(parent, this, 0, inst);
			case 1: return new Enumeration_COLONTerminalRuleCall_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ident+=IDENT enumComments+=comment (COMMA ident+=IDENT enumComments+=comment)*
protected class Enumeration_Group_5_0 extends GroupToken {
	
	public Enumeration_Group_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getGroup_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_Group_5_0_2(parent, this, 0, inst);
			case 1: return new Enumeration_EnumCommentsAssignment_5_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ident+=IDENT
protected class Enumeration_IdentAssignment_5_0_0 extends AssignmentToken  {
	
	public Enumeration_IdentAssignment_5_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getIdentAssignment_5_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_LPARTerminalRuleCall_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ident",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ident");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationAccess().getIdentIDENTTerminalRuleCall_5_0_0_0();
			return obj;
		}
		return null;
	}

}

// enumComments+=comment
protected class Enumeration_EnumCommentsAssignment_5_0_1 extends AssignmentToken  {
	
	public Enumeration_EnumCommentsAssignment_5_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getEnumCommentsAssignment_5_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumComments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumComments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEnumerationAccess().getEnumCommentsCommentParserRuleCall_5_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Enumeration_IdentAssignment_5_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA ident+=IDENT enumComments+=comment)*
protected class Enumeration_Group_5_0_2 extends GroupToken {
	
	public Enumeration_Group_5_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getGroup_5_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_EnumCommentsAssignment_5_0_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// COMMA
protected class Enumeration_COMMATerminalRuleCall_5_0_2_0 extends UnassignedTextToken {

	public Enumeration_COMMATerminalRuleCall_5_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getCOMMATerminalRuleCall_5_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_Group_5_0_2(parent, this, 0, inst);
			case 1: return new Enumeration_EnumCommentsAssignment_5_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ident+=IDENT
protected class Enumeration_IdentAssignment_5_0_2_1 extends AssignmentToken  {
	
	public Enumeration_IdentAssignment_5_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getIdentAssignment_5_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_COMMATerminalRuleCall_5_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ident",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ident");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationAccess().getIdentIDENTTerminalRuleCall_5_0_2_1_0();
			return obj;
		}
		return null;
	}

}

// enumComments+=comment
protected class Enumeration_EnumCommentsAssignment_5_0_2_2 extends AssignmentToken  {
	
	public Enumeration_EnumCommentsAssignment_5_0_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getEnumCommentsAssignment_5_0_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumComments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumComments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEnumerationAccess().getEnumCommentsCommentParserRuleCall_5_0_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Enumeration_IdentAssignment_5_0_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// COLON
protected class Enumeration_COLONTerminalRuleCall_5_1 extends UnassignedTextToken {

	public Enumeration_COLONTerminalRuleCall_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getCOLONTerminalRuleCall_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_LPARTerminalRuleCall_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// RPAR
protected class Enumeration_RPARTerminalRuleCall_6 extends UnassignedTextToken {

	public Enumeration_RPARTerminalRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getRPARTerminalRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_Alternatives_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// comment=comment
protected class Enumeration_CommentAssignment_7 extends AssignmentToken  {
	
	public Enumeration_CommentAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getCommentAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEnumerationAccess().getCommentCommentParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Enumeration_RPARTerminalRuleCall_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Enumeration ****************/




/************ begin Rule external_clause ****************
 *
 * external_clause returns ExternalClause:
 *   "external" languageSpecification=STRING? external_function_call? annotation=
 *   annotation? SEMICOLON (extAnnotation=annotation SEMICOLON)?;
 *
 **/

// "external" languageSpecification=STRING? external_function_call? annotation=
// annotation? SEMICOLON (extAnnotation=annotation SEMICOLON)?
protected class External_clause_Group extends GroupToken {
	
	public External_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new External_clause_Group_5(parent, this, 0, inst);
			case 1: return new External_clause_SEMICOLONTerminalRuleCall_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExternal_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "external"
protected class External_clause_ExternalKeyword_0 extends KeywordToken  {
	
	public External_clause_ExternalKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getExternalKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// languageSpecification=STRING?
protected class External_clause_LanguageSpecificationAssignment_1 extends AssignmentToken  {
	
	public External_clause_LanguageSpecificationAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getLanguageSpecificationAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new External_clause_ExternalKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("languageSpecification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("languageSpecification");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternal_clauseAccess().getLanguageSpecificationSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// external_function_call?
protected class External_clause_External_function_callParserRuleCall_2 extends UnassignedTextToken {

	public External_clause_External_function_callParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getExternal_function_callParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new External_clause_LanguageSpecificationAssignment_1(parent, this, 0, inst);
			case 1: return new External_clause_ExternalKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// annotation=annotation?
protected class External_clause_AnnotationAssignment_3 extends AssignmentToken  {
	
	public External_clause_AnnotationAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getAnnotationAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExternal_clauseAccess().getAnnotationAnnotationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new External_clause_External_function_callParserRuleCall_2(parent, next, actIndex, consumed);
			case 1: return new External_clause_LanguageSpecificationAssignment_1(parent, next, actIndex, consumed);
			case 2: return new External_clause_ExternalKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class External_clause_SEMICOLONTerminalRuleCall_4 extends UnassignedTextToken {

	public External_clause_SEMICOLONTerminalRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getSEMICOLONTerminalRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new External_clause_AnnotationAssignment_3(parent, this, 0, inst);
			case 1: return new External_clause_External_function_callParserRuleCall_2(parent, this, 1, inst);
			case 2: return new External_clause_LanguageSpecificationAssignment_1(parent, this, 2, inst);
			case 3: return new External_clause_ExternalKeyword_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// (extAnnotation=annotation SEMICOLON)?
protected class External_clause_Group_5 extends GroupToken {
	
	public External_clause_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new External_clause_SEMICOLONTerminalRuleCall_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// extAnnotation=annotation
protected class External_clause_ExtAnnotationAssignment_5_0 extends AssignmentToken  {
	
	public External_clause_ExtAnnotationAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getExtAnnotationAssignment_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extAnnotation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extAnnotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExternal_clauseAccess().getExtAnnotationAnnotationParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new External_clause_SEMICOLONTerminalRuleCall_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class External_clause_SEMICOLONTerminalRuleCall_5_1 extends UnassignedTextToken {

	public External_clause_SEMICOLONTerminalRuleCall_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternal_clauseAccess().getSEMICOLONTerminalRuleCall_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new External_clause_ExtAnnotationAssignment_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule external_clause ****************/



/************ begin Rule ElementList ****************
 *
 * ElementList:
 *   ((elements+=ClassElement|annotations+=annotation) SEMICOLON)*;
 *
 **/

// ((elements+=ClassElement|annotations+=annotation) SEMICOLON)*
protected class ElementList_Group extends GroupToken {
	
	public ElementList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList_SEMICOLONTerminalRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// elements+=ClassElement|annotations+=annotation
protected class ElementList_Alternatives_0 extends AlternativesToken {

	public ElementList_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementListAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList_ElementsAssignment_0_0(parent, this, 0, inst);
			case 1: return new ElementList_AnnotationsAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// elements+=ClassElement
protected class ElementList_ElementsAssignment_0_0 extends AssignmentToken  {
	
	public ElementList_ElementsAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementListAccess().getElementsAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementListAccess().getElementsClassElementParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementList_Group(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// annotations+=annotation
protected class ElementList_AnnotationsAssignment_0_1 extends AssignmentToken  {
	
	public ElementList_AnnotationsAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementListAccess().getAnnotationsAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementListAccess().getAnnotationsAnnotationParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementList_Group(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


// SEMICOLON
protected class ElementList_SEMICOLONTerminalRuleCall_1 extends UnassignedTextToken {

	public ElementList_SEMICOLONTerminalRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementListAccess().getSEMICOLONTerminalRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ElementList ****************/


/************ begin Rule ElementList2 ****************
 *
 * ElementList2 returns ElementList:
 *   "public" {PublicElementList} ((elements+=ClassElement|annotations+=annotation)
 *   SEMICOLON)*|"protected" {ProtectesElementList} ((elements+=ClassElement|
 *   annotations+=annotation) SEMICOLON)*;
 *
 **/

// "public" {PublicElementList} ((elements+=ClassElement|annotations+=annotation)
// SEMICOLON)*|"protected" {ProtectesElementList} ((elements+=ClassElement|
// annotations+=annotation) SEMICOLON)*
protected class ElementList2_Alternatives extends AlternativesToken {

	public ElementList2_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementList2Access().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_Group_0(parent, this, 0, inst);
			case 1: return new ElementList2_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementList2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "public" {PublicElementList} ((elements+=ClassElement|annotations+=annotation)
// SEMICOLON)*
protected class ElementList2_Group_0 extends GroupToken {
	
	public ElementList2_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementList2Access().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_Group_0_2(parent, this, 0, inst);
			case 1: return new ElementList2_PublicElementListAction_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "public"
protected class ElementList2_PublicKeyword_0_0 extends KeywordToken  {
	
	public ElementList2_PublicKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementList2Access().getPublicKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// {PublicElementList}
protected class ElementList2_PublicElementListAction_0_1 extends ActionToken  {

	public ElementList2_PublicElementListAction_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getElementList2Access().getPublicElementListAction_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_PublicKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getElementList2Access().getPublicElementListAction_0_1().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ((elements+=ClassElement|annotations+=annotation) SEMICOLON)*
protected class ElementList2_Group_0_2 extends GroupToken {
	
	public ElementList2_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementList2Access().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_SEMICOLONTerminalRuleCall_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=ClassElement|annotations+=annotation
protected class ElementList2_Alternatives_0_2_0 extends AlternativesToken {

	public ElementList2_Alternatives_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementList2Access().getAlternatives_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_ElementsAssignment_0_2_0_0(parent, this, 0, inst);
			case 1: return new ElementList2_AnnotationsAssignment_0_2_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// elements+=ClassElement
protected class ElementList2_ElementsAssignment_0_2_0_0 extends AssignmentToken  {
	
	public ElementList2_ElementsAssignment_0_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementList2Access().getElementsAssignment_0_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementList2Access().getElementsClassElementParserRuleCall_0_2_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementList2_Group_0_2(parent, next, actIndex, consumed);
			case 1: return new ElementList2_PublicElementListAction_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// annotations+=annotation
protected class ElementList2_AnnotationsAssignment_0_2_0_1 extends AssignmentToken  {
	
	public ElementList2_AnnotationsAssignment_0_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementList2Access().getAnnotationsAssignment_0_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementList2Access().getAnnotationsAnnotationParserRuleCall_0_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementList2_Group_0_2(parent, next, actIndex, consumed);
			case 1: return new ElementList2_PublicElementListAction_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// SEMICOLON
protected class ElementList2_SEMICOLONTerminalRuleCall_0_2_1 extends UnassignedTextToken {

	public ElementList2_SEMICOLONTerminalRuleCall_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementList2Access().getSEMICOLONTerminalRuleCall_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_Alternatives_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// "protected" {ProtectesElementList} ((elements+=ClassElement|annotations+=
// annotation) SEMICOLON)*
protected class ElementList2_Group_1 extends GroupToken {
	
	public ElementList2_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementList2Access().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_Group_1_2(parent, this, 0, inst);
			case 1: return new ElementList2_ProtectesElementListAction_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "protected"
protected class ElementList2_ProtectedKeyword_1_0 extends KeywordToken  {
	
	public ElementList2_ProtectedKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementList2Access().getProtectedKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// {ProtectesElementList}
protected class ElementList2_ProtectesElementListAction_1_1 extends ActionToken  {

	public ElementList2_ProtectesElementListAction_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getElementList2Access().getProtectesElementListAction_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_ProtectedKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getElementList2Access().getProtectesElementListAction_1_1().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ((elements+=ClassElement|annotations+=annotation) SEMICOLON)*
protected class ElementList2_Group_1_2 extends GroupToken {
	
	public ElementList2_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementList2Access().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_SEMICOLONTerminalRuleCall_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=ClassElement|annotations+=annotation
protected class ElementList2_Alternatives_1_2_0 extends AlternativesToken {

	public ElementList2_Alternatives_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementList2Access().getAlternatives_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_ElementsAssignment_1_2_0_0(parent, this, 0, inst);
			case 1: return new ElementList2_AnnotationsAssignment_1_2_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// elements+=ClassElement
protected class ElementList2_ElementsAssignment_1_2_0_0 extends AssignmentToken  {
	
	public ElementList2_ElementsAssignment_1_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementList2Access().getElementsAssignment_1_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementList2Access().getElementsClassElementParserRuleCall_1_2_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementList2_Group_1_2(parent, next, actIndex, consumed);
			case 1: return new ElementList2_ProtectesElementListAction_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// annotations+=annotation
protected class ElementList2_AnnotationsAssignment_1_2_0_1 extends AssignmentToken  {
	
	public ElementList2_AnnotationsAssignment_1_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementList2Access().getAnnotationsAssignment_1_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementList2Access().getAnnotationsAnnotationParserRuleCall_1_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementList2_Group_1_2(parent, next, actIndex, consumed);
			case 1: return new ElementList2_ProtectesElementListAction_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// SEMICOLON
protected class ElementList2_SEMICOLONTerminalRuleCall_1_2_1 extends UnassignedTextToken {

	public ElementList2_SEMICOLONTerminalRuleCall_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementList2Access().getSEMICOLONTerminalRuleCall_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementList2_Alternatives_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule ElementList2 ****************/


/************ begin Rule ClassElement ****************
 *
 * ClassElement:
 *   import_clause|extends_clause|"redeclare"? "final"? "inner"? "outer"? ((
 *   ClassDefinition|component_clause)|ReplaceableElementClause); 
 * 
 * 
 * 
 * 	  
 * 	  
 * 	//| defineunit_clause
 *
 **/

// import_clause|extends_clause|"redeclare"? "final"? "inner"? "outer"? ((
// ClassDefinition|component_clause)|ReplaceableElementClause) 
// 
// 
// 
// 	  
// 	  
// 	//| defineunit_clause
protected class ClassElement_Alternatives extends AlternativesToken {

	public ClassElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClassElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassElement_Import_clauseParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ClassElement_Extends_clauseParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ClassElement_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClassElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// import_clause
protected class ClassElement_Import_clauseParserRuleCall_0 extends RuleCallToken {
	
	public ClassElement_Import_clauseParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassElementAccess().getImport_clauseParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Import_clause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getImport_clauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// extends_clause   
// 	//| defineunit_clause
protected class ClassElement_Extends_clauseParserRuleCall_1 extends RuleCallToken {
	
	public ClassElement_Extends_clauseParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassElementAccess().getExtends_clauseParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Extends_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Extends_clause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExtends_clauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "redeclare"? "final"? "inner"? "outer"? ((ClassDefinition|component_clause)|
// ReplaceableElementClause) 
// 	  
// 	  
// 	//| defineunit_clause
protected class ClassElement_Group_2 extends GroupToken {
	
	public ClassElement_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassElementAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassElement_Alternatives_2_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (ClassDefinition|component_clause)|ReplaceableElementClause
protected class ClassElement_Alternatives_2_4 extends AlternativesToken {

	public ClassElement_Alternatives_2_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClassElementAccess().getAlternatives_2_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassElement_Alternatives_2_4_0(parent, this, 0, inst);
			case 1: return new ClassElement_ReplaceableElementClauseParserRuleCall_2_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ClassDefinition|component_clause
protected class ClassElement_Alternatives_2_4_0 extends AlternativesToken {

	public ClassElement_Alternatives_2_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getClassElementAccess().getAlternatives_2_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassElement_ClassDefinitionParserRuleCall_2_4_0_0(parent, this, 0, inst);
			case 1: return new ClassElement_Component_clauseParserRuleCall_2_4_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ClassDefinition
protected class ClassElement_ClassDefinitionParserRuleCall_2_4_0_0 extends RuleCallToken {
	
	public ClassElement_ClassDefinitionParserRuleCall_2_4_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassElementAccess().getClassDefinitionParserRuleCall_2_4_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClassDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClassDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// component_clause
protected class ClassElement_Component_clauseParserRuleCall_2_4_0_1 extends RuleCallToken {
	
	public ClassElement_Component_clauseParserRuleCall_2_4_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassElementAccess().getComponent_clauseParserRuleCall_2_4_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Component_clause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getComponent_clauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


// ReplaceableElementClause
protected class ClassElement_ReplaceableElementClauseParserRuleCall_2_4_1 extends RuleCallToken {
	
	public ClassElement_ReplaceableElementClauseParserRuleCall_2_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassElementAccess().getReplaceableElementClauseParserRuleCall_2_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableElementClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReplaceableElementClause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReplaceableElementClauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}




/************ end Rule ClassElement ****************/


/************ begin Rule ReplaceableElementClause ****************
 *
 * ReplaceableElementClause:
 *   "replaceable" entity=( ClassDefinition | component_clause ) constrain=
 *   constraining_clause?;
 *
 **/

// "replaceable" entity=( ClassDefinition | component_clause ) constrain=
// constraining_clause?
protected class ReplaceableElementClause_Group extends GroupToken {
	
	public ReplaceableElementClause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getReplaceableElementClauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableElementClause_ConstrainAssignment_2(parent, this, 0, inst);
			case 1: return new ReplaceableElementClause_EntityAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReplaceableElementClauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "replaceable"
protected class ReplaceableElementClause_ReplaceableKeyword_0 extends KeywordToken  {
	
	public ReplaceableElementClause_ReplaceableKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReplaceableElementClauseAccess().getReplaceableKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// entity=( ClassDefinition | component_clause )
protected class ReplaceableElementClause_EntityAssignment_1 extends AssignmentToken  {
	
	public ReplaceableElementClause_EntityAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReplaceableElementClauseAccess().getEntityAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_Group(this, this, 0, inst);
			case 1: return new Component_clause_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entity",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getReplaceableElementClauseAccess().getEntityClassDefinitionParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponent_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getReplaceableElementClauseAccess().getEntityComponent_clauseParserRuleCall_1_0_1(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReplaceableElementClause_ReplaceableKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// constrain=constraining_clause?
protected class ReplaceableElementClause_ConstrainAssignment_2 extends AssignmentToken  {
	
	public ReplaceableElementClause_ConstrainAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReplaceableElementClauseAccess().getConstrainAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("constrain",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("constrain");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraining_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getReplaceableElementClauseAccess().getConstrainConstraining_clauseParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReplaceableElementClause_EntityAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ReplaceableElementClause ****************/


/************ begin Rule import_clause ****************
 *
 * import_clause returns ImportClause:
 *   "import" (asName=IDENT EQUALS name=name_path|name=name_path_star) comment=comment; 
 * 
 *     
 * 	            
 * 	
 * 
 * / *
 * defineunit_clause :
 * 	DEFINEUNIT IDENT (LPAR named_arguments RPAR)?		
 * 	;
 * * /
 * 
 * 
 * / *
 *  * 2.2.3 Extends
 *  * /
 * 
 * // Note that this is a minor modification of the standard by
 * // allowing the comment.
 *
 **/

// "import" (asName=IDENT EQUALS name=name_path|name=name_path_star) comment=comment
protected class Import_clause_Group extends GroupToken {
	
	public Import_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_CommentAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImport_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_clause_ImportKeyword_0 extends KeywordToken  {
	
	public Import_clause_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getImportKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// asName=IDENT EQUALS name=name_path|name=name_path_star
protected class Import_clause_Alternatives_1 extends AlternativesToken {

	public Import_clause_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_Group_1_0(parent, this, 0, inst);
			case 1: return new Import_clause_NameAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// asName=IDENT EQUALS name=name_path
protected class Import_clause_Group_1_0 extends GroupToken {
	
	public Import_clause_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_NameAssignment_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asName=IDENT
protected class Import_clause_AsNameAssignment_1_0_0 extends AssignmentToken  {
	
	public Import_clause_AsNameAssignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getAsNameAssignment_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImport_clauseAccess().getAsNameIDENTTerminalRuleCall_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// EQUALS
protected class Import_clause_EQUALSTerminalRuleCall_1_0_1 extends UnassignedTextToken {

	public Import_clause_EQUALSTerminalRuleCall_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getEQUALSTerminalRuleCall_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_AsNameAssignment_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=name_path
protected class Import_clause_NameAssignment_1_0_2 extends AssignmentToken  {
	
	public Import_clause_NameAssignment_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getNameAssignment_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_EQUALSTerminalRuleCall_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getImport_clauseAccess().getNameName_pathParserRuleCall_1_0_2_0();
			return obj;
		}
		return null;
	}

}


// name=name_path_star
protected class Import_clause_NameAssignment_1_1 extends AssignmentToken  {
	
	public Import_clause_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_clause_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getImport_clauseAccess().getNameName_path_starParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// comment=comment
protected class Import_clause_CommentAssignment_2 extends AssignmentToken  {
	
	public Import_clause_CommentAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImport_clauseAccess().getCommentAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImport_clauseAccess().getCommentCommentParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Import_clause_Alternatives_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule import_clause ****************/


/************ begin Rule extends_clause ****************
 *
 * extends_clause returns ExtendsClause:
 *   "extends" baseClass=name_path modification=class_modification? annotation=
 *   annotation?; 
 * 
 * / *
 * defineunit_clause :
 * 	DEFINEUNIT IDENT (LPAR named_arguments RPAR)?		
 * 	;
 * * /
 * 
 * 
 * / *
 *  * 2.2.3 Extends
 *  * /
 * 
 * // Note that this is a minor modification of the standard by
 * // allowing the comment.
 *
 **/

// "extends" baseClass=name_path modification=class_modification? annotation=
// annotation?
protected class Extends_clause_Group extends GroupToken {
	
	public Extends_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExtends_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Extends_clause_AnnotationAssignment_3(parent, this, 0, inst);
			case 1: return new Extends_clause_ModificationAssignment_2(parent, this, 1, inst);
			case 2: return new Extends_clause_BaseClassAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExtends_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "extends"
protected class Extends_clause_ExtendsKeyword_0 extends KeywordToken  {
	
	public Extends_clause_ExtendsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExtends_clauseAccess().getExtendsKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// baseClass=name_path
protected class Extends_clause_BaseClassAssignment_1 extends AssignmentToken  {
	
	public Extends_clause_BaseClassAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExtends_clauseAccess().getBaseClassAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Extends_clause_ExtendsKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("baseClass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("baseClass");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getExtends_clauseAccess().getBaseClassName_pathParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// modification=class_modification?
protected class Extends_clause_ModificationAssignment_2 extends AssignmentToken  {
	
	public Extends_clause_ModificationAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExtends_clauseAccess().getModificationAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExtends_clauseAccess().getModificationClass_modificationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Extends_clause_BaseClassAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// annotation=annotation?
protected class Extends_clause_AnnotationAssignment_3 extends AssignmentToken  {
	
	public Extends_clause_AnnotationAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExtends_clauseAccess().getAnnotationAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExtends_clauseAccess().getAnnotationAnnotationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Extends_clause_ModificationAssignment_2(parent, next, actIndex, consumed);
			case 1: return new Extends_clause_BaseClassAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule extends_clause ****************/


/************ begin Rule constraining_clause ****************
 *
 * constraining_clause returns ConstrainingClause:
 *   ("extends" name=name_path modification=class_modification?|"constrainedby" name=
 *   name_path modification=class_modification?) comment=comment; 
 * 
 *     
 * 	      
 * 	        
 * 	  
 * 	
 * 
 * / *
 *  * 2.2.4 Component clause
 *  * /
 *
 **/

// ("extends" name=name_path modification=class_modification?|"constrainedby" name=
// name_path modification=class_modification?) comment=comment
protected class Constraining_clause_Group extends GroupToken {
	
	public Constraining_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_CommentAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstraining_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "extends" name=name_path modification=class_modification?|"constrainedby" name=
// name_path modification=class_modification?
protected class Constraining_clause_Alternatives_0 extends AlternativesToken {

	public Constraining_clause_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_Group_0_0(parent, this, 0, inst);
			case 1: return new Constraining_clause_Group_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends" name=name_path modification=class_modification?
protected class Constraining_clause_Group_0_0 extends GroupToken {
	
	public Constraining_clause_Group_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getGroup_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_ModificationAssignment_0_0_2(parent, this, 0, inst);
			case 1: return new Constraining_clause_NameAssignment_0_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class Constraining_clause_ExtendsKeyword_0_0_0 extends KeywordToken  {
	
	public Constraining_clause_ExtendsKeyword_0_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getExtendsKeyword_0_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=name_path
protected class Constraining_clause_NameAssignment_0_0_1 extends AssignmentToken  {
	
	public Constraining_clause_NameAssignment_0_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getNameAssignment_0_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_ExtendsKeyword_0_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getConstraining_clauseAccess().getNameName_pathParserRuleCall_0_0_1_0();
			return obj;
		}
		return null;
	}

}

// modification=class_modification?
protected class Constraining_clause_ModificationAssignment_0_0_2 extends AssignmentToken  {
	
	public Constraining_clause_ModificationAssignment_0_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getModificationAssignment_0_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstraining_clauseAccess().getModificationClass_modificationParserRuleCall_0_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Constraining_clause_NameAssignment_0_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "constrainedby" name=name_path modification=class_modification?
protected class Constraining_clause_Group_0_1 extends GroupToken {
	
	public Constraining_clause_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_ModificationAssignment_0_1_2(parent, this, 0, inst);
			case 1: return new Constraining_clause_NameAssignment_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "constrainedby"
protected class Constraining_clause_ConstrainedbyKeyword_0_1_0 extends KeywordToken  {
	
	public Constraining_clause_ConstrainedbyKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getConstrainedbyKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=name_path
protected class Constraining_clause_NameAssignment_0_1_1 extends AssignmentToken  {
	
	public Constraining_clause_NameAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getNameAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_ConstrainedbyKeyword_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getConstraining_clauseAccess().getNameName_pathParserRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}

// modification=class_modification?
protected class Constraining_clause_ModificationAssignment_0_1_2 extends AssignmentToken  {
	
	public Constraining_clause_ModificationAssignment_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getModificationAssignment_0_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstraining_clauseAccess().getModificationClass_modificationParserRuleCall_0_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Constraining_clause_NameAssignment_0_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// comment=comment
protected class Constraining_clause_CommentAssignment_1 extends AssignmentToken  {
	
	public Constraining_clause_CommentAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraining_clauseAccess().getCommentAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstraining_clauseAccess().getCommentCommentParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Constraining_clause_Alternatives_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule constraining_clause ****************/


/************ begin Rule component_clause ****************
 *
 * component_clause returns ComponentClause:
 *   typePrefix=type_prefix typeSpecifier=type_specifier declarations+=
 *   component_declaration (COMMA declarations+=component_declaration)*; 
 * 
 * / *
 *  * 2.2.4 Component clause
 *  * /
 *
 **/

// typePrefix=type_prefix typeSpecifier=type_specifier declarations+=
// component_declaration (COMMA declarations+=component_declaration)*
protected class Component_clause_Group extends GroupToken {
	
	public Component_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getComponent_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_clause_Group_3(parent, this, 0, inst);
			case 1: return new Component_clause_DeclarationsAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getComponent_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// typePrefix=type_prefix
protected class Component_clause_TypePrefixAssignment_0 extends AssignmentToken  {
	
	public Component_clause_TypePrefixAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_clauseAccess().getTypePrefixAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typePrefix",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typePrefix");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getComponent_clauseAccess().getTypePrefixType_prefixParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// typeSpecifier=type_specifier
protected class Component_clause_TypeSpecifierAssignment_1 extends AssignmentToken  {
	
	public Component_clause_TypeSpecifierAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_clauseAccess().getTypeSpecifierAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeSpecifier",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeSpecifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponent_clauseAccess().getTypeSpecifierType_specifierParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_clause_TypePrefixAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declarations+=component_declaration
protected class Component_clause_DeclarationsAssignment_2 extends AssignmentToken  {
	
	public Component_clause_DeclarationsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_clauseAccess().getDeclarationsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_declaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("declarations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("declarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponent_declarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponent_clauseAccess().getDeclarationsComponent_declarationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_clause_TypeSpecifierAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA declarations+=component_declaration)*
protected class Component_clause_Group_3 extends GroupToken {
	
	public Component_clause_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getComponent_clauseAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_clause_DeclarationsAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// COMMA
protected class Component_clause_COMMATerminalRuleCall_3_0 extends UnassignedTextToken {

	public Component_clause_COMMATerminalRuleCall_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponent_clauseAccess().getCOMMATerminalRuleCall_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_clause_Group_3(parent, this, 0, inst);
			case 1: return new Component_clause_DeclarationsAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// declarations+=component_declaration
protected class Component_clause_DeclarationsAssignment_3_1 extends AssignmentToken  {
	
	public Component_clause_DeclarationsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_clauseAccess().getDeclarationsAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_declaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("declarations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("declarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponent_declarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponent_clauseAccess().getDeclarationsComponent_declarationParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_clause_COMMATerminalRuleCall_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule component_clause ****************/



/************ begin Rule type_specifier ****************
 *
 * type_specifier returns TypeSpecifier:
 *   name=name_path subscripts=array_subscripts?; 
 * 
 *     
 * 	
 * 	// TODO MML expr?
 * 	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
 *
 **/

// name=name_path subscripts=array_subscripts? 
// 	
// 	// TODO MML expr?
// 	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
protected class Type_specifier_Group extends GroupToken {
	
	public Type_specifier_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getType_specifierAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_specifier_SubscriptsAssignment_1(parent, this, 0, inst);
			case 1: return new Type_specifier_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=name_path 
// 	
// 	// TODO MML expr?
// 	 //((LESS type_specifier (COMMA type_specifier)* GREATER))?
protected class Type_specifier_NameAssignment_0 extends AssignmentToken  {
	
	public Type_specifier_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getType_specifierAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getType_specifierAccess().getNameName_pathParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// subscripts=array_subscripts?
protected class Type_specifier_SubscriptsAssignment_1 extends AssignmentToken  {
	
	public Type_specifier_SubscriptsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getType_specifierAccess().getSubscriptsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_specifier_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("subscripts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("subscripts");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getType_specifierAccess().getSubscriptsArray_subscriptsParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule type_specifier ****************/


/************ begin Rule component_declaration ****************
 *
 * component_declaration returns ComponentDeclaration:
 *   IDENT subscripts=array_subscripts? modification=modification? ("if" condition=
 *   expression)? comment=comment; 
 * 
 *     
 * 	          
 * 	
 * 
 * / *
 *  * 2.2.5 Modification
 *  * /
 *
 **/

// IDENT subscripts=array_subscripts? modification=modification? ("if" condition=
// expression)? comment=comment
protected class Component_declaration_Group extends GroupToken {
	
	public Component_declaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_declaration_CommentAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getComponent_declarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// IDENT
protected class Component_declaration_IDENTTerminalRuleCall_0 extends UnassignedTextToken {

	public Component_declaration_IDENTTerminalRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getIDENTTerminalRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// subscripts=array_subscripts?
protected class Component_declaration_SubscriptsAssignment_1 extends AssignmentToken  {
	
	public Component_declaration_SubscriptsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getSubscriptsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_declaration_IDENTTerminalRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("subscripts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("subscripts");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getComponent_declarationAccess().getSubscriptsArray_subscriptsParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// modification=modification?
protected class Component_declaration_ModificationAssignment_2 extends AssignmentToken  {
	
	public Component_declaration_ModificationAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getModificationAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Modification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponent_declarationAccess().getModificationModificationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_declaration_SubscriptsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Component_declaration_IDENTTerminalRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("if" condition=expression)?
protected class Component_declaration_Group_3 extends GroupToken {
	
	public Component_declaration_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_declaration_ConditionAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "if"
protected class Component_declaration_IfKeyword_3_0 extends KeywordToken  {
	
	public Component_declaration_IfKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getIfKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_declaration_ModificationAssignment_2(parent, this, 0, inst);
			case 1: return new Component_declaration_SubscriptsAssignment_1(parent, this, 1, inst);
			case 2: return new Component_declaration_IDENTTerminalRuleCall_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// condition=expression
protected class Component_declaration_ConditionAssignment_3_1 extends AssignmentToken  {
	
	public Component_declaration_ConditionAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getConditionAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_declaration_IfKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getComponent_declarationAccess().getConditionExpressionParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// comment=comment
protected class Component_declaration_CommentAssignment_4 extends AssignmentToken  {
	
	public Component_declaration_CommentAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getComponent_declarationAccess().getCommentAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponent_declarationAccess().getCommentCommentParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_declaration_Group_3(parent, next, actIndex, consumed);
			case 1: return new Component_declaration_ModificationAssignment_2(parent, next, actIndex, consumed);
			case 2: return new Component_declaration_SubscriptsAssignment_1(parent, next, actIndex, consumed);
			case 3: return new Component_declaration_IDENTTerminalRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule component_declaration ****************/


/************ begin Rule modification ****************
 *
 * modification returns Modification:
 *   class_modification|SimpleModification; 
 * 
 * / *
 *  * 2.2.5 Modification
 *  * /
 *
 **/

// class_modification|SimpleModification 
// 
// / *
//  * 2.2.5 Modification
//  * /
protected class Modification_Alternatives extends AlternativesToken {

	public Modification_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getModificationAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Modification_Class_modificationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Modification_SimpleModificationParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModificationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// class_modification
protected class Modification_Class_modificationParserRuleCall_0 extends RuleCallToken {
	
	public Modification_Class_modificationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModificationAccess().getClass_modificationParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Class_modification_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SimpleModification
protected class Modification_SimpleModificationParserRuleCall_1 extends RuleCallToken {
	
	public Modification_SimpleModificationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModificationAccess().getSimpleModificationParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleModification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleModification_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimpleModificationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule modification ****************/


/************ begin Rule SimpleModification ****************
 *
 * SimpleModification:
 *   EQUALS expression=expression|ASSIGN expression=expression;
 *
 **/

// EQUALS expression=expression|ASSIGN expression=expression
protected class SimpleModification_Alternatives extends AlternativesToken {

	public SimpleModification_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSimpleModificationAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleModification_Group_0(parent, this, 0, inst);
			case 1: return new SimpleModification_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleModificationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// EQUALS expression=expression
protected class SimpleModification_Group_0 extends GroupToken {
	
	public SimpleModification_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleModificationAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleModification_ExpressionAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// EQUALS
protected class SimpleModification_EQUALSTerminalRuleCall_0_0 extends UnassignedTextToken {

	public SimpleModification_EQUALSTerminalRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleModificationAccess().getEQUALSTerminalRuleCall_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expression=expression
protected class SimpleModification_ExpressionAssignment_0_1 extends AssignmentToken  {
	
	public SimpleModification_ExpressionAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleModificationAccess().getExpressionAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleModification_EQUALSTerminalRuleCall_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSimpleModificationAccess().getExpressionExpressionParserRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// ASSIGN expression=expression
protected class SimpleModification_Group_1 extends GroupToken {
	
	public SimpleModification_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleModificationAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleModification_ExpressionAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ASSIGN
protected class SimpleModification_ASSIGNTerminalRuleCall_1_0 extends UnassignedTextToken {

	public SimpleModification_ASSIGNTerminalRuleCall_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleModificationAccess().getASSIGNTerminalRuleCall_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expression=expression
protected class SimpleModification_ExpressionAssignment_1_1 extends AssignmentToken  {
	
	public SimpleModification_ExpressionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleModificationAccess().getExpressionAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleModification_ASSIGNTerminalRuleCall_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSimpleModificationAccess().getExpressionExpressionParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule SimpleModification ****************/


/************ begin Rule class_modification ****************
 *
 * class_modification returns ClassModification:
 *   LPAR (arguments+=argument (COMMA arguments+=argument)*)? RPAR (EQUALS expression=
 *   expression)?;
 *
 **/

// LPAR (arguments+=argument (COMMA arguments+=argument)*)? RPAR (EQUALS expression=
// expression)?
protected class Class_modification_Group extends GroupToken {
	
	public Class_modification_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group_3(parent, this, 0, inst);
			case 1: return new Class_modification_RPARTerminalRuleCall_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// LPAR
protected class Class_modification_LPARTerminalRuleCall_0 extends UnassignedTextToken {

	public Class_modification_LPARTerminalRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getLPARTerminalRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (arguments+=argument (COMMA arguments+=argument)*)?
protected class Class_modification_Group_1 extends GroupToken {
	
	public Class_modification_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group_1_1(parent, this, 0, inst);
			case 1: return new Class_modification_ArgumentsAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// arguments+=argument
protected class Class_modification_ArgumentsAssignment_1_0 extends AssignmentToken  {
	
	public Class_modification_ArgumentsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getArgumentsAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("arguments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClass_modificationAccess().getArgumentsArgumentParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Class_modification_LPARTerminalRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA arguments+=argument)*
protected class Class_modification_Group_1_1 extends GroupToken {
	
	public Class_modification_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_ArgumentsAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// COMMA
protected class Class_modification_COMMATerminalRuleCall_1_1_0 extends UnassignedTextToken {

	public Class_modification_COMMATerminalRuleCall_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getCOMMATerminalRuleCall_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group_1_1(parent, this, 0, inst);
			case 1: return new Class_modification_ArgumentsAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// arguments+=argument
protected class Class_modification_ArgumentsAssignment_1_1_1 extends AssignmentToken  {
	
	public Class_modification_ArgumentsAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getArgumentsAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("arguments",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClass_modificationAccess().getArgumentsArgumentParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Class_modification_COMMATerminalRuleCall_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// RPAR
protected class Class_modification_RPARTerminalRuleCall_2 extends UnassignedTextToken {

	public Class_modification_RPARTerminalRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getRPARTerminalRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group_1(parent, this, 0, inst);
			case 1: return new Class_modification_LPARTerminalRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (EQUALS expression=expression)?
protected class Class_modification_Group_3 extends GroupToken {
	
	public Class_modification_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_ExpressionAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// EQUALS
protected class Class_modification_EQUALSTerminalRuleCall_3_0 extends UnassignedTextToken {

	public Class_modification_EQUALSTerminalRuleCall_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getEQUALSTerminalRuleCall_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_RPARTerminalRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expression=expression
protected class Class_modification_ExpressionAssignment_3_1 extends AssignmentToken  {
	
	public Class_modification_ExpressionAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClass_modificationAccess().getExpressionAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_EQUALSTerminalRuleCall_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClass_modificationAccess().getExpressionExpressionParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule class_modification ****************/


/************ begin Rule argument ****************
 *
 * argument:
 *   "each"? "final"? (ElementModification|ElementReplaceableClause)|
 *   ElementRedeclaration;
 *
 **/

// "each"? "final"? (ElementModification|ElementReplaceableClause)|
// ElementRedeclaration
protected class Argument_Alternatives extends AlternativesToken {

	public Argument_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getArgumentAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_Group_0(parent, this, 0, inst);
			case 1: return new Argument_ElementRedeclarationParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "each"? "final"? (ElementModification|ElementReplaceableClause)
protected class Argument_Group_0 extends GroupToken {
	
	public Argument_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_Alternatives_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ElementModification|ElementReplaceableClause
protected class Argument_Alternatives_0_2 extends AlternativesToken {

	public Argument_Alternatives_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getArgumentAccess().getAlternatives_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_ElementModificationParserRuleCall_0_2_0(parent, this, 0, inst);
			case 1: return new Argument_ElementReplaceableClauseParserRuleCall_0_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ElementModification
protected class Argument_ElementModificationParserRuleCall_0_2_0 extends RuleCallToken {
	
	public Argument_ElementModificationParserRuleCall_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getArgumentAccess().getElementModificationParserRuleCall_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementModification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElementModification_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementModificationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ElementReplaceableClause
protected class Argument_ElementReplaceableClauseParserRuleCall_0_2_1 extends RuleCallToken {
	
	public Argument_ElementReplaceableClauseParserRuleCall_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getArgumentAccess().getElementReplaceableClauseParserRuleCall_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementReplaceableClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElementReplaceableClause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementReplaceableClauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}



// ElementRedeclaration
protected class Argument_ElementRedeclarationParserRuleCall_1 extends RuleCallToken {
	
	public Argument_ElementRedeclarationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getArgumentAccess().getElementRedeclarationParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementRedeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElementRedeclaration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementRedeclarationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule argument ****************/


/************ begin Rule ElementModification ****************
 *
 * ElementModification:
 *   componetRef=component_reference modification=modification? comment=string_comment?
 * ;
 *
 **/

// componetRef=component_reference modification=modification? comment=string_comment?
protected class ElementModification_Group extends GroupToken {
	
	public ElementModification_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementModificationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementModification_CommentAssignment_2(parent, this, 0, inst);
			case 1: return new ElementModification_ModificationAssignment_1(parent, this, 1, inst);
			case 2: return new ElementModification_ComponetRefAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementModificationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// componetRef=component_reference
protected class ElementModification_ComponetRefAssignment_0 extends AssignmentToken  {
	
	public ElementModification_ComponetRefAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementModificationAccess().getComponetRefAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("componetRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("componetRef");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getElementModificationAccess().getComponetRefComponent_referenceParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// modification=modification?
protected class ElementModification_ModificationAssignment_1 extends AssignmentToken  {
	
	public ElementModification_ModificationAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementModificationAccess().getModificationAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Modification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementModificationAccess().getModificationModificationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementModification_ComponetRefAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// comment=string_comment?
protected class ElementModification_CommentAssignment_2 extends AssignmentToken  {
	
	public ElementModification_CommentAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementModificationAccess().getCommentAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementModification_ModificationAssignment_1(parent, this, 0, inst);
			case 1: return new ElementModification_ComponetRefAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getElementModificationAccess().getCommentString_commentParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ElementModification ****************/


/************ begin Rule ElementRedeclaration ****************
 *
 * ElementRedeclaration:
 *   "redeclare" "each"? "final"? ((ClassDefinition|ElementComponentClause)|
 *   ElementReplaceableClause);
 *
 **/

// "redeclare" "each"? "final"? ((ClassDefinition|ElementComponentClause)|
// ElementReplaceableClause)
protected class ElementRedeclaration_Group extends GroupToken {
	
	public ElementRedeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementRedeclarationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementRedeclaration_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementRedeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "redeclare"
protected class ElementRedeclaration_RedeclareKeyword_0 extends KeywordToken  {
	
	public ElementRedeclaration_RedeclareKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementRedeclarationAccess().getRedeclareKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (ClassDefinition|ElementComponentClause)|ElementReplaceableClause
protected class ElementRedeclaration_Alternatives_3 extends AlternativesToken {

	public ElementRedeclaration_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementRedeclarationAccess().getAlternatives_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementRedeclaration_Alternatives_3_0(parent, this, 0, inst);
			case 1: return new ElementRedeclaration_ElementReplaceableClauseParserRuleCall_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ClassDefinition|ElementComponentClause
protected class ElementRedeclaration_Alternatives_3_0 extends AlternativesToken {

	public ElementRedeclaration_Alternatives_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementRedeclarationAccess().getAlternatives_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementRedeclaration_ClassDefinitionParserRuleCall_3_0_0(parent, this, 0, inst);
			case 1: return new ElementRedeclaration_ElementComponentClauseParserRuleCall_3_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ClassDefinition
protected class ElementRedeclaration_ClassDefinitionParserRuleCall_3_0_0 extends RuleCallToken {
	
	public ElementRedeclaration_ClassDefinitionParserRuleCall_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementRedeclarationAccess().getClassDefinitionParserRuleCall_3_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClassDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClassDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementRedeclaration_RedeclareKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ElementComponentClause
protected class ElementRedeclaration_ElementComponentClauseParserRuleCall_3_0_1 extends RuleCallToken {
	
	public ElementRedeclaration_ElementComponentClauseParserRuleCall_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementRedeclarationAccess().getElementComponentClauseParserRuleCall_3_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementComponentClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElementComponentClause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementComponentClauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementRedeclaration_RedeclareKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


// ElementReplaceableClause
protected class ElementRedeclaration_ElementReplaceableClauseParserRuleCall_3_1 extends RuleCallToken {
	
	public ElementRedeclaration_ElementReplaceableClauseParserRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementRedeclarationAccess().getElementReplaceableClauseParserRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementReplaceableClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElementReplaceableClause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementReplaceableClauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementRedeclaration_RedeclareKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule ElementRedeclaration ****************/


/************ begin Rule ElementReplaceableClause ****************
 *
 * ElementReplaceableClause:
 *   "replaceable" element=( ClassDefinition | ElementComponentClause ) constraint=
 *   constraining_clause?;
 *
 **/

// "replaceable" element=( ClassDefinition | ElementComponentClause ) constraint=
// constraining_clause?
protected class ElementReplaceableClause_Group extends GroupToken {
	
	public ElementReplaceableClause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementReplaceableClauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementReplaceableClause_ConstraintAssignment_2(parent, this, 0, inst);
			case 1: return new ElementReplaceableClause_ElementAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementReplaceableClauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "replaceable"
protected class ElementReplaceableClause_ReplaceableKeyword_0 extends KeywordToken  {
	
	public ElementReplaceableClause_ReplaceableKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementReplaceableClauseAccess().getReplaceableKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// element=( ClassDefinition | ElementComponentClause )
protected class ElementReplaceableClause_ElementAssignment_1 extends AssignmentToken  {
	
	public ElementReplaceableClause_ElementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementReplaceableClauseAccess().getElementAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDefinition_Group(this, this, 0, inst);
			case 1: return new ElementComponentClause_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("element",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("element");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementReplaceableClauseAccess().getElementClassDefinitionParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementComponentClauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementReplaceableClauseAccess().getElementElementComponentClauseParserRuleCall_1_0_1(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementReplaceableClause_ReplaceableKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// constraint=constraining_clause?
protected class ElementReplaceableClause_ConstraintAssignment_2 extends AssignmentToken  {
	
	public ElementReplaceableClause_ConstraintAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementReplaceableClauseAccess().getConstraintAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constraining_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("constraint",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("constraint");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraining_clauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementReplaceableClauseAccess().getConstraintConstraining_clauseParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementReplaceableClause_ElementAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElementReplaceableClause ****************/


/************ begin Rule ElementComponentClause ****************
 *
 * ElementComponentClause:
 *   typePrefix=type_prefix typeSpecifier=type_specifier IDENT subscripts=
 *   array_subscripts? modification=modification? comment=comment; 
 * 	
 *   
 * 	       
 * 	  
 * 	
 * 
 * 
 * / *
 *  * 2.2.6 Equations
 *  * /
 *
 **/

// typePrefix=type_prefix typeSpecifier=type_specifier IDENT subscripts=
// array_subscripts? modification=modification? comment=comment
protected class ElementComponentClause_Group extends GroupToken {
	
	public ElementComponentClause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementComponentClauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementComponentClause_CommentAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementComponentClauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// typePrefix=type_prefix
protected class ElementComponentClause_TypePrefixAssignment_0 extends AssignmentToken  {
	
	public ElementComponentClause_TypePrefixAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementComponentClauseAccess().getTypePrefixAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typePrefix",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typePrefix");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getElementComponentClauseAccess().getTypePrefixType_prefixParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// typeSpecifier=type_specifier
protected class ElementComponentClause_TypeSpecifierAssignment_1 extends AssignmentToken  {
	
	public ElementComponentClause_TypeSpecifierAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementComponentClauseAccess().getTypeSpecifierAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_specifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeSpecifier",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeSpecifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getType_specifierRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementComponentClauseAccess().getTypeSpecifierType_specifierParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementComponentClause_TypePrefixAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// IDENT
protected class ElementComponentClause_IDENTTerminalRuleCall_2 extends UnassignedTextToken {

	public ElementComponentClause_IDENTTerminalRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementComponentClauseAccess().getIDENTTerminalRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementComponentClause_TypeSpecifierAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// subscripts=array_subscripts?
protected class ElementComponentClause_SubscriptsAssignment_3 extends AssignmentToken  {
	
	public ElementComponentClause_SubscriptsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementComponentClauseAccess().getSubscriptsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementComponentClause_IDENTTerminalRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("subscripts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("subscripts");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getElementComponentClauseAccess().getSubscriptsArray_subscriptsParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// modification=modification?
protected class ElementComponentClause_ModificationAssignment_4 extends AssignmentToken  {
	
	public ElementComponentClause_ModificationAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementComponentClauseAccess().getModificationAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Modification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modification",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementComponentClauseAccess().getModificationModificationParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementComponentClause_SubscriptsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new ElementComponentClause_IDENTTerminalRuleCall_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// comment=comment
protected class ElementComponentClause_CommentAssignment_5 extends AssignmentToken  {
	
	public ElementComponentClause_CommentAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementComponentClauseAccess().getCommentAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementComponentClauseAccess().getCommentCommentParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementComponentClause_ModificationAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ElementComponentClause_SubscriptsAssignment_3(parent, next, actIndex, consumed);
			case 2: return new ElementComponentClause_IDENTTerminalRuleCall_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElementComponentClause ****************/


/************ begin Rule equation_rule_clause ****************
 *
 * equation_rule_clause returns EquationClause:
 *   "equation" (equationRules+=equation_rule SEMICOLON|annotations+=annotation
 *   SEMICOLON)+; 
 * 
 * 
 * / *
 *  * 2.2.6 Equations
 *  * /
 *
 **/

// "equation" (equationRules+=equation_rule SEMICOLON|annotations+=annotation
// SEMICOLON)+
protected class Equation_rule_clause_Group extends GroupToken {
	
	public Equation_rule_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEquation_rule_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "equation"
protected class Equation_rule_clause_EquationKeyword_0 extends KeywordToken  {
	
	public Equation_rule_clause_EquationKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getEquationKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (equationRules+=equation_rule SEMICOLON|annotations+=annotation SEMICOLON)+
protected class Equation_rule_clause_Alternatives_1 extends AlternativesToken {

	public Equation_rule_clause_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_Group_1_0(parent, this, 0, inst);
			case 1: return new Equation_rule_clause_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// equationRules+=equation_rule SEMICOLON
protected class Equation_rule_clause_Group_1_0 extends GroupToken {
	
	public Equation_rule_clause_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_SEMICOLONTerminalRuleCall_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// equationRules+=equation_rule
protected class Equation_rule_clause_EquationRulesAssignment_1_0_0 extends AssignmentToken  {
	
	public Equation_rule_clause_EquationRulesAssignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getEquationRulesAssignment_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("equationRules",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("equationRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEquation_rule_clauseAccess().getEquationRulesEquation_ruleParserRuleCall_1_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Equation_rule_clause_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new Equation_rule_clause_EquationKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Equation_rule_clause_SEMICOLONTerminalRuleCall_1_0_1 extends UnassignedTextToken {

	public Equation_rule_clause_SEMICOLONTerminalRuleCall_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getSEMICOLONTerminalRuleCall_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_EquationRulesAssignment_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// annotations+=annotation SEMICOLON
protected class Equation_rule_clause_Group_1_1 extends GroupToken {
	
	public Equation_rule_clause_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_SEMICOLONTerminalRuleCall_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// annotations+=annotation
protected class Equation_rule_clause_AnnotationsAssignment_1_1_0 extends AssignmentToken  {
	
	public Equation_rule_clause_AnnotationsAssignment_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getAnnotationsAssignment_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEquation_rule_clauseAccess().getAnnotationsAnnotationParserRuleCall_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Equation_rule_clause_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new Equation_rule_clause_EquationKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Equation_rule_clause_SEMICOLONTerminalRuleCall_1_1_1 extends UnassignedTextToken {

	public Equation_rule_clause_SEMICOLONTerminalRuleCall_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_rule_clauseAccess().getSEMICOLONTerminalRuleCall_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_AnnotationsAssignment_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule equation_rule_clause ****************/


/************ begin Rule algorithm_clause ****************
 *
 * algorithm_clause:
 *   "algorithm" (algorithmRules+=algorithm SEMICOLON|annotations+=annotation SEMICOLON)
 *   +;
 *
 **/

// "algorithm" (algorithmRules+=algorithm SEMICOLON|annotations+=annotation SEMICOLON)
// +
protected class Algorithm_clause_Group extends GroupToken {
	
	public Algorithm_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAlgorithm_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "algorithm"
protected class Algorithm_clause_AlgorithmKeyword_0 extends KeywordToken  {
	
	public Algorithm_clause_AlgorithmKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getAlgorithmKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (algorithmRules+=algorithm SEMICOLON|annotations+=annotation SEMICOLON)+
protected class Algorithm_clause_Alternatives_1 extends AlternativesToken {

	public Algorithm_clause_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_Group_1_0(parent, this, 0, inst);
			case 1: return new Algorithm_clause_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// algorithmRules+=algorithm SEMICOLON
protected class Algorithm_clause_Group_1_0 extends GroupToken {
	
	public Algorithm_clause_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_SEMICOLONTerminalRuleCall_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// algorithmRules+=algorithm
protected class Algorithm_clause_AlgorithmRulesAssignment_1_0_0 extends AssignmentToken  {
	
	public Algorithm_clause_AlgorithmRulesAssignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getAlgorithmRulesAssignment_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("algorithmRules",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("algorithmRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlgorithmRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAlgorithm_clauseAccess().getAlgorithmRulesAlgorithmParserRuleCall_1_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Algorithm_clause_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new Algorithm_clause_AlgorithmKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Algorithm_clause_SEMICOLONTerminalRuleCall_1_0_1 extends UnassignedTextToken {

	public Algorithm_clause_SEMICOLONTerminalRuleCall_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getSEMICOLONTerminalRuleCall_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_AlgorithmRulesAssignment_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// annotations+=annotation SEMICOLON
protected class Algorithm_clause_Group_1_1 extends GroupToken {
	
	public Algorithm_clause_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_SEMICOLONTerminalRuleCall_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// annotations+=annotation
protected class Algorithm_clause_AnnotationsAssignment_1_1_0 extends AssignmentToken  {
	
	public Algorithm_clause_AnnotationsAssignment_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getAnnotationsAssignment_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAlgorithm_clauseAccess().getAnnotationsAnnotationParserRuleCall_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Algorithm_clause_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new Algorithm_clause_AlgorithmKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Algorithm_clause_SEMICOLONTerminalRuleCall_1_1_1 extends UnassignedTextToken {

	public Algorithm_clause_SEMICOLONTerminalRuleCall_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithm_clauseAccess().getSEMICOLONTerminalRuleCall_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_AnnotationsAssignment_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule algorithm_clause ****************/


/************ begin Rule initial_equation_rule_clause ****************
 *
 * initial_equation_rule_clause:
 *   "initial" equation_rule_clause;
 *
 **/

// "initial" equation_rule_clause
protected class Initial_equation_rule_clause_Group extends GroupToken {
	
	public Initial_equation_rule_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInitial_equation_rule_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initial_equation_rule_clause_Equation_rule_clauseParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInitial_equation_rule_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "initial"
protected class Initial_equation_rule_clause_InitialKeyword_0 extends KeywordToken  {
	
	public Initial_equation_rule_clause_InitialKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitial_equation_rule_clauseAccess().getInitialKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// equation_rule_clause
protected class Initial_equation_rule_clause_Equation_rule_clauseParserRuleCall_1 extends RuleCallToken {
	
	public Initial_equation_rule_clause_Equation_rule_clauseParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInitial_equation_rule_clauseAccess().getEquation_rule_clauseParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Equation_rule_clause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEquation_rule_clauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initial_equation_rule_clause_InitialKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule initial_equation_rule_clause ****************/


/************ begin Rule initial_algorithm_clause ****************
 *
 * initial_algorithm_clause:
 *   "initial" algorithm_clause;
 *
 **/

// "initial" algorithm_clause
protected class Initial_algorithm_clause_Group extends GroupToken {
	
	public Initial_algorithm_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInitial_algorithm_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initial_algorithm_clause_Algorithm_clauseParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInitial_algorithm_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "initial"
protected class Initial_algorithm_clause_InitialKeyword_0 extends KeywordToken  {
	
	public Initial_algorithm_clause_InitialKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitial_algorithm_clauseAccess().getInitialKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// algorithm_clause
protected class Initial_algorithm_clause_Algorithm_clauseParserRuleCall_1 extends RuleCallToken {
	
	public Initial_algorithm_clause_Algorithm_clauseParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInitial_algorithm_clauseAccess().getAlgorithm_clauseParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Algorithm_clause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAlgorithm_clauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initial_algorithm_clause_InitialKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule initial_algorithm_clause ****************/


/************ begin Rule equation_rule ****************
 *
 * equation_rule:
 *   (equality_equation_rule|conditional_equation_rule_e|for_clause_e|connect_clause|
 *   when_clause_e) comment=comment; 
 * 
 *   
 * 	  	 
 * 	  
 * 	  
 * 	  
 * 	     
 * 	//| FAILURE LPAR equation_rule RPAR
 * 	 //| EQUALITY LPAR equation_rule RPAR
 *
 **/

// (equality_equation_rule|conditional_equation_rule_e|for_clause_e|connect_clause|
// when_clause_e) comment=comment 
// 	  	 
// 	  
// 	  
// 	  
// 	     
// 	//| FAILURE LPAR equation_rule RPAR
// 	 //| EQUALITY LPAR equation_rule RPAR
protected class Equation_rule_Group extends GroupToken {
	
	public Equation_rule_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_CommentAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// equality_equation_rule|conditional_equation_rule_e|for_clause_e|connect_clause|
// when_clause_e 
// 	  	 
// 	  
// 	  
// 	  
// 	     
// 	//| FAILURE LPAR equation_rule RPAR
// 	 //| EQUALITY LPAR equation_rule RPAR
protected class Equation_rule_Alternatives_0 extends AlternativesToken {

	public Equation_rule_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Equality_equation_ruleParserRuleCall_0_0(parent, this, 0, inst);
			case 1: return new Equation_rule_Conditional_equation_rule_eParserRuleCall_0_1(parent, this, 1, inst);
			case 2: return new Equation_rule_For_clause_eParserRuleCall_0_2(parent, this, 2, inst);
			case 3: return new Equation_rule_Connect_clauseParserRuleCall_0_3(parent, this, 3, inst);
			case 4: return new Equation_rule_When_clause_eParserRuleCall_0_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// equality_equation_rule
protected class Equation_rule_Equality_equation_ruleParserRuleCall_0_0 extends UnassignedTextToken {

	public Equation_rule_Equality_equation_ruleParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getEquality_equation_ruleParserRuleCall_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// conditional_equation_rule_e
protected class Equation_rule_Conditional_equation_rule_eParserRuleCall_0_1 extends RuleCallToken {
	
	public Equation_rule_Conditional_equation_rule_eParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getConditional_equation_rule_eParserRuleCall_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Conditional_equation_rule_e_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConditional_equation_rule_eRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// for_clause_e
protected class Equation_rule_For_clause_eParserRuleCall_0_2 extends RuleCallToken {
	
	public Equation_rule_For_clause_eParserRuleCall_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getFor_clause_eParserRuleCall_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(For_clause_e_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFor_clause_eRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// connect_clause
protected class Equation_rule_Connect_clauseParserRuleCall_0_3 extends UnassignedTextToken {

	public Equation_rule_Connect_clauseParserRuleCall_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getConnect_clauseParserRuleCall_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// when_clause_e      
// 	//| FAILURE LPAR equation_rule RPAR
// 	 //| EQUALITY LPAR equation_rule RPAR
protected class Equation_rule_When_clause_eParserRuleCall_0_4 extends RuleCallToken {
	
	public Equation_rule_When_clause_eParserRuleCall_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getWhen_clause_eParserRuleCall_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(When_clause_e_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWhen_clause_eRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


// comment=comment
protected class Equation_rule_CommentAssignment_1 extends AssignmentToken  {
	
	public Equation_rule_CommentAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEquation_ruleAccess().getCommentAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEquation_ruleAccess().getCommentCommentParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Equation_rule_Alternatives_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule equation_rule ****************/


/************ begin Rule algorithm ****************
 *
 * algorithm:
 *   (assign_clause_a|conditional_equation_rule_a|for_clause_a|while_clause|
 *   when_clause_a|"break"|"return") comment=comment; 
 * 
 *   
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * 	//| FAILURE LPAR algorithm RPAR
 * 	 //| EQUALITY LPAR algorithm RPAR
 *
 **/

// (assign_clause_a|conditional_equation_rule_a|for_clause_a|while_clause|
// when_clause_a|"break"|"return") comment=comment 
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// 	//| FAILURE LPAR algorithm RPAR
// 	 //| EQUALITY LPAR algorithm RPAR
protected class Algorithm_Group extends GroupToken {
	
	public Algorithm_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_CommentAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAlgorithmRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// assign_clause_a|conditional_equation_rule_a|for_clause_a|while_clause|
// when_clause_a|"break"|"return" 
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// 	//| FAILURE LPAR algorithm RPAR
// 	 //| EQUALITY LPAR algorithm RPAR
protected class Algorithm_Alternatives_0 extends AlternativesToken {

	public Algorithm_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_Assign_clause_aParserRuleCall_0_0(parent, this, 0, inst);
			case 1: return new Algorithm_Conditional_equation_rule_aParserRuleCall_0_1(parent, this, 1, inst);
			case 2: return new Algorithm_For_clause_aParserRuleCall_0_2(parent, this, 2, inst);
			case 3: return new Algorithm_While_clauseParserRuleCall_0_3(parent, this, 3, inst);
			case 4: return new Algorithm_When_clause_aParserRuleCall_0_4(parent, this, 4, inst);
			case 5: return new Algorithm_BreakKeyword_0_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// assign_clause_a
protected class Algorithm_Assign_clause_aParserRuleCall_0_0 extends UnassignedTextToken {

	public Algorithm_Assign_clause_aParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getAssign_clause_aParserRuleCall_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// conditional_equation_rule_a
protected class Algorithm_Conditional_equation_rule_aParserRuleCall_0_1 extends RuleCallToken {
	
	public Algorithm_Conditional_equation_rule_aParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getConditional_equation_rule_aParserRuleCall_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Conditional_equation_rule_a_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConditional_equation_rule_aRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// for_clause_a
protected class Algorithm_For_clause_aParserRuleCall_0_2 extends RuleCallToken {
	
	public Algorithm_For_clause_aParserRuleCall_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getFor_clause_aParserRuleCall_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(For_clause_a_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFor_clause_aRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// while_clause
protected class Algorithm_While_clauseParserRuleCall_0_3 extends RuleCallToken {
	
	public Algorithm_While_clauseParserRuleCall_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getWhile_clauseParserRuleCall_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(While_clause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWhile_clauseRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// when_clause_a
protected class Algorithm_When_clause_aParserRuleCall_0_4 extends RuleCallToken {
	
	public Algorithm_When_clause_aParserRuleCall_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getWhen_clause_aParserRuleCall_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(When_clause_a_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWhen_clause_aRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "break"
protected class Algorithm_BreakKeyword_0_5 extends KeywordToken  {
	
	public Algorithm_BreakKeyword_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getBreakKeyword_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


// comment=comment
protected class Algorithm_CommentAssignment_1 extends AssignmentToken  {
	
	public Algorithm_CommentAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAlgorithmAccess().getCommentAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAlgorithmAccess().getCommentCommentParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Algorithm_Alternatives_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule algorithm ****************/




/************ begin Rule conditional_equation_rule_e ****************
 *
 * conditional_equation_rule_e returns ConditionalEquationRule:
 *   "if" expression "then" (thenEquationClauses+=equation_rule SEMICOLON)* elseifClauses
 *   +=equation_rule_elseif* ("else" (elseEquationClauses+=equation_rule SEMICOLON)*)?
 *   "end" "if";
 *
 **/

// "if" expression "then" (thenEquationClauses+=equation_rule SEMICOLON)* elseifClauses
// +=equation_rule_elseif* ("else" (elseEquationClauses+=equation_rule SEMICOLON)*)?
// "end" "if"
protected class Conditional_equation_rule_e_Group extends GroupToken {
	
	public Conditional_equation_rule_e_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_IfKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConditional_equation_rule_eRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "if"
protected class Conditional_equation_rule_e_IfKeyword_0 extends KeywordToken  {
	
	public Conditional_equation_rule_e_IfKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getIfKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expression
protected class Conditional_equation_rule_e_ExpressionParserRuleCall_1 extends UnassignedTextToken {

	public Conditional_equation_rule_e_ExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_IfKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "then"
protected class Conditional_equation_rule_e_ThenKeyword_2 extends KeywordToken  {
	
	public Conditional_equation_rule_e_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_ExpressionParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenEquationClauses+=equation_rule SEMICOLON)*
protected class Conditional_equation_rule_e_Group_3 extends GroupToken {
	
	public Conditional_equation_rule_e_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenEquationClauses+=equation_rule
protected class Conditional_equation_rule_e_ThenEquationClausesAssignment_3_0 extends AssignmentToken  {
	
	public Conditional_equation_rule_e_ThenEquationClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getThenEquationClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenEquationClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenEquationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditional_equation_rule_eAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conditional_equation_rule_e_Group_3(parent, next, actIndex, consumed);
			case 1: return new Conditional_equation_rule_e_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Conditional_equation_rule_e_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Conditional_equation_rule_e_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_ThenEquationClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// elseifClauses+=equation_rule_elseif*
protected class Conditional_equation_rule_e_ElseifClausesAssignment_4 extends AssignmentToken  {
	
	public Conditional_equation_rule_e_ElseifClausesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getElseifClausesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_elseif_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseifClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseifClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_rule_elseifRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditional_equation_rule_eAccess().getElseifClausesEquation_rule_elseifParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conditional_equation_rule_e_ElseifClausesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Conditional_equation_rule_e_Group_3(parent, next, actIndex, consumed);
			case 2: return new Conditional_equation_rule_e_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("else" (elseEquationClauses+=equation_rule SEMICOLON)*)?
protected class Conditional_equation_rule_e_Group_5 extends GroupToken {
	
	public Conditional_equation_rule_e_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_Group_5_1(parent, this, 0, inst);
			case 1: return new Conditional_equation_rule_e_ElseKeyword_5_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "else"
protected class Conditional_equation_rule_e_ElseKeyword_5_0 extends KeywordToken  {
	
	public Conditional_equation_rule_e_ElseKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getElseKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_ElseifClausesAssignment_4(parent, this, 0, inst);
			case 1: return new Conditional_equation_rule_e_Group_3(parent, this, 1, inst);
			case 2: return new Conditional_equation_rule_e_ThenKeyword_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// (elseEquationClauses+=equation_rule SEMICOLON)*
protected class Conditional_equation_rule_e_Group_5_1 extends GroupToken {
	
	public Conditional_equation_rule_e_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getGroup_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_SEMICOLONTerminalRuleCall_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elseEquationClauses+=equation_rule
protected class Conditional_equation_rule_e_ElseEquationClausesAssignment_5_1_0 extends AssignmentToken  {
	
	public Conditional_equation_rule_e_ElseEquationClausesAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getElseEquationClausesAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseEquationClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseEquationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditional_equation_rule_eAccess().getElseEquationClausesEquation_ruleParserRuleCall_5_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conditional_equation_rule_e_Group_5_1(parent, next, actIndex, consumed);
			case 1: return new Conditional_equation_rule_e_ElseKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Conditional_equation_rule_e_SEMICOLONTerminalRuleCall_5_1_1 extends UnassignedTextToken {

	public Conditional_equation_rule_e_SEMICOLONTerminalRuleCall_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getSEMICOLONTerminalRuleCall_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_ElseEquationClausesAssignment_5_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// "end"
protected class Conditional_equation_rule_e_EndKeyword_6 extends KeywordToken  {
	
	public Conditional_equation_rule_e_EndKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getEndKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_Group_5(parent, this, 0, inst);
			case 1: return new Conditional_equation_rule_e_ElseifClausesAssignment_4(parent, this, 1, inst);
			case 2: return new Conditional_equation_rule_e_Group_3(parent, this, 2, inst);
			case 3: return new Conditional_equation_rule_e_ThenKeyword_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// "if"
protected class Conditional_equation_rule_e_IfKeyword_7 extends KeywordToken  {
	
	public Conditional_equation_rule_e_IfKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_eAccess().getIfKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_e_EndKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule conditional_equation_rule_e ****************/


/************ begin Rule conditional_equation_rule_a ****************
 *
 * conditional_equation_rule_a returns ConditionAlgorithmRule:
 *   "if" condition=expression "then" (thenAlgorithmClauses+=algorithm SEMICOLON)*
 *   elseifClauses+=algorithm_elseif* ("else" (elseAlgotithmClauses+=algorithm SEMICOLON
 *   )*)? "end" "if";
 *
 **/

// "if" condition=expression "then" (thenAlgorithmClauses+=algorithm SEMICOLON)*
// elseifClauses+=algorithm_elseif* ("else" (elseAlgotithmClauses+=algorithm SEMICOLON
// )*)? "end" "if"
protected class Conditional_equation_rule_a_Group extends GroupToken {
	
	public Conditional_equation_rule_a_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_IfKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConditional_equation_rule_aRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "if"
protected class Conditional_equation_rule_a_IfKeyword_0 extends KeywordToken  {
	
	public Conditional_equation_rule_a_IfKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getIfKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class Conditional_equation_rule_a_ConditionAssignment_1 extends AssignmentToken  {
	
	public Conditional_equation_rule_a_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_IfKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getConditional_equation_rule_aAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "then"
protected class Conditional_equation_rule_a_ThenKeyword_2 extends KeywordToken  {
	
	public Conditional_equation_rule_a_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenAlgorithmClauses+=algorithm SEMICOLON)*
protected class Conditional_equation_rule_a_Group_3 extends GroupToken {
	
	public Conditional_equation_rule_a_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenAlgorithmClauses+=algorithm
protected class Conditional_equation_rule_a_ThenAlgorithmClausesAssignment_3_0 extends AssignmentToken  {
	
	public Conditional_equation_rule_a_ThenAlgorithmClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getThenAlgorithmClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenAlgorithmClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenAlgorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlgorithmRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditional_equation_rule_aAccess().getThenAlgorithmClausesAlgorithmParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conditional_equation_rule_a_Group_3(parent, next, actIndex, consumed);
			case 1: return new Conditional_equation_rule_a_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Conditional_equation_rule_a_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Conditional_equation_rule_a_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_ThenAlgorithmClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// elseifClauses+=algorithm_elseif*
protected class Conditional_equation_rule_a_ElseifClausesAssignment_4 extends AssignmentToken  {
	
	public Conditional_equation_rule_a_ElseifClausesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getElseifClausesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_elseif_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseifClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseifClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlgorithm_elseifRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditional_equation_rule_aAccess().getElseifClausesAlgorithm_elseifParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conditional_equation_rule_a_ElseifClausesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Conditional_equation_rule_a_Group_3(parent, next, actIndex, consumed);
			case 2: return new Conditional_equation_rule_a_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("else" (elseAlgotithmClauses+=algorithm SEMICOLON)*)?
protected class Conditional_equation_rule_a_Group_5 extends GroupToken {
	
	public Conditional_equation_rule_a_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_Group_5_1(parent, this, 0, inst);
			case 1: return new Conditional_equation_rule_a_ElseKeyword_5_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "else"
protected class Conditional_equation_rule_a_ElseKeyword_5_0 extends KeywordToken  {
	
	public Conditional_equation_rule_a_ElseKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getElseKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_ElseifClausesAssignment_4(parent, this, 0, inst);
			case 1: return new Conditional_equation_rule_a_Group_3(parent, this, 1, inst);
			case 2: return new Conditional_equation_rule_a_ThenKeyword_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// (elseAlgotithmClauses+=algorithm SEMICOLON)*
protected class Conditional_equation_rule_a_Group_5_1 extends GroupToken {
	
	public Conditional_equation_rule_a_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getGroup_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_SEMICOLONTerminalRuleCall_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elseAlgotithmClauses+=algorithm
protected class Conditional_equation_rule_a_ElseAlgotithmClausesAssignment_5_1_0 extends AssignmentToken  {
	
	public Conditional_equation_rule_a_ElseAlgotithmClausesAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getElseAlgotithmClausesAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseAlgotithmClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseAlgotithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlgorithmRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditional_equation_rule_aAccess().getElseAlgotithmClausesAlgorithmParserRuleCall_5_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conditional_equation_rule_a_Group_5_1(parent, next, actIndex, consumed);
			case 1: return new Conditional_equation_rule_a_ElseKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Conditional_equation_rule_a_SEMICOLONTerminalRuleCall_5_1_1 extends UnassignedTextToken {

	public Conditional_equation_rule_a_SEMICOLONTerminalRuleCall_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getSEMICOLONTerminalRuleCall_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_ElseAlgotithmClausesAssignment_5_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// "end"
protected class Conditional_equation_rule_a_EndKeyword_6 extends KeywordToken  {
	
	public Conditional_equation_rule_a_EndKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getEndKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_Group_5(parent, this, 0, inst);
			case 1: return new Conditional_equation_rule_a_ElseifClausesAssignment_4(parent, this, 1, inst);
			case 2: return new Conditional_equation_rule_a_Group_3(parent, this, 2, inst);
			case 3: return new Conditional_equation_rule_a_ThenKeyword_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// "if"
protected class Conditional_equation_rule_a_IfKeyword_7 extends KeywordToken  {
	
	public Conditional_equation_rule_a_IfKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConditional_equation_rule_aAccess().getIfKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Conditional_equation_rule_a_EndKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule conditional_equation_rule_a ****************/


/************ begin Rule for_clause_e ****************
 *
 * for_clause_e returns ForEquationClause:
 *   "for" forIndices=for_indices "loop" (equationClauses+=equation_rule SEMICOLON)* "end"
 *   "for";
 *
 **/

// "for" forIndices=for_indices "loop" (equationClauses+=equation_rule SEMICOLON)* "end"
// "for"
protected class For_clause_e_Group extends GroupToken {
	
	public For_clause_e_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_ForKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFor_clause_eRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "for"
protected class For_clause_e_ForKeyword_0 extends KeywordToken  {
	
	public For_clause_e_ForKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getForKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// forIndices=for_indices
protected class For_clause_e_ForIndicesAssignment_1 extends AssignmentToken  {
	
	public For_clause_e_ForIndicesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getForIndicesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_ForKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("forIndices",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("forIndices");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getFor_clause_eAccess().getForIndicesFor_indicesParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "loop"
protected class For_clause_e_LoopKeyword_2 extends KeywordToken  {
	
	public For_clause_e_LoopKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getLoopKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_ForIndicesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (equationClauses+=equation_rule SEMICOLON)*
protected class For_clause_e_Group_3 extends GroupToken {
	
	public For_clause_e_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// equationClauses+=equation_rule
protected class For_clause_e_EquationClausesAssignment_3_0 extends AssignmentToken  {
	
	public For_clause_e_EquationClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getEquationClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("equationClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("equationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFor_clause_eAccess().getEquationClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new For_clause_e_Group_3(parent, next, actIndex, consumed);
			case 1: return new For_clause_e_LoopKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class For_clause_e_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public For_clause_e_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_EquationClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "end"
protected class For_clause_e_EndKeyword_4 extends KeywordToken  {
	
	public For_clause_e_EndKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getEndKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_Group_3(parent, this, 0, inst);
			case 1: return new For_clause_e_LoopKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "for"
protected class For_clause_e_ForKeyword_5 extends KeywordToken  {
	
	public For_clause_e_ForKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_eAccess().getForKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_e_EndKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule for_clause_e ****************/


/************ begin Rule for_clause_a ****************
 *
 * for_clause_a returns ForAlgorithmClause:
 *   "for" forIndices=for_indices "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
 *   "for";
 *
 **/

// "for" forIndices=for_indices "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
// "for"
protected class For_clause_a_Group extends GroupToken {
	
	public For_clause_a_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_ForKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFor_clause_aRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "for"
protected class For_clause_a_ForKeyword_0 extends KeywordToken  {
	
	public For_clause_a_ForKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getForKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// forIndices=for_indices
protected class For_clause_a_ForIndicesAssignment_1 extends AssignmentToken  {
	
	public For_clause_a_ForIndicesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getForIndicesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_ForKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("forIndices",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("forIndices");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getFor_clause_aAccess().getForIndicesFor_indicesParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "loop"
protected class For_clause_a_LoopKeyword_2 extends KeywordToken  {
	
	public For_clause_a_LoopKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getLoopKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_ForIndicesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (algorithmClauses+=algorithm SEMICOLON)*
protected class For_clause_a_Group_3 extends GroupToken {
	
	public For_clause_a_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// algorithmClauses+=algorithm
protected class For_clause_a_AlgorithmClausesAssignment_3_0 extends AssignmentToken  {
	
	public For_clause_a_AlgorithmClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getAlgorithmClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("algorithmClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("algorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlgorithmRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFor_clause_aAccess().getAlgorithmClausesAlgorithmParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new For_clause_a_Group_3(parent, next, actIndex, consumed);
			case 1: return new For_clause_a_LoopKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class For_clause_a_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public For_clause_a_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_AlgorithmClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "end"
protected class For_clause_a_EndKeyword_4 extends KeywordToken  {
	
	public For_clause_a_EndKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getEndKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_Group_3(parent, this, 0, inst);
			case 1: return new For_clause_a_LoopKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "for"
protected class For_clause_a_ForKeyword_5 extends KeywordToken  {
	
	public For_clause_a_ForKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_clause_aAccess().getForKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new For_clause_a_EndKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule for_clause_a ****************/


/************ begin Rule while_clause ****************
 *
 * while_clause returns WhileClause:
 *   "while" condition=expression "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
 *   "while";
 *
 **/

// "while" condition=expression "loop" (algorithmClauses+=algorithm SEMICOLON)* "end"
// "while"
protected class While_clause_Group extends GroupToken {
	
	public While_clause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_WhileKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWhile_clauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "while"
protected class While_clause_WhileKeyword_0 extends KeywordToken  {
	
	public While_clause_WhileKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getWhileKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class While_clause_ConditionAssignment_1 extends AssignmentToken  {
	
	public While_clause_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_WhileKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getWhile_clauseAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "loop"
protected class While_clause_LoopKeyword_2 extends KeywordToken  {
	
	public While_clause_LoopKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getLoopKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (algorithmClauses+=algorithm SEMICOLON)*
protected class While_clause_Group_3 extends GroupToken {
	
	public While_clause_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// algorithmClauses+=algorithm
protected class While_clause_AlgorithmClausesAssignment_3_0 extends AssignmentToken  {
	
	public While_clause_AlgorithmClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getAlgorithmClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("algorithmClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("algorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlgorithmRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhile_clauseAccess().getAlgorithmClausesAlgorithmParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new While_clause_Group_3(parent, next, actIndex, consumed);
			case 1: return new While_clause_LoopKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class While_clause_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public While_clause_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_AlgorithmClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "end"
protected class While_clause_EndKeyword_4 extends KeywordToken  {
	
	public While_clause_EndKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getEndKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_Group_3(parent, this, 0, inst);
			case 1: return new While_clause_LoopKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "while"
protected class While_clause_WhileKeyword_5 extends KeywordToken  {
	
	public While_clause_WhileKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhile_clauseAccess().getWhileKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new While_clause_EndKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule while_clause ****************/


/************ begin Rule when_clause_e ****************
 *
 * when_clause_e:
 *   "when" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
 *   elseWhenClauses+=else_when_e* "end" "when";
 *
 **/

// "when" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
// elseWhenClauses+=else_when_e* "end" "when"
protected class When_clause_e_Group extends GroupToken {
	
	public When_clause_e_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_WhenKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWhen_clause_eRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "when"
protected class When_clause_e_WhenKeyword_0 extends KeywordToken  {
	
	public When_clause_e_WhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getWhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class When_clause_e_ConditionAssignment_1 extends AssignmentToken  {
	
	public When_clause_e_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_WhenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getWhen_clause_eAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "then"
protected class When_clause_e_ThenKeyword_2 extends KeywordToken  {
	
	public When_clause_e_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenEquationClauses+=equation_rule SEMICOLON)*
protected class When_clause_e_Group_3 extends GroupToken {
	
	public When_clause_e_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenEquationClauses+=equation_rule
protected class When_clause_e_ThenEquationClausesAssignment_3_0 extends AssignmentToken  {
	
	public When_clause_e_ThenEquationClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getThenEquationClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenEquationClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenEquationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhen_clause_eAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new When_clause_e_Group_3(parent, next, actIndex, consumed);
			case 1: return new When_clause_e_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class When_clause_e_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public When_clause_e_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_ThenEquationClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// elseWhenClauses+=else_when_e*
protected class When_clause_e_ElseWhenClausesAssignment_4 extends AssignmentToken  {
	
	public When_clause_e_ElseWhenClausesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getElseWhenClausesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_e_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseWhenClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseWhenClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElse_when_eRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhen_clause_eAccess().getElseWhenClausesElse_when_eParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new When_clause_e_ElseWhenClausesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new When_clause_e_Group_3(parent, next, actIndex, consumed);
			case 2: return new When_clause_e_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class When_clause_e_EndKeyword_5 extends KeywordToken  {
	
	public When_clause_e_EndKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getEndKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_ElseWhenClausesAssignment_4(parent, this, 0, inst);
			case 1: return new When_clause_e_Group_3(parent, this, 1, inst);
			case 2: return new When_clause_e_ThenKeyword_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class When_clause_e_WhenKeyword_6 extends KeywordToken  {
	
	public When_clause_e_WhenKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_eAccess().getWhenKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_e_EndKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule when_clause_e ****************/


/************ begin Rule else_when_e ****************
 *
 * else_when_e:
 *   "elsewhen" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON
 *   )*;
 *
 **/

// "elsewhen" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON
// )*
protected class Else_when_e_Group extends GroupToken {
	
	public Else_when_e_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElse_when_eAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_e_Group_3(parent, this, 0, inst);
			case 1: return new Else_when_e_ThenKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElse_when_eRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "elsewhen"
protected class Else_when_e_ElsewhenKeyword_0 extends KeywordToken  {
	
	public Else_when_e_ElsewhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElse_when_eAccess().getElsewhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class Else_when_e_ConditionAssignment_1 extends AssignmentToken  {
	
	public Else_when_e_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElse_when_eAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_e_ElsewhenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getElse_when_eAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "then"
protected class Else_when_e_ThenKeyword_2 extends KeywordToken  {
	
	public Else_when_e_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElse_when_eAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_e_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenEquationClauses+=equation_rule SEMICOLON)*
protected class Else_when_e_Group_3 extends GroupToken {
	
	public Else_when_e_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElse_when_eAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_e_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenEquationClauses+=equation_rule
protected class Else_when_e_ThenEquationClausesAssignment_3_0 extends AssignmentToken  {
	
	public Else_when_e_ThenEquationClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElse_when_eAccess().getThenEquationClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenEquationClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenEquationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElse_when_eAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Else_when_e_Group_3(parent, next, actIndex, consumed);
			case 1: return new Else_when_e_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Else_when_e_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Else_when_e_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElse_when_eAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_e_ThenEquationClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule else_when_e ****************/


/************ begin Rule when_clause_a ****************
 *
 * when_clause_a:
 *   "when" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)*
 *   elseWhenClauses+=else_when_a* "end" "when";
 *
 **/

// "when" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)*
// elseWhenClauses+=else_when_a* "end" "when"
protected class When_clause_a_Group extends GroupToken {
	
	public When_clause_a_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_WhenKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWhen_clause_aRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "when"
protected class When_clause_a_WhenKeyword_0 extends KeywordToken  {
	
	public When_clause_a_WhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getWhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class When_clause_a_ConditionAssignment_1 extends AssignmentToken  {
	
	public When_clause_a_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_WhenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getWhen_clause_aAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "then"
protected class When_clause_a_ThenKeyword_2 extends KeywordToken  {
	
	public When_clause_a_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenAlgorithmClauses+=equation_rule SEMICOLON)*
protected class When_clause_a_Group_3 extends GroupToken {
	
	public When_clause_a_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenAlgorithmClauses+=equation_rule
protected class When_clause_a_ThenAlgorithmClausesAssignment_3_0 extends AssignmentToken  {
	
	public When_clause_a_ThenAlgorithmClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getThenAlgorithmClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenAlgorithmClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenAlgorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhen_clause_aAccess().getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new When_clause_a_Group_3(parent, next, actIndex, consumed);
			case 1: return new When_clause_a_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class When_clause_a_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public When_clause_a_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_ThenAlgorithmClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// elseWhenClauses+=else_when_a*
protected class When_clause_a_ElseWhenClausesAssignment_4 extends AssignmentToken  {
	
	public When_clause_a_ElseWhenClausesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getElseWhenClausesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_a_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseWhenClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseWhenClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElse_when_aRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhen_clause_aAccess().getElseWhenClausesElse_when_aParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new When_clause_a_ElseWhenClausesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new When_clause_a_Group_3(parent, next, actIndex, consumed);
			case 2: return new When_clause_a_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class When_clause_a_EndKeyword_5 extends KeywordToken  {
	
	public When_clause_a_EndKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getEndKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_ElseWhenClausesAssignment_4(parent, this, 0, inst);
			case 1: return new When_clause_a_Group_3(parent, this, 1, inst);
			case 2: return new When_clause_a_ThenKeyword_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class When_clause_a_WhenKeyword_6 extends KeywordToken  {
	
	public When_clause_a_WhenKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhen_clause_aAccess().getWhenKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new When_clause_a_EndKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule when_clause_a ****************/


/************ begin Rule else_when_a ****************
 *
 * else_when_a:
 *   "elsewhen" condition=expression "then" (thenAlgorithmClauses+=equation_rule
 *   SEMICOLON)*;
 *
 **/

// "elsewhen" condition=expression "then" (thenAlgorithmClauses+=equation_rule
// SEMICOLON)*
protected class Else_when_a_Group extends GroupToken {
	
	public Else_when_a_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElse_when_aAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_a_Group_3(parent, this, 0, inst);
			case 1: return new Else_when_a_ThenKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElse_when_aRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "elsewhen"
protected class Else_when_a_ElsewhenKeyword_0 extends KeywordToken  {
	
	public Else_when_a_ElsewhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElse_when_aAccess().getElsewhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class Else_when_a_ConditionAssignment_1 extends AssignmentToken  {
	
	public Else_when_a_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElse_when_aAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_a_ElsewhenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getElse_when_aAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "then"
protected class Else_when_a_ThenKeyword_2 extends KeywordToken  {
	
	public Else_when_a_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElse_when_aAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_a_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenAlgorithmClauses+=equation_rule SEMICOLON)*
protected class Else_when_a_Group_3 extends GroupToken {
	
	public Else_when_a_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElse_when_aAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_a_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenAlgorithmClauses+=equation_rule
protected class Else_when_a_ThenAlgorithmClausesAssignment_3_0 extends AssignmentToken  {
	
	public Else_when_a_ThenAlgorithmClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElse_when_aAccess().getThenAlgorithmClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenAlgorithmClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenAlgorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElse_when_aAccess().getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Else_when_a_Group_3(parent, next, actIndex, consumed);
			case 1: return new Else_when_a_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Else_when_a_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Else_when_a_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getElse_when_aAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Else_when_a_ThenAlgorithmClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule else_when_a ****************/


/************ begin Rule equation_rule_elseif ****************
 *
 * equation_rule_elseif:
 *   "elseif" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
 * ;
 *
 **/

// "elseif" condition=expression "then" (thenEquationClauses+=equation_rule SEMICOLON)*
protected class Equation_rule_elseif_Group extends GroupToken {
	
	public Equation_rule_elseif_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEquation_rule_elseifAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_elseif_Group_3(parent, this, 0, inst);
			case 1: return new Equation_rule_elseif_ThenKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEquation_rule_elseifRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "elseif"
protected class Equation_rule_elseif_ElseifKeyword_0 extends KeywordToken  {
	
	public Equation_rule_elseif_ElseifKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEquation_rule_elseifAccess().getElseifKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class Equation_rule_elseif_ConditionAssignment_1 extends AssignmentToken  {
	
	public Equation_rule_elseif_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEquation_rule_elseifAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_elseif_ElseifKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getEquation_rule_elseifAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "then"
protected class Equation_rule_elseif_ThenKeyword_2 extends KeywordToken  {
	
	public Equation_rule_elseif_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEquation_rule_elseifAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_elseif_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenEquationClauses+=equation_rule SEMICOLON)*
protected class Equation_rule_elseif_Group_3 extends GroupToken {
	
	public Equation_rule_elseif_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEquation_rule_elseifAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_elseif_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenEquationClauses+=equation_rule
protected class Equation_rule_elseif_ThenEquationClausesAssignment_3_0 extends AssignmentToken  {
	
	public Equation_rule_elseif_ThenEquationClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEquation_rule_elseifAccess().getThenEquationClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenEquationClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenEquationClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEquation_rule_elseifAccess().getThenEquationClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Equation_rule_elseif_Group_3(parent, next, actIndex, consumed);
			case 1: return new Equation_rule_elseif_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Equation_rule_elseif_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Equation_rule_elseif_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquation_rule_elseifAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_elseif_ThenEquationClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule equation_rule_elseif ****************/


/************ begin Rule algorithm_elseif ****************
 *
 * algorithm_elseif:
 *   "elseif" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)
 *   *;
 *
 **/

// "elseif" condition=expression "then" (thenAlgorithmClauses+=equation_rule SEMICOLON)
// *
protected class Algorithm_elseif_Group extends GroupToken {
	
	public Algorithm_elseif_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAlgorithm_elseifAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_elseif_Group_3(parent, this, 0, inst);
			case 1: return new Algorithm_elseif_ThenKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAlgorithm_elseifRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "elseif"
protected class Algorithm_elseif_ElseifKeyword_0 extends KeywordToken  {
	
	public Algorithm_elseif_ElseifKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAlgorithm_elseifAccess().getElseifKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=expression
protected class Algorithm_elseif_ConditionAssignment_1 extends AssignmentToken  {
	
	public Algorithm_elseif_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAlgorithm_elseifAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_elseif_ElseifKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAlgorithm_elseifAccess().getConditionExpressionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "then"
protected class Algorithm_elseif_ThenKeyword_2 extends KeywordToken  {
	
	public Algorithm_elseif_ThenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAlgorithm_elseifAccess().getThenKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_elseif_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (thenAlgorithmClauses+=equation_rule SEMICOLON)*
protected class Algorithm_elseif_Group_3 extends GroupToken {
	
	public Algorithm_elseif_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAlgorithm_elseifAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_elseif_SEMICOLONTerminalRuleCall_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenAlgorithmClauses+=equation_rule
protected class Algorithm_elseif_ThenAlgorithmClausesAssignment_3_0 extends AssignmentToken  {
	
	public Algorithm_elseif_ThenAlgorithmClausesAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAlgorithm_elseifAccess().getThenAlgorithmClausesAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Equation_rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenAlgorithmClauses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenAlgorithmClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquation_ruleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAlgorithm_elseifAccess().getThenAlgorithmClausesEquation_ruleParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Algorithm_elseif_Group_3(parent, next, actIndex, consumed);
			case 1: return new Algorithm_elseif_ThenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMICOLON
protected class Algorithm_elseif_SEMICOLONTerminalRuleCall_3_1 extends UnassignedTextToken {

	public Algorithm_elseif_SEMICOLONTerminalRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAlgorithm_elseifAccess().getSEMICOLONTerminalRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Algorithm_elseif_ThenAlgorithmClausesAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule algorithm_elseif ****************/





































/************ begin Rule comment ****************
 *
 * comment returns Comment:
 *   string=string_comment? annotation=annotation?;
 *
 **/

// string=string_comment? annotation=annotation?
protected class Comment_Group extends GroupToken {
	
	public Comment_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCommentAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comment_AnnotationAssignment_1(parent, this, 0, inst);
			case 1: return new Comment_StringAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCommentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// string=string_comment?
protected class Comment_StringAssignment_0 extends AssignmentToken  {
	
	public Comment_StringAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommentAccess().getStringAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("string",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("string");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCommentAccess().getStringString_commentParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// annotation=annotation?
protected class Comment_AnnotationAssignment_1 extends AssignmentToken  {
	
	public Comment_AnnotationAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommentAccess().getAnnotationAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCommentAccess().getAnnotationAnnotationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Comment_StringAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule comment ****************/



/************ begin Rule annotation ****************
 *
 * annotation returns Annotation:
 *   "annotation" class_modification; 
 * 
 *     
 * 	  
 * 	
 * 
 * 
 * 
 * / *------------------------------------------------------------------
 *  * LEXER RULES
 *  *------------------------------------------------------------------* /
 * 
 * / * Keywords * / 
 * 
 * //terminal T_ALGORITHM	: 'algorithm'	;
 * //terminal T_AND		: 'and'		;
 * //terminal T_ANNOTATION	: 'annotation'	;
 * //terminal BLOCK		: 'block'	;
 * //terminal CODE		: 'Code'	;
 * //terminal   CLASS		: 'class'	;
 * / *
 * terminal CONNECT	: 'connect'	;
 * terminal CONNECTOR	: 'connector'	;
 * terminal   CONSTANT	: 'constant'	;
 * terminal   DISCRETE	: 'discrete'	;
 * terminal   DER           : 'der' 	;
 * terminal   EACH		: 'each'	;
 * terminal   ELSE		: 'else'	;
 * terminal   ELSEIF	: 'elseif'	;
 * terminal   ELSEWHEN	: 'elsewhen'	;
 * terminal   T_END		: 'end'		;
 * terminal   ENUMERATION	: 'enumeration'	;
 * terminal   EQUATION	: 'equation'	;
 * terminal   ENCAPSULATED	: 'encapsulated';
 * terminal   EXPANDABLE	: 'expandable'  ;
 * terminal   EXTENDS	: 'extends'     ;
 * terminal   CONSTRAINEDBY : 'constrainedby' ;
 * terminal   EXTERNAL	: 'external'	;
 * terminal   T_FALSE	: 'false'	;
 * //terminal   FINAL		: 'final'	;
 * terminal   FLOW		: 'flow'	;
 * terminal   FOR		: 'for'		;
 * terminal   FUNCTION	: 'function'	;
 * terminal   IF		: 'if'		;
 * terminal   IMPORT	: 'import'	;
 * terminal   T_IN		: 'in'		;
 * terminal   INITIAL	: 'initial'	;
 * terminal   INNER		: 'inner'	;
 * terminal   T_INPUT	: 'input'	;
 * terminal   LOOP		: 'loop'	;
 * terminal   MODEL		: 'model'	;
 * terminal   T_NOT		: 'not'		;
 * terminal   T_OUTER	: 'outer'	;
 * terminal   OVERLOAD	: 'overload'	;
 * terminal   T_OR		: 'or'		;
 * terminal   T_OUTPUT	: 'output'	;
 * terminal   PACKAGE	: 'package'	;
 * terminal   PARAMETER	: 'parameter'	;
 * terminal   PARTIAL	: 'partial'	;
 * terminal   PROTECTED	: 'protected'	;
 * terminal   PUBLIC	: 'public'	;
 * terminal   RECORD	: 'record'	;
 * terminal   REDECLARE	: 'redeclare'	;
 * terminal   REPLACEABLE	: 'replaceable'	;
 * terminal   RESULTS	: 'results'	;
 * terminal   THEN		: 'then'	;
 * terminal   T_TRUE	: 'true'	;
 * terminal   TYPE		: 'type'	;
 * terminal   WHEN		: 'when'	;
 * terminal   WHILE		: 'while'	;
 * terminal   WITHIN	: 'within' 	;
 * terminal   RETURN	: 'return'  ;
 * terminal   BREAK		: 'break'	;
 * terminal   STREAM	: 'stream'	; / * for Modelica 3.1 stream connectors * /	
 * 
 *   // ---------
 *    // Operators
 *    // ---------
 *
 **/

// "annotation" class_modification
protected class Annotation_Group extends GroupToken {
	
	public Annotation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Class_modificationParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "annotation"
protected class Annotation_AnnotationKeyword_0 extends KeywordToken  {
	
	public Annotation_AnnotationKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getAnnotationKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// class_modification
protected class Annotation_Class_modificationParserRuleCall_1 extends RuleCallToken {
	
	public Annotation_Class_modificationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getClass_modificationParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_modification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Class_modification_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClass_modificationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_AnnotationKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule annotation ****************/

}
