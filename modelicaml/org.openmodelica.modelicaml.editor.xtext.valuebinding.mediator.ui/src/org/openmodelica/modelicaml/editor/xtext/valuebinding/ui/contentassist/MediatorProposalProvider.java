/*
* generated by Xtext
*/
package org.openmodelica.modelicaml.editor.xtext.valuebinding.ui.contentassist;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.openmodelica.modelicaml.common.contentassist.ModelicaMLContentAssist;
import org.openmodelica.modelicaml.common.utls.SWTResourceManager;
import org.openmodelica.modelicaml.editor.xtext.valuebinding.ui.contentassist.AbstractMediatorProposalProvider;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class MediatorProposalProvider extends AbstractMediatorProposalProvider {
	@Override
	public void complete_SumFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("sum(:)");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}
	
	@Override
	public void complete_ProductFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("product(:)");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}
	
	@Override
	public void complete_MinFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("min(:)");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}
	
	@Override
	public void complete_MaxFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("max(:)");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}
	
	@Override
	public void complete_AverageFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("avg(:)");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}
	
	@Override
	public void complete_SizeFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("size(:)");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}
	
	
	@Override
	public void complete_ToArrayFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("toArray(:)");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}
	
	@Override
	public void complete_GetSingleProviderFunction(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		
		super.complete_name(model, ruleCall, context, acceptor);
	
		List<String> cList = new ArrayList<String>();
		cList.add("getSingleProvider()");
		
		for (String string : cList) {
			String completionString = string;
			String displayString = ModelicaMLContentAssist.getDisplayCompletionString(context.getPrefix(), completionString);
			ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, SWTResourceManager.getImage(SWTResourceManager.class, "/icons/valueMediator.png"), context);
			acceptor.accept(completionProposal);
		}
	}

}
