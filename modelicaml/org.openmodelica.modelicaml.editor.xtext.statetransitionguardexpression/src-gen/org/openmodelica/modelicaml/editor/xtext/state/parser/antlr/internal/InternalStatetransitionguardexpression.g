/*
* generated by Xtext
*/
grammar InternalStatetransitionguardexpression;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.openmodelica.modelicaml.editor.xtext.state.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.openmodelica.modelicaml.editor.xtext.state.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.openmodelica.modelicaml.editor.xtext.state.services.StatetransitionguardexpressionGrammarAccess;

}

@parser::members {

 	private StatetransitionguardexpressionGrammarAccess grammarAccess;
 	
    public InternalStatetransitionguardexpressionParser(TokenStream input, StatetransitionguardexpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "guardExpression";	
   	}
   	
   	@Override
   	protected StatetransitionguardexpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleguardExpression
entryRuleguardExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardExpressionRule()); }
	 iv_ruleguardExpression=ruleguardExpression 
	 { $current=$iv_ruleguardExpression.current; } 
	 EOF 
;

// Rule guardExpression
ruleguardExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardExpressionAccess().getExpressionExpressionParserRuleCall_0()); 
	    }
		lv_Expression_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardExpressionRule());
	        }
       		set(
       			$current, 
       			"Expression",
        		lv_Expression_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getSimple_ExprSimple_expressionParserRuleCall_1_0()); 
	    }
		lv_simple_Expr_1_0=rulesimple_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"simple_Expr",
        		lv_simple_Expr_1_0, 
        		"simple_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleprimary
entryRuleprimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_ruleprimary=ruleprimary 
	 { $current=$iv_ruleprimary.current; } 
	 EOF 
;

// Rule primary
ruleprimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_num_0_0=RULE_UNSIGNED_NUMBER
		{
			newLeafNode(lv_num_0_0, grammarAccess.getPrimaryAccess().getNumUNSIGNED_NUMBERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_0_0, 
        		"UNSIGNED_NUMBER");
	    }

)
)
    |(
(
		lv_int_1_0=RULE_INT
		{
			newLeafNode(lv_int_1_0, grammarAccess.getPrimaryAccess().getIntINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_1_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_str_2_0=RULE_STRING
		{
			newLeafNode(lv_str_2_0, grammarAccess.getPrimaryAccess().getStrSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_2_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_Bool_3_0=RULE_BOOL_VAL
		{
			newLeafNode(lv_Bool_3_0, grammarAccess.getPrimaryAccess().getBoolBOOL_VALTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"Bool",
        		lv_Bool_3_0, 
        		"BOOL_VAL");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getName_FunctionName_FunctionParserRuleCall_4_0()); 
	    }
		lv_Name_Function_4_0=rulename_Function		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Name_Function",
        		lv_Name_Function_4_0, 
        		"name_Function");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getInitial_refInitial_refParserRuleCall_5_0()); 
	    }
		lv_Initial_ref_5_0=ruleinitial_ref		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Initial_ref",
        		lv_Initial_ref_5_0, 
        		"initial_ref");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExprExprDerParserRuleCall_6_0()); 
	    }
		lv_Expr_6_0=ruleExprDer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Expr",
        		lv_Expr_6_0, 
        		"ExprDer");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getMac_AMacro_AfterParserRuleCall_7_0()); 
	    }
		lv_Mac_A_7_0=ruleMacro_After		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Mac_A",
        		lv_Mac_A_7_0, 
        		"Macro_After");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getMac_EMacro_EVENTParserRuleCall_8_0()); 
	    }
		lv_Mac_E_8_0=ruleMacro_EVENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Mac_E",
        		lv_Mac_E_8_0, 
        		"Macro_EVENT");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getMac_CMacro_CHANGEParserRuleCall_9_0()); 
	    }
		lv_Mac_C_9_0=ruleMacro_CHANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Mac_C",
        		lv_Mac_C_9_0, 
        		"Macro_CHANGE");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getMac_SMacro_SIGNALParserRuleCall_10_0()); 
	    }
		lv_Mac_S_10_0=ruleMacro_SIGNAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Mac_S",
        		lv_Mac_S_10_0, 
        		"Macro_SIGNAL");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getComponent_referenceComponent_referenceParserRuleCall_11_0()); 
	    }
		lv_Component_reference_11_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Component_reference",
        		lv_Component_reference_11_0, 
        		"component_reference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_12_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getOutput_expr_listOutput_expression_listParserRuleCall_12_1_0()); 
	    }
		lv_output_expr_list_13_0=ruleoutput_expression_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"output_expr_list",
        		lv_output_expr_list_13_0, 
        		"output_expression_list");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_12_2());
    }
)
    |(	otherlv_15='[' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPrimaryAccess().getLeftSquareBracketKeyword_13_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExpre_listExpression_listParserRuleCall_13_1_0()); 
	    }
		lv_Expre_list_16_0=ruleexpression_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"Expre_list",
        		lv_Expre_list_16_0, 
        		"expression_list");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPrimaryAccess().getSemicolonKeyword_13_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExpression_listExpression_listParserRuleCall_13_2_1_0()); 
	    }
		lv_Expression_list_18_0=ruleexpression_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		add(
       			$current, 
       			"Expression_list",
        		lv_Expression_list_18_0, 
        		"expression_list");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_19=']' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getPrimaryAccess().getRightSquareBracketKeyword_13_3());
    }
)
    |(	otherlv_20='{' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPrimaryAccess().getLeftCurlyBracketKeyword_14_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getF_argumentsFunction_argumentsParserRuleCall_14_1_0()); 
	    }
		lv_f_arguments_21_0=rulefunction_arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"f_arguments",
        		lv_f_arguments_21_0, 
        		"function_arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getPrimaryAccess().getRightCurlyBracketKeyword_14_2());
    }
)
    |(
(
		lv_End_23_0=	'end' 
    {
        newLeafNode(lv_End_23_0, grammarAccess.getPrimaryAccess().getEndEndKeyword_15_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed($current, "End", lv_End_23_0, "end");
	    }

)
)
    |(
(
		lv_Else_24_0=	'else' 
    {
        newLeafNode(lv_Else_24_0, grammarAccess.getPrimaryAccess().getElseElseKeyword_16_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed($current, "Else", lv_Else_24_0, "else");
	    }

)
))
;





// Entry rule entryRuleMacro_After
entryRuleMacro_After returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacro_AfterRule()); }
	 iv_ruleMacro_After=ruleMacro_After 
	 { $current=$iv_ruleMacro_After.current; } 
	 EOF 
;

// Rule Macro_After
ruleMacro_After returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='AFTER' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMacro_AfterAccess().getAFTERKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacro_AfterAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_int_2_0=RULE_INT
		{
			newLeafNode(lv_int_2_0, grammarAccess.getMacro_AfterAccess().getIntINTTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacro_AfterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_2_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_num_3_0=RULE_UNSIGNED_NUMBER
		{
			newLeafNode(lv_num_3_0, grammarAccess.getMacro_AfterAccess().getNumUNSIGNED_NUMBERTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacro_AfterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_3_0, 
        		"UNSIGNED_NUMBER");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMacro_AfterAccess().getComponent_referenceComponent_referenceParserRuleCall_2_2_0()); 
	    }
		lv_Component_reference_4_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacro_AfterRule());
	        }
       		set(
       			$current, 
       			"Component_reference",
        		lv_Component_reference_4_0, 
        		"component_reference");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMacro_AfterAccess().getRightParenthesisKeyword_3());
    }
)
;







// Entry rule entryRuleMacro_SIGNAL
entryRuleMacro_SIGNAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacro_SIGNALRule()); }
	 iv_ruleMacro_SIGNAL=ruleMacro_SIGNAL 
	 { $current=$iv_ruleMacro_SIGNAL.current; } 
	 EOF 
;

// Rule Macro_SIGNAL
ruleMacro_SIGNAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SIGNAL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMacro_SIGNALAccess().getSIGNALKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacro_SIGNALAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacro_SIGNALAccess().getComponent_referenceComponent_referenceParserRuleCall_2_0()); 
	    }
		lv_Component_reference_2_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacro_SIGNALRule());
	        }
       		set(
       			$current, 
       			"Component_reference",
        		lv_Component_reference_2_0, 
        		"component_reference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacro_SIGNALAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMacro_EVENT
entryRuleMacro_EVENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacro_EVENTRule()); }
	 iv_ruleMacro_EVENT=ruleMacro_EVENT 
	 { $current=$iv_ruleMacro_EVENT.current; } 
	 EOF 
;

// Rule Macro_EVENT
ruleMacro_EVENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='EVENT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMacro_EVENTAccess().getEVENTKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacro_EVENTAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacro_EVENTAccess().getComponent_referenceComponent_referenceParserRuleCall_2_0()); 
	    }
		lv_Component_reference_2_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacro_EVENTRule());
	        }
       		set(
       			$current, 
       			"Component_reference",
        		lv_Component_reference_2_0, 
        		"component_reference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacro_EVENTAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMacro_CHANGE
entryRuleMacro_CHANGE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacro_CHANGERule()); }
	 iv_ruleMacro_CHANGE=ruleMacro_CHANGE 
	 { $current=$iv_ruleMacro_CHANGE.current; } 
	 EOF 
;

// Rule Macro_CHANGE
ruleMacro_CHANGE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CHANGE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMacro_CHANGEAccess().getCHANGEKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacro_CHANGEAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacro_CHANGEAccess().getComponent_referenceComponent_referenceParserRuleCall_2_0()); 
	    }
		lv_Component_reference_2_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacro_CHANGERule());
	        }
       		set(
       			$current, 
       			"Component_reference",
        		lv_Component_reference_2_0, 
        		"component_reference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacro_CHANGEAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_expressionRule()); }
	 iv_rulesimple_expression=rulesimple_expression 
	 { $current=$iv_rulesimple_expression.current; } 
	 EOF 
;

// Rule simple_expression
rulesimple_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_expressionAccess().getLog_ExpLogical_expressionParserRuleCall_0_0()); 
	    }
		lv_Log_Exp_0_0=rulelogical_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
	        }
       		set(
       			$current, 
       			"Log_Exp",
        		lv_Log_Exp_0_0, 
        		"logical_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimple_expressionAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_expressionAccess().getS_Logical_expressionLogical_expressionParserRuleCall_1_1_0()); 
	    }
		lv_S_Logical_expression_2_0=rulelogical_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
	        }
       		set(
       			$current, 
       			"S_Logical_expression",
        		lv_S_Logical_expression_2_0, 
        		"logical_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimple_expressionAccess().getColonKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_expressionAccess().getL_Logical_expressionLogical_expressionParserRuleCall_1_2_1_0()); 
	    }
		lv_L_Logical_expression_4_0=rulelogical_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
	        }
       		set(
       			$current, 
       			"L_Logical_expression",
        		lv_L_Logical_expression_4_0, 
        		"logical_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?)
;







// Entry rule entryRulelogical_expression
entryRulelogical_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_expressionRule()); }
	 iv_rulelogical_expression=rulelogical_expression 
	 { $current=$iv_rulelogical_expression.current; } 
	 EOF 
;

// Rule logical_expression
rulelogical_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogical_expressionAccess().getLogical_termParserRuleCall_0()); 
    }
    this_logical_term_0=rulelogical_term
    { 
        $current = $this_logical_term_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogical_expressionAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_expressionAccess().getLogical_termLogical_termParserRuleCall_1_1_0()); 
	    }
		lv_Logical_term_2_0=rulelogical_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_expressionRule());
	        }
       		add(
       			$current, 
       			"Logical_term",
        		lv_Logical_term_2_0, 
        		"logical_term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_term
entryRulelogical_term returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_termRule()); }
	 iv_rulelogical_term=rulelogical_term 
	 { $current=$iv_rulelogical_term.current; } 
	 EOF 
;

// Rule logical_term
rulelogical_term returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogical_termAccess().getLogical_factorParserRuleCall_0()); 
    }
    this_logical_factor_0=rulelogical_factor
    { 
        $current = $this_logical_factor_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogical_termAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_termAccess().getLogical_factorLogical_factorParserRuleCall_1_1_0()); 
	    }
		lv_Logical_factor_2_0=rulelogical_factor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_termRule());
	        }
       		add(
       			$current, 
       			"Logical_factor",
        		lv_Logical_factor_2_0, 
        		"logical_factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_factor
entryRulelogical_factor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_factorRule()); }
	 iv_rulelogical_factor=rulelogical_factor 
	 { $current=$iv_rulelogical_factor.current; } 
	 EOF 
;

// Rule logical_factor
rulelogical_factor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLogical_factorAccess().getNotKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_factorAccess().getRelationRelationParserRuleCall_1_0()); 
	    }
		lv_Relation_1_0=rulerelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_factorRule());
	        }
       		set(
       			$current, 
       			"Relation",
        		lv_Relation_1_0, 
        		"relation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulerelation
entryRulerelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	 iv_rulerelation=rulerelation 
	 { $current=$iv_rulerelation.current; } 
	 EOF 
;

// Rule relation
rulerelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationAccess().getArithmetic_expressionParserRuleCall_0()); 
    }
    this_arithmetic_expression_0=rulearithmetic_expression
    { 
        $current = $this_arithmetic_expression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_Less_thenParserRuleCall_1_0_0_0()); 
	    }
		lv_op_1_1=rulerel_op_Less_then		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_1, 
        		"rel_op_Less_then");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_Less_equalParserRuleCall_1_0_0_1()); 
	    }
		lv_op_1_2=rulerel_op_Less_equal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_2, 
        		"rel_op_Less_equal");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_greater_thenParserRuleCall_1_0_0_2()); 
	    }
		lv_op_1_3=rulerel_op_greater_then		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_3, 
        		"rel_op_greater_then");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_greater_equalParserRuleCall_1_0_0_3()); 
	    }
		lv_op_1_4=rulerel_op_greater_equal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_4, 
        		"rel_op_greater_equal");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_assignmentParserRuleCall_1_0_0_4()); 
	    }
		lv_op_1_5=rulerel_op_assignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_5, 
        		"rel_op_assignment");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_OperParserRuleCall_1_0_0_5()); 
	    }
		lv_op_1_6=rulerel_op_Oper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_6, 
        		"rel_op_Oper");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getArithmetic_expressionArithmetic_expressionParserRuleCall_1_1_0()); 
	    }
		lv_Arithmetic_expression_2_0=rulearithmetic_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"Arithmetic_expression",
        		lv_Arithmetic_expression_2_0, 
        		"arithmetic_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulearithmetic_expression
entryRulearithmetic_expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmetic_expressionRule()); }
	 iv_rulearithmetic_expression=rulearithmetic_expression 
	 { $current=$iv_rulearithmetic_expression.current; } 
	 EOF 
;

// Rule arithmetic_expression
rulearithmetic_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_plusParserRuleCall_0_0_0()); 
	    }
		lv_opr_0_1=ruleadd_op_plus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		set(
       			$current, 
       			"opr",
        		lv_opr_0_1, 
        		"add_op_plus");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_minusParserRuleCall_0_0_1()); 
	    }
		lv_opr_0_2=ruleadd_op_minus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		set(
       			$current, 
       			"opr",
        		lv_opr_0_2, 
        		"add_op_minus");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_dotplusParserRuleCall_0_0_2()); 
	    }
		lv_opr_0_3=ruleadd_op_dotplus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		set(
       			$current, 
       			"opr",
        		lv_opr_0_3, 
        		"add_op_dotplus");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_dotminusParserRuleCall_0_0_3()); 
	    }
		lv_opr_0_4=ruleadd_op_dotminus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		set(
       			$current, 
       			"opr",
        		lv_opr_0_4, 
        		"add_op_dotminus");
	        afterParserOrEnumRuleCall();
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getTermTermParserRuleCall_1_0()); 
	    }
		lv_Term_1_0=ruleterm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		set(
       			$current, 
       			"Term",
        		lv_Term_1_0, 
        		"term");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_plusParserRuleCall_2_0_0_0()); 
	    }
		lv_Oper1_2_1=ruleadd_op_plus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		add(
       			$current, 
       			"Oper1",
        		lv_Oper1_2_1, 
        		"add_op_plus");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_minusParserRuleCall_2_0_0_1()); 
	    }
		lv_Oper1_2_2=ruleadd_op_minus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		add(
       			$current, 
       			"Oper1",
        		lv_Oper1_2_2, 
        		"add_op_minus");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_dotplusParserRuleCall_2_0_0_2()); 
	    }
		lv_Oper1_2_3=ruleadd_op_dotplus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		add(
       			$current, 
       			"Oper1",
        		lv_Oper1_2_3, 
        		"add_op_dotplus");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_dotminusParserRuleCall_2_0_0_3()); 
	    }
		lv_Oper1_2_4=ruleadd_op_dotminus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		add(
       			$current, 
       			"Oper1",
        		lv_Oper1_2_4, 
        		"add_op_dotminus");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmetic_expressionAccess().getTerm1TermParserRuleCall_2_1_0()); 
	    }
		lv_Term1_3_0=ruleterm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmetic_expressionRule());
	        }
       		add(
       			$current, 
       			"Term1",
        		lv_Term1_3_0, 
        		"term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current; } 
	 EOF 
;

// Rule term
ruleterm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); 
    }
    this_factor_0=rulefactor
    { 
        $current = $this_factor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getOpMul_op_mulParserRuleCall_1_0_0_0()); 
	    }
		lv_op_1_1=rulemul_op_mul		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_1, 
        		"mul_op_mul");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getOpMul_op_divParserRuleCall_1_0_0_1()); 
	    }
		lv_op_1_2=rulemul_op_div		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_2, 
        		"mul_op_div");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getOpMul_op_dotmulParserRuleCall_1_0_0_2()); 
	    }
		lv_op_1_3=rulemul_op_dotmul		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_3, 
        		"mul_op_dotmul");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getOpMul_op_dotdivParserRuleCall_1_0_0_3()); 
	    }
		lv_op_1_4=rulemul_op_dotdiv		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_4, 
        		"mul_op_dotdiv");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getFactorFactorParserRuleCall_1_1_0()); 
	    }
		lv_Factor_2_0=rulefactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"Factor",
        		lv_Factor_2_0, 
        		"factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_rulefactor=rulefactor 
	 { $current=$iv_rulefactor.current; } 
	 EOF 
;

// Rule factor
rulefactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0()); 
    }
    this_primary_0=ruleprimary
    { 
        $current = $this_primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFactorAccess().getCircumflexAccentKeyword_1_0_0());
    }

    |	otherlv_2='.^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFactorAccess().getFullStopCircumflexAccentKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getPrimaryPrimaryParserRuleCall_1_1_0()); 
	    }
		lv_Primary_3_0=ruleprimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"Primary",
        		lv_Primary_3_0, 
        		"primary");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulename_Function
entryRulename_Function returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getName_FunctionRule()); }
	 iv_rulename_Function=rulename_Function 
	 { $current=$iv_rulename_Function.current; } 
	 EOF 
;

// Rule name_Function
rulename_Function returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getName_FunctionAccess().getNameParserRuleCall_0()); 
    }
    this_name_0=rulename
    { 
        $current = $this_name_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getName_FunctionAccess().getFunction_call_argsFunction_call_argsParserRuleCall_1_0()); 
	    }
		lv_Function_call_args_1_0=rulefunction_call_args		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getName_FunctionRule());
	        }
       		set(
       			$current, 
       			"Function_call_args",
        		lv_Function_call_args_1_0, 
        		"function_call_args");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleinitial_ref
entryRuleinitial_ref returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitial_refRule()); }
	 iv_ruleinitial_ref=ruleinitial_ref 
	 { $current=$iv_ruleinitial_ref.current; } 
	 EOF 
;

// Rule initial_ref
ruleinitial_ref returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='initial' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitial_refAccess().getInitialKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getInitial_refAccess().getFunction_call_argsParserRuleCall_1()); 
    }
    this_function_call_args_1=rulefunction_call_args
    { 
        $current = $this_function_call_args_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExprDer
entryRuleExprDer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprDerRule()); }
	 iv_ruleExprDer=ruleExprDer 
	 { $current=$iv_ruleExprDer.current; } 
	 EOF 
;

// Rule ExprDer
ruleExprDer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='der' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExprDerAccess().getDerKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprDerAccess().getFunctionArgsFunction_call_argsParserRuleCall_1_0()); 
	    }
		lv_functionArgs_1_0=rulefunction_call_args		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprDerRule());
	        }
       		set(
       			$current, 
       			"functionArgs",
        		lv_functionArgs_1_0, 
        		"function_call_args");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefunction_call_args
entryRulefunction_call_args returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_call_argsRule()); }
	 iv_rulefunction_call_args=rulefunction_call_args 
	 { $current=$iv_rulefunction_call_args.current; } 
	 EOF 
;

// Rule function_call_args
rulefunction_call_args returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunction_call_argsAccess().getFunction_call_argsAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunction_call_argsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_call_argsAccess().getF_argFunction_argumentsParserRuleCall_2_0()); 
	    }
		lv_f_arg_2_0=rulefunction_arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_call_argsRule());
	        }
       		set(
       			$current, 
       			"f_arg",
        		lv_f_arg_2_0, 
        		"function_arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunction_call_argsAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleexpression_list
entryRuleexpression_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_listRule()); }
	 iv_ruleexpression_list=ruleexpression_list 
	 { $current=$iv_ruleexpression_list.current; } 
	 EOF 
;

// Rule expression_list
ruleexpression_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_listAccess().getExprExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_listRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_listAccess().getExpreExpressionParserRuleCall_1_1_0()); 
	    }
		lv_Expre_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_listRule());
	        }
       		add(
       			$current, 
       			"Expre",
        		lv_Expre_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulename
entryRulename returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	 iv_rulename=rulename 
	 { $current=$iv_rulename.current; } 
	 EOF 
;

// Rule name
rulename returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNameAccess().getFullStopKeyword_0());
    }
)?(
(
		lv_name_ID_1_0=RULE_IDENT
		{
			newLeafNode(lv_name_ID_1_0, grammarAccess.getNameAccess().getName_IDIDENTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name_ID",
        		lv_name_ID_1_0, 
        		"IDENT");
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNameAccess().getFullStopKeyword_2_0());
    }
(
(
		lv_nam_ID_3_0=RULE_IDENT
		{
			newLeafNode(lv_nam_ID_3_0, grammarAccess.getNameAccess().getNam_IDIDENTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"nam_ID",
        		lv_nam_ID_3_0, 
        		"IDENT");
	    }

)
))*)
;





// Entry rule entryRulecomponent_reference
entryRulecomponent_reference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponent_referenceRule()); }
	 iv_rulecomponent_reference=rulecomponent_reference 
	 { $current=$iv_rulecomponent_reference.current; } 
	 EOF 
;

// Rule component_reference
rulecomponent_reference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponent_referenceAccess().getFullStopKeyword_0());
    }
)?(
(
		lv_ref_1_0=RULE_IDENT
		{
			newLeafNode(lv_ref_1_0, grammarAccess.getComponent_referenceAccess().getRefIDENTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponent_referenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ref",
        		lv_ref_1_0, 
        		"IDENT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComponent_referenceAccess().getSubscripts1Array_subscriptsParserRuleCall_2_0()); 
	    }
		lv_subscripts1_2_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponent_referenceRule());
	        }
       		set(
       			$current, 
       			"subscripts1",
        		lv_subscripts1_2_0, 
        		"array_subscripts");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponent_referenceAccess().getFullStopKeyword_3_0());
    }
(
(
		lv_ref1_4_0=RULE_IDENT
		{
			newLeafNode(lv_ref1_4_0, grammarAccess.getComponent_referenceAccess().getRef1IDENTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponent_referenceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"ref1",
        		lv_ref1_4_0, 
        		"IDENT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComponent_referenceAccess().getSubscriptsArray_subscriptsParserRuleCall_3_2_0()); 
	    }
		lv_subscripts_5_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponent_referenceRule());
	        }
       		add(
       			$current, 
       			"subscripts",
        		lv_subscripts_5_0, 
        		"array_subscripts");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;





// Entry rule entryRuleoutput_expression_list
entryRuleoutput_expression_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutput_expression_listRule()); }
	 iv_ruleoutput_expression_list=ruleoutput_expression_list 
	 { $current=$iv_ruleoutput_expression_list.current; } 
	 EOF 
;

// Rule output_expression_list
ruleoutput_expression_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOutput_expression_listAccess().getOutput_expression_listAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOutput_expression_listAccess().getEprExpressionParserRuleCall_1_0()); 
	    }
		lv_epr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutput_expression_listRule());
	        }
       		set(
       			$current, 
       			"epr",
        		lv_epr_1_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutput_expression_listAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutput_expression_listAccess().getExprExpressionParserRuleCall_2_1_0()); 
	    }
		lv_Expr_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutput_expression_listRule());
	        }
       		add(
       			$current, 
       			"Expr",
        		lv_Expr_3_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;





// Entry rule entryRulearray_subscripts
entryRulearray_subscripts returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_subscriptsRule()); }
	 iv_rulearray_subscripts=rulearray_subscripts 
	 { $current=$iv_rulearray_subscripts.current; } 
	 EOF 
;

// Rule array_subscripts
rulearray_subscripts returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArray_subscriptsAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArray_subscriptsAccess().getSubSubscriptParserRuleCall_1_0()); 
	    }
		lv_Sub_1_0=rulesubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_subscriptsRule());
	        }
       		set(
       			$current, 
       			"Sub",
        		lv_Sub_1_0, 
        		"subscript");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArray_subscriptsAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArray_subscriptsAccess().getSubscriptSubscriptParserRuleCall_2_1_0()); 
	    }
		lv_Subscript_3_0=rulesubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_subscriptsRule());
	        }
       		add(
       			$current, 
       			"Subscript",
        		lv_Subscript_3_0, 
        		"subscript");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArray_subscriptsAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRulesubscript
entryRulesubscript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubscriptRule()); }
	 iv_rulesubscript=rulesubscript 
	 { $current=$iv_rulesubscript.current; } 
	 EOF 
;

// Rule subscript
rulesubscript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubscriptAccess().getSubscriptAction_0_0(),
            $current);
    }
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubscriptAccess().getColonKeyword_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSubscriptAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubscriptRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefunction_arguments
entryRulefunction_arguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_argumentsRule()); }
	 iv_rulefunction_arguments=rulefunction_arguments 
	 { $current=$iv_rulefunction_arguments.current; } 
	 EOF 
;

// Rule function_arguments
rulefunction_arguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunction_argumentsAccess().getFunction_argumentsAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_argumentsAccess().getArgExpExpressionParserRuleCall_0_1_0()); 
	    }
		lv_ArgExp_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_argumentsRule());
	        }
       		add(
       			$current, 
       			"ArgExp",
        		lv_ArgExp_1_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_argumentsAccess().getFun_Arg_ExprFun_Arguments_expParserRuleCall_0_2_0_0()); 
	    }
		lv_Fun_Arg_Expr_2_0=ruleFun_Arguments_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_argumentsRule());
	        }
       		set(
       			$current, 
       			"Fun_Arg_Expr",
        		lv_Fun_Arg_Expr_2_0, 
        		"Fun_Arguments_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_argumentsAccess().getFun_Arg_ForFun_Arguments_forParserRuleCall_0_2_1_0()); 
	    }
		lv_Fun_Arg_For_3_0=ruleFun_Arguments_for		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_argumentsRule());
	        }
       		set(
       			$current, 
       			"Fun_Arg_For",
        		lv_Fun_Arg_For_3_0, 
        		"Fun_Arguments_for");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_argumentsAccess().getName_argNamed_argumentsParserRuleCall_1_0()); 
	    }
		lv_name_arg_4_0=rulenamed_arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_argumentsRule());
	        }
       		set(
       			$current, 
       			"name_arg",
        		lv_name_arg_4_0, 
        		"named_arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFun_Arguments_exp
entryRuleFun_Arguments_exp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFun_Arguments_expRule()); }
	 iv_ruleFun_Arguments_exp=ruleFun_Arguments_exp 
	 { $current=$iv_ruleFun_Arguments_exp.current; } 
	 EOF 
;

// Rule Fun_Arguments_exp
ruleFun_Arguments_exp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=',' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFun_Arguments_expAccess().getCommaKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFun_Arguments_expAccess().getArgsFunction_argumentsParserRuleCall_1_0()); 
	    }
		lv_Args_1_0=rulefunction_arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFun_Arguments_expRule());
	        }
       		set(
       			$current, 
       			"Args",
        		lv_Args_1_0, 
        		"function_arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFun_Arguments_for
entryRuleFun_Arguments_for returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFun_Arguments_forRule()); }
	 iv_ruleFun_Arguments_for=ruleFun_Arguments_for 
	 { $current=$iv_ruleFun_Arguments_for.current; } 
	 EOF 
;

// Rule Fun_Arguments_for
ruleFun_Arguments_for returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFun_Arguments_forAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFun_Arguments_forAccess().getFor_indicesFor_indicesParserRuleCall_1_0()); 
	    }
		lv_For_indices_1_0=rulefor_indices		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFun_Arguments_forRule());
	        }
       		set(
       			$current, 
       			"For_indices",
        		lv_For_indices_1_0, 
        		"for_indices");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulenamed_arguments
entryRulenamed_arguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamed_argumentsRule()); }
	 iv_rulenamed_arguments=rulenamed_arguments 
	 { $current=$iv_rulenamed_arguments.current; } 
	 EOF 
;

// Rule named_arguments
rulenamed_arguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNamed_argumentsAccess().getNamed_argumentParserRuleCall_0()); 
    }
    this_named_argument_0=rulenamed_argument
    { 
        $current = $this_named_argument_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamed_argumentsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamed_argumentsAccess().getNamed_argumentsNamed_argumentsParserRuleCall_1_1_0()); 
	    }
		lv_Named_arguments_2_0=rulenamed_arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamed_argumentsRule());
	        }
       		set(
       			$current, 
       			"Named_arguments",
        		lv_Named_arguments_2_0, 
        		"named_arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulenamed_argument
entryRulenamed_argument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamed_argumentRule()); }
	 iv_rulenamed_argument=rulenamed_argument 
	 { $current=$iv_rulenamed_argument.current; } 
	 EOF 
;

// Rule named_argument
rulenamed_argument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_arg_0_0=RULE_IDENT
		{
			newLeafNode(lv_arg_0_0, grammarAccess.getNamed_argumentAccess().getArgIDENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamed_argumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg",
        		lv_arg_0_0, 
        		"IDENT");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamed_argumentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamed_argumentAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamed_argumentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefor_indices
entryRulefor_indices returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_indicesRule()); }
	 iv_rulefor_indices=rulefor_indices 
	 { $current=$iv_rulefor_indices.current; } 
	 EOF 
;

// Rule for_indices
rulefor_indices returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFor_indicesAccess().getFor_indexParserRuleCall_0()); 
    }
    this_for_index_0=rulefor_index
    { 
        $current = $this_for_index_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFor_indicesAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_indicesAccess().getFor_indexFor_indexParserRuleCall_1_1_0()); 
	    }
		lv_For_index_2_0=rulefor_index		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_indicesRule());
	        }
       		add(
       			$current, 
       			"For_index",
        		lv_For_index_2_0, 
        		"for_index");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulefor_index
entryRulefor_index returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_indexRule()); }
	 iv_rulefor_index=rulefor_index 
	 { $current=$iv_rulefor_index.current; } 
	 EOF 
;

// Rule for_index
rulefor_index returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_index_0_0=RULE_IDENT
		{
			newLeafNode(lv_index_0_0, grammarAccess.getFor_indexAccess().getIndexIDENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFor_indexRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_0_0, 
        		"IDENT");
	    }

)
)(	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFor_indexAccess().getInKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_indexAccess().getExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_indexRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulemul_op_mul
entryRulemul_op_mul returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMul_op_mulRule()); } 
	 iv_rulemul_op_mul=rulemul_op_mul 
	 { $current=$iv_rulemul_op_mul.current.getText(); }  
	 EOF 
;

// Rule mul_op_mul
rulemul_op_mul returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMul_op_mulAccess().getAsteriskKeyword()); 
    }

    ;





// Entry rule entryRulemul_op_div
entryRulemul_op_div returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMul_op_divRule()); } 
	 iv_rulemul_op_div=rulemul_op_div 
	 { $current=$iv_rulemul_op_div.current.getText(); }  
	 EOF 
;

// Rule mul_op_div
rulemul_op_div returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMul_op_divAccess().getSolidusKeyword()); 
    }

    ;





// Entry rule entryRulemul_op_dotmul
entryRulemul_op_dotmul returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMul_op_dotmulRule()); } 
	 iv_rulemul_op_dotmul=rulemul_op_dotmul 
	 { $current=$iv_rulemul_op_dotmul.current.getText(); }  
	 EOF 
;

// Rule mul_op_dotmul
rulemul_op_dotmul returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMul_op_dotmulAccess().getFullStopAsteriskKeyword()); 
    }

    ;





// Entry rule entryRulemul_op_dotdiv
entryRulemul_op_dotdiv returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMul_op_dotdivRule()); } 
	 iv_rulemul_op_dotdiv=rulemul_op_dotdiv 
	 { $current=$iv_rulemul_op_dotdiv.current.getText(); }  
	 EOF 
;

// Rule mul_op_dotdiv
rulemul_op_dotdiv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='./' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMul_op_dotdivAccess().getFullStopSolidusKeyword()); 
    }

    ;





// Entry rule entryRuleadd_op_plus
entryRuleadd_op_plus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdd_op_plusRule()); } 
	 iv_ruleadd_op_plus=ruleadd_op_plus 
	 { $current=$iv_ruleadd_op_plus.current.getText(); }  
	 EOF 
;

// Rule add_op_plus
ruleadd_op_plus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdd_op_plusAccess().getPlusSignKeyword()); 
    }

    ;





// Entry rule entryRuleadd_op_minus
entryRuleadd_op_minus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdd_op_minusRule()); } 
	 iv_ruleadd_op_minus=ruleadd_op_minus 
	 { $current=$iv_ruleadd_op_minus.current.getText(); }  
	 EOF 
;

// Rule add_op_minus
ruleadd_op_minus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdd_op_minusAccess().getHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRuleadd_op_dotplus
entryRuleadd_op_dotplus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdd_op_dotplusRule()); } 
	 iv_ruleadd_op_dotplus=ruleadd_op_dotplus 
	 { $current=$iv_ruleadd_op_dotplus.current.getText(); }  
	 EOF 
;

// Rule add_op_dotplus
ruleadd_op_dotplus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='.+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdd_op_dotplusAccess().getFullStopPlusSignKeyword()); 
    }

    ;





// Entry rule entryRuleadd_op_dotminus
entryRuleadd_op_dotminus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdd_op_dotminusRule()); } 
	 iv_ruleadd_op_dotminus=ruleadd_op_dotminus 
	 { $current=$iv_ruleadd_op_dotminus.current.getText(); }  
	 EOF 
;

// Rule add_op_dotminus
ruleadd_op_dotminus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='.-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdd_op_dotminusAccess().getFullStopHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRulerel_op_Less_then
entryRulerel_op_Less_then returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRel_op_Less_thenRule()); } 
	 iv_rulerel_op_Less_then=rulerel_op_Less_then 
	 { $current=$iv_rulerel_op_Less_then.current.getText(); }  
	 EOF 
;

// Rule rel_op_Less_then
rulerel_op_Less_then returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRel_op_Less_thenAccess().getLessThanSignKeyword()); 
    }

    ;





// Entry rule entryRulerel_op_Less_equal
entryRulerel_op_Less_equal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRel_op_Less_equalRule()); } 
	 iv_rulerel_op_Less_equal=rulerel_op_Less_equal 
	 { $current=$iv_rulerel_op_Less_equal.current.getText(); }  
	 EOF 
;

// Rule rel_op_Less_equal
rulerel_op_Less_equal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRel_op_Less_equalAccess().getLessThanSignEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRulerel_op_greater_then
entryRulerel_op_greater_then returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRel_op_greater_thenRule()); } 
	 iv_rulerel_op_greater_then=rulerel_op_greater_then 
	 { $current=$iv_rulerel_op_greater_then.current.getText(); }  
	 EOF 
;

// Rule rel_op_greater_then
rulerel_op_greater_then returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRel_op_greater_thenAccess().getGreaterThanSignKeyword()); 
    }

    ;





// Entry rule entryRulerel_op_greater_equal
entryRulerel_op_greater_equal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRel_op_greater_equalRule()); } 
	 iv_rulerel_op_greater_equal=rulerel_op_greater_equal 
	 { $current=$iv_rulerel_op_greater_equal.current.getText(); }  
	 EOF 
;

// Rule rel_op_greater_equal
rulerel_op_greater_equal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRel_op_greater_equalAccess().getGreaterThanSignEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRulerel_op_assignment
entryRulerel_op_assignment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRel_op_assignmentRule()); } 
	 iv_rulerel_op_assignment=rulerel_op_assignment 
	 { $current=$iv_rulerel_op_assignment.current.getText(); }  
	 EOF 
;

// Rule rel_op_assignment
rulerel_op_assignment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRel_op_assignmentAccess().getEqualsSignEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRulerel_op_Oper
entryRulerel_op_Oper returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRel_op_OperRule()); } 
	 iv_rulerel_op_Oper=rulerel_op_Oper 
	 { $current=$iv_rulerel_op_Oper.current.getText(); }  
	 EOF 
;

// Rule rel_op_Oper
rulerel_op_Oper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRel_op_OperAccess().getLessThanSignGreaterThanSignKeyword()); 
    }

    ;







// Entry rule entryRulestring_comment
entryRulestring_comment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getString_commentRule()); } 
	 iv_rulestring_comment=rulestring_comment 
	 { $current=$iv_rulestring_comment.current.getText(); }  
	 EOF 
;

// Rule string_comment
rulestring_comment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getString_commentAccess().getSTRINGTerminalRuleCall_0()); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getString_commentAccess().getPlusSignKeyword_1_0()); 
    }
    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getString_commentAccess().getSTRINGTerminalRuleCall_1_1()); 
    }
)*)?
    ;





RULE_UNSIGNED_NUMBER : (('0'..'9')+ '.' ('0'..'9')* (('E'|'e') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('E'|'e') ('+'|'-')? ('0'..'9')+);

RULE_BOOL_VAL : ('true'|'false');

RULE_INT : ('0'..'9')+;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_IDENT : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'.')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


