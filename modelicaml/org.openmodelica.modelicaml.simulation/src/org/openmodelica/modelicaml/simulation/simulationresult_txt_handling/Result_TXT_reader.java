/*
 * This file is part of OpenModelica.
 *
 * Copyright (c) 1998-CurrentYear, Open Source Modelica Consortium (OSMC),
 * c/o Linköpings universitet, Department of Computer and Information Science,
 * SE-58183 Linköping, Sweden.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR 
 * THIS OSMC PUBLIC LICENSE (OSMC-PL). 
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE
 * OF THE OSMC PUBLIC LICENSE OR THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE. 
 *
 * The OpenModelica software and the Open Source Modelica
 * Consortium (OSMC) Public License (OSMC-PL) are obtained
 * from OSMC, either from the above address,
 * from the URLs: http://www.ida.liu.se/projects/OpenModelica or  
 * http://www.openmodelica.org, and in the OpenModelica distribution. 
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
 * IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF OSMC-PL.
 *
 * See the full OSMC Public License conditions for more details.
 *
 * Main author: Wladimir Schamai, EADS Innovation Works / Linköping University, 2009-now
 *
 * Contributors: 
 *   Uwe Pohlmann, University of Paderborn 2009-2010, contribution to the Modelica code generation for state machine behavior, contribution to Papyrus GUI adoptations
 *   Parham Vasaiely, EADS Innovation Works / Hamburg University of Applied Sciences 2009-2011, implementation of simulation plugins
 */
package org.openmodelica.modelicaml.simulation.simulationresult_txt_handling;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;


// TODO: Auto-generated Javadoc
/**
 * The "_res.plt" file will be generated by a simulation runtime, OpenModelica uses the file to store all results and to plot them afterwards.
 * This file is generated by the simulation runtime.
 * @author EADS Innovation Works, Parham Vasaiely, Parham.Vasaiely@eads.com
 *
 */
public class Result_TXT_reader {

	/** The raf. */
	private static RandomAccessFile raf;
	
	/**
	 * Reads a _res.plt file from a specified path
	 * @param pathToResult Absoulut path to the "_res.plt" file
	 * @return a Map containing all variables using the full qualified names and all their results e.g.: tank1.h [time 0= 2, time 1 = 2.3,...]
	 */
	public static Map<String, Map<String, String>> readResult(String pathToResult){
		
		
		Map<String, Map<String, String>> results = new TreeMap<String, Map<String, String>>();
		
		try {
		
		//result file
		raf = new RandomAccessFile( pathToResult, "r");
		
		File resultFile = new File(pathToResult);
		
		Scanner scname = new Scanner(resultFile.getName());
		scname.useDelimiter("_res.plt");
		
//		String name = scname.next(); //TODO [20101108]
		
		/*
		 * 
		 * #Ptolemy Plot file, generated by OpenModelica
		 * #IntervalSize=22
		 * TitleText: OpenModelica simulation plot
		 * XLabel: t
		 * 
		 */
			
		boolean hasDataSet = true;
		while(hasDataSet){
			String line = raf.readLine();
//			System.out.println(line);
			if(line != null && !line.isEmpty() && line.equals("DataSet: time")){				
				String fullQualifiedName = "time";
				
				results.put(fullQualifiedName, collectDataSet(raf)); //Add Time
//				results.addAll(dataSetFound(fullQualifiedName, raf, results));	//Add all other results			
				//TODO NOTE: An dieser stelle wurde die Leere Zeile bereits eingelesen von collectDataSet
				dataSetFound(raf, results);	//Add all other results
				hasDataSet= false;
			} 
		}
				
		
			raf.close();
			
			return results;
		
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * Collects a data set and calls {@link #collectDataSet(String, RandomAccessFile)} to collect all results.
	 *
	 * @param raf the result file as RandomAccessFile
	 * @param results an ArrayList to store all found data sets
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private static void dataSetFound(RandomAccessFile raf, Map<String, Map<String, String>> results) throws IOException{
		if(raf != null && raf.length() != 0){
			String line = raf.readLine();
//			System.out.println(line);
			if(line != null && !line.isEmpty() && line.contains("DataSet:")){
				Scanner scLine = new Scanner(line);
				scLine.useDelimiter("DataSet: ");
				String fullQualifiedName = scLine.next();
				results.put(fullQualifiedName, collectDataSet(raf));
				dataSetFound(raf, results);
			}
		}
	}
	
	/**
	 * Reads all results of the DataSet and returns a full initialized ResultProperty object.
	 *
	 * @param raf the result file as RandomAccessFile
	 * @return a full initialized ResultProperty object
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private static Map<String, String> collectDataSet(RandomAccessFile raf) throws IOException{
//		ResultProperty rp = new ResultProperty(fullQualifiedName);
		
		Map<String, String> resultsOfDataSet = new TreeMap<String, String>();
		
		boolean hasValue = true;
		while(hasValue){
			String line = raf.readLine();
			if(line != null && !line.isEmpty() && line.contains(",")){ //The line is a result line like double, double
				Scanner scLine = new Scanner(line);
				scLine.useDelimiter(", ");
				String time = scLine.next().trim();
				String result = scLine.next().trim();
				
				resultsOfDataSet.put(time, result);
			}else if(line != null && (line.isEmpty() || line.trim().equals(""))) //break if the line is empty (an empty line signals the beginning of a new data set)
				hasValue = false;
		}		
		return resultsOfDataSet;
	}
	
	
	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String[] args){
		
		String pathToResult =  "D:\\myUMLModel.Class_0_res.plt";
		System.out.println(readResult(pathToResult));
	}
}
