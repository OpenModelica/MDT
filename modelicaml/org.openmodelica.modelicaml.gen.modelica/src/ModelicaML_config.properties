# Configuration 
c_profileName = ModelicaML

# Configuration: Code generation
c_outputFolder = code-gen/
c_incFolder = code-inc/
c_includeModelComments = true
c_includeAsserts = true
	#debugMode is used to include code for, e.g. checking if only one OR state is active at an instance or if states are deactivated if the parent state is not active.
c_debugMode = true

	### ModelicaML specific
p_path_ModelicaClassConstructs = ModelicaML::ModelicaClassConstructs
p_path_ModelicaPredefinedTypes = ModelicaML::ModelicaPredefinedTypes
p_path_ModelicaCompositeConstructs = ModelicaML::ModelicaCompositeConstructs
p_path_ModelicaBehaviorConstructs = ModelicaML::ModelicaBehaviorConstructs
p_path_ModelicaPredefinedEnumerations = ModelicaML::ModelicaPredefinedEnumerations
p_path_ModelicaRelationsConstructs = ModelicaML::ModelicaRelationsConstructs
p_path_ModelicaRequirementConstructs = ModelicaML::ModelicaRequirementConstructs
p_path_ModelicaSimulationConstructs = ModelicaML::ModelicaSimulationConstructs
p_path_ModelicaAnnotationConstructs = ModelicaML::ModelicaAnnotationConstructs
p_path_ModelicaMLTestDefinition = ModelicaML::Verification
p_path_ModelicaMLValueBinding = ModelicaML::ValueBinding
p_path_ModelicaMLModelReferences = ModelicaML::ModelReferences
p_path_ModelicaMLCodeGeneration = ModelicaML::CodeGeneration

	#### ModelicaML specific END

# Stereotypes: Modelica Classes
s_class = ModelicaClass
s_package = ModelicaPackage
s_operator = Operator
s_model = Model
s_block = Block
s_connector = Connector
s_record = Record
s_type = Type
s_enumeration = ModelicaEnumeration
s_function = Function
	### ModelicaML specific
s_calculationModel = CalculationModel
s_testScenario = VerificationScenario
s_test = VerificationModel
s_requirement = Requirement
s_requirementRepresentative = RequirementRepresentative
s_measureOfEffectiveness = MeasureOfEffectiveness

s_ModelicaModelReference = ModelicaModelReference
s_p_modelPath = modelPath

s_ModelicaModelProxy = ModelicaModelProxy

s_CodeGenerationSpecification = CodeGenerationSpecification
	#### ModelicaML specific END

	### ModelicaML specific: Verification Definition Dependencies
s_requires = Requires
s_requiredFor = RequiredFor
s_usedToVerify = UsedToVerify
	#### ModelicaML specific END: Verification  Definition Dependencies
	
	
# Stereotypes: Modelica Classes Properties
s_p_final = final
s_p_partial	= partial
s_p_encapsulated = encapsulated
s_p_expandable = expandable
	### ModelicaML specific
s_p_iconImagePath = iconImagePath
	#### ModelicaML specific END

# Stereotypes: Modelica Relations
s_extends = ExtendsRelation
s_typeExtend = TypeRelation
s_redeclare = RedeclareRelation
s_partialDerivativeFunction = PartialDerivativeOfFunctionRelation
s_constrainedby = ConstrainedByRelation
s_import = Import


# Stereotypes: Modelica Function Properties
	#### NOTE: in ModelicaML 'external' keyword is set if s_p_externalLanguageSpecification != null
s_p_external = external
s_p_externalLanguageSpecification = externalLanguageSpecification
s_p_externalFunctionCall = externalFunctionCall
s_p_externalAnnotation = externalAnnotation


# Stereotypes: Modelica Components
s_component = Component
s_variable = Variable
s_port = ConnectionPort
s_functionArgument = FunctionArgument
	#### ModelicaML specific
s_requirementInstance = RequirementInstance
s_calculatedProperty = CalculatedProperty
	#### ModelicaML specific END


# Stereotypes: Modelica Components Properties
s_p_innerouter = scope
s_p_replaceable = replaceable
s_p_causality = causality
s_p_conditionalAttribute = conditionalExpression
s_p_modification = modification
s_p_declarationEquation = declarationEquationOrAssignment
	#### ModelicaML specific
s_p_declarationAssignment = declarationAssignment
	#### ModelicaML specific END
s_p_arraySubscripts = arraySize
s_p_variability = variability
	### ISSUE: TODO: For components we use use UML "public" and "protected" and exclude "private" and "package". We should do the same for classes.
s_p_visibility = visibility
	### ISSUE : TODO: END
s_p_flowFlag = flowFlag
	## s_partialDerivativeFunction
s_p_partialDerivativeFunctionArguments = arguments

# Stereotypes: Modelica Behavior
s_equation = Equations(Code)
s_algorithm = Algorithm(Code)
s_assert = Assert
s_connect = Connection
s_if = If
s_when = When
	### ModelicaML specific
s_modelicaStateMachine = ModelicaMLStateMachine
	## ModelicaML specific: ModelicaMLStateMachine
s_p_samplingExpression = samplingExpression
	### ModelicaML specific END
s_stateDependency = StateDependency
s_conditionalEquation = ConditionalEquations(Diagram)
s_conditionalEquationEquations = Equations(CodeInDiagram)
s_conditionalAlgorithm = ConditionalAlgorithm(Diagram)
s_conditionalAlgorithmStatements = AlgorithmStatements(CodeInDiagram)
s_executionOrderPriority = ExecutionOrderPriority
s_p_isSubActivity = isSubActivity
s_p_forIndices = forIndices
s_p_loopKind = loopKind
s_p_whileExpression = whileExpression
	## ModelicaML specific: StateTransitionSpecification
s_StateTransitionSpecification = StateTransitionSpecification
s_p_suppressExitActions = suppressExitActions
s_p_suppressEntryActions = suppressEntryActions
	## ModelicaML specific: StateSpecification
s_StateSpecification = StateSpecification
s_p_freezeExpression = freezeExpression
	## ModelicaML specific: AdditionalIncludes
s_AdditionalIncludes = AdditionalIncludes
s_p_additionalActionCode = additionalActionCode
	## ModelicaML specific END
	## ModelicaML specific: ControlFlowSpecification
s_p_priority = priority
	## ModelicaML specific: StateDependency
s_p_isInState = isInState
s_p_logicalOperator = logicalOperator
	### ModelicaML specific END
	
	## ModelicaML specific: s_connect
s_p_connectionEnds = explicitConnectionEnds
	### ModelicaML specific END
	
# Stereotypes: Modelica Behavior Properties
s_p_initial = initial
	## Assert (NOTE: not supported by SysML4Modelica)
s_p_condition = condition
s_p_level = level
s_p_message = message


# Stereotypes: Modelica Annotation
s_annotation = Annotation

s_annotation_icon = Annotation(Icon)
s_p_iconAnnotationString = iconAnnotationString
