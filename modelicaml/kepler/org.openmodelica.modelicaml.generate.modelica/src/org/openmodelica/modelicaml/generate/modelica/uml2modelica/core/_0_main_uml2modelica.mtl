[comment encoding = UTF-8 /]
[module _0_main_uml2modelica('http://www.eclipse.org/uml2/3.0.0/UML')extends org::openmodelica::modelicaml::generate::modelica::ModelicaML2Modelica_v04::ModelicaML2Modelica_v04/]
[import org::openmodelica::modelicaml::generate::modelica::uml2modelica::core::_1_file_name/]
[import org::openmodelica::modelicaml::generate::modelica::uml2modelica::core::_2_class_getter/]
[import org::openmodelica::modelicaml::generate::modelica::uml2modelica::core::_3_component_getter/]
[import org::openmodelica::modelicaml::generate::modelica::uml2modelica::core::_4_behavior_getter/]
[import org::openmodelica::modelicaml::generate::modelica::uml2modelica::core::helper/]

[import org::openmodelica::modelicaml::generate::modelica::uml2modelica::services::StringUtls/] 		   
[import org::openmodelica::modelicaml::generate::modelica::uml2modelica::services::umlservices/]

[comment 	############################################################# 	
 			This impementation is based on the Modelica 3.2 specification.	
			############################################################# 	

 

 			############################################################# 	
 							B.2.1 Stored Definition							
 			############################################################# 	/]



[template public stored_definition(aClassifier : Classifier) ]
[file (file_name(), false)]
[add_inc_top_file()/][add_inc_validation()/][comment NOTE: Not part of the Modelica grammar. /]

[within()/]
[final()/][class_definition()/][comment NOTE: the ";" is moved to the end of the "class_specifier"/]
[/file]
[/template]

[comment]
<%-- 	############################################################# 	--%>
<%-- 					B.2.2 Class Definition							--%>
<%-- 	############################################################# 	--%>
[/comment]


[template public class_definition(aClassifier : Classifier) post(trim())]
[encapsulated()/][partial()/][restricted_class_name()/][class_specifier()/]
[/template]

[template public class_definition(anEnumeration : Enumeration) post(trim())]
[encapsulated()/][partial()/] type [name.replaceSpecChar()/] = enumeration([if (not (ownedElement->filter(EnumerationLiteral)->notEmpty()))]:[else][ownedElement->filter(EnumerationLiteral).name.replaceSpecChar()->sep(', ')/]);[/if]
[/template]

[template public class_definition(aPrimitiveType : PrimitiveType) post(trim())]	
[aPrimitiveType.encapsulated()/][aPrimitiveType.partial()/] type [name.replaceSpecChar()/] = [for (generalization)][if (general.name->notEmpty())][general.qualifiedName.replaceSpecCharExceptThis('::').replaceAll('::', '.').replaceAll(getProperty('p_path_ModelicaPredefinedTypes').replaceAll('::', '.')+'.', '').replaceAll('Modelica', '')/][if (getStereotypeValue(getProperty('s_typeExtend'), getProperty('s_p_arraySubscripts')).oclAsType(Boolean))]['['/][getStereotypeValues(getProperty('s_typeExtend'), getProperty('s_p_arraySubscripts'))->sep(', ')/][']'/][/if][if (getStereotypeValue(getProperty('s_typeExtend'), getProperty('s_p_modification')).oclAsType(Boolean))]([getStereotypeValues(getProperty('s_typeExtend'), getProperty('s_p_modification')).removeOutterBraces()->sep(', ')/])[/if][/if][/for]
[/template]

[template public class_specifier(aClassifier : Classifier) post(trim())]
[if (isPartialDerivativeFunction() = false)]
[IDENT('start')/] [string_comment() /][constraining_clause()/]
	[composition()/]
	[add_inc_behavior()/] [comment]<%-- NOTE: Not part of the Modelica grammar. --%>[/comment]
end [IDENT('end')/];  [comment]<%-- NOTE: the ";" was originally in "stored_definition"  --%>[/comment]
[else] [comment]<%-- Partial Derivative Function --%>[/comment]
[name.replaceSpecChar()/] = der([clientDependency.target->filter(NamedElement).name.replaceSpecChar()/], [partialDerivativeFunctionArguments()/][clientDependency->asSequence()->first().partialDerivativeFunctionArguments()/]);[comment  NOTE: the ";" was originally in "stored_definition"  /]
[/if]
[/template]  

[template public composition(aClassifier : Classifier) post(trim())]
[annotation()/][if (annotation() <> '')];[/if]
[element_list()/]
[equation_section()/]
[algorithm_section()/]  
[external()/]
[/template]
[comment]<%--<%annotation%><%if (annotation != ""){%>;<%}%>--%>[/comment]

[template public element_list(aClassifier : Classifier) post(trim())][comment]DONE[/comment]	
[element()/][comment]<%-- NOTE: the ";" is moved to the end of the "class_specifier"  --%>[/comment]
[add_inc_structure()/][comment]<%-- NOTE: Not part of the Modelica grammar. --%>[/comment]
[/template]

[template public element(aClassifier : Classifier) post(trim())]
[import_clause()/]
[extends_clause()/]
[nested_classes()/][comment]<%-- NOTE: Includes the class_definition. --%>[/comment]
[components()/][comment]<%-- NOTE: Includes the component_clause. --%>[/comment]
[signals()/][comment]<%-- NOTE: Create variables that represent signals. This is not a Modelica construct. --%>[/comment]	
[/template]

[comment]<%-- UML Signals ###################################################################### --%>[/comment]

[template public signals(aClassifier : Classifier) post(trim())][comment]DONE[/comment]
	[for (ownedElement->filter(Signal))]
record [name.replaceSpecChar()/]_Definition
		Integer counter; // indicates how many times the the signal has occured.
		Boolean occurrence; // indicates that signal has occured.
		[for (ownedElement->filter(Property))]
		[component_clause()/]
		[/for]
end [name.replaceSpecChar()/]_Definition;
[name.replaceSpecChar()/]_Definition [name.replaceSpecChar()/];
	[/for]		
[/template]

[comment]
<%-- UML Signals END ################################################################# --%>
[/comment]

[template public import_clause(aClassifier : Classifier) post(trim())][comment]DONE[/comment]
[for (clientDependency->select(hasStereotype(getProperty('s_import'))))][comment]<%--  TODO: Use the <<Import>> stereotype. --%>[/comment]
import [target->filter(NamedElement).getQualifiedName().replaceSpecCharExceptThis('::').replaceAll('::', '.')/]
[/for]
[/template]
 
[comment]<%-- TODO: stereotypes  for imports  --%>[/comment]
[template public nested_classes(aClassifier : Classifier) post(trim())]
[for (ownedElement->filter(Class)->select(isModelicaRestrictedClass() = true and isStoredDefinition() = false)  )]
[nested_class_definition()/][comment]<%-- NOTE: Includes the class_definition. --%>[/comment]
[/for]
[for (ownedElement->filter(Enumeration)->select(isModelicaRestrictedClass() = true and isStoredDefinition() = false)  )]
[nested_class_definition()/][comment]<%-- NOTE: Includes the class_definition. --%>[/comment]
[/for]
[for (ownedElement->filter(PrimitiveType)->select(isModelicaRestrictedClass() = true and isStoredDefinition() = false)  )]
[nested_class_definition()/][comment]<%-- NOTE: Includes the class_definition. --%>[/comment]
[/for]
[/template]

[template public nested_class_definition(aClassifier : Classifier) post(trim())]
[add_inc_validation()/][comment]<%-- NOTE: Not part of the Modelica grammar. --%>[/comment]
[public_protected()/][redeclare()/][final()/][replaceable()/][class_definition()/]
[/template]

[template public components(aClassifier : Classifier)]
[for (ownedElement->filter(TypedElement)->select(isModelicaComponent() = true))]
[component_clause()/]
[/for]
[/template]

[template public components(aFunctionBehavior : FunctionBehavior)]
[for (ownedElement->filter(Parameter)->select(isModelicaComponent() = true)->asSequence())]
[component_clause()/]
[/for]
protected
[for (ownedElement->filter(Property)->select(isModelicaComponent() = true)->asSequence())]
	[component_clause()/]
[/for]
[/template]

[comment]
<%-- 	############################################################# 	--%>
<%-- 					B.2.3 Extends									--%>
<%-- 	############################################################# 	--%>
[/comment]

[template public extends_clause(aClassifier : Classifier) post(trim())] 
[for (generalization)][if (general.name->notEmpty())]
	extends [general.qualifiedName.replaceSpecCharExceptThis('::').replaceAll('::', '.').replaceAll(getProperty('p_path_ModelicaPredefinedTypes').replaceAll('::', '.')+'.', '')/][if (getStereotypeValue(getProperty('s_extends'), getProperty('s_p_modification')).toString() <> '')]([getStereotypeValues(getProperty('s_extends'), getProperty('s_p_modification')).removeOutterBraces()->sep(', ')/])[/if] [annotation()/];
[/if][/for]
[/template]

[template public constraining_clause(aNamedElement : NamedElement) post(trim())]  
[if (clientDependency->select(hasStereotype(getProperty('s_constrainedby')))->notEmpty())]
	[for (clientDependency->select(hasStereotype(getProperty('s_constrainedby'))))]
constrainedby[target->filter(NamedElement).qualifiedName.replaceSpecCharExceptThis('::').replaceAll('::', '.').replaceAll(getProperty('p_path_ModelicaPredefinedTypes').replaceAll('::', '.')+'.', '')/][if (not getStereotypeValue(getProperty('s_constrainedby'), getProperty('s_p_modification')).oclIsUndefined())]([getStereotypeValues(getProperty('s_constrainedby'), getProperty('s_p_modification')).removeOutterBraces()->sep(', ')/])[/if][comment_fixed()/]
	[/for]
[/if]
[/template]

[comment]
<%-- 	############################################################# 	--%>
<%-- 					B.2.4 Component Clause 							--%>
<%-- 	############################################################# 	--%>
[/comment]


[template public component_clause(aTypedElement : TypedElement) post(trim())]
[public_protected()/][redeclare()/][final()/][innerouter()/][replaceable()/][type_prefix()/][type_specifier()/] [component_list()/];
[/template]
[comment]<%-- NOTE: array_subscripts are inserted at the end of the component <%array_subscripts%> --%>[/comment]
[template public type_prefix(aTypedElement : TypedElement)]
[flowFlag()/][variability()/][causality()/]
[/template]	

[template public type_specifier(aTypedElement : TypedElement)]
[if (type->notEmpty())][if ((type->filter(Classifier).qualifiedName.startsWith(owner->filter(Classifier).qualifiedName + '::')) = true)][type.qualifiedName.replace('owner->filter(Classifier).qualifiedName' + '::', '').replaceSpecCharExceptThis('::').replaceAll('::', '.')/][else][type.type_path()/][/if][/if]
[/template]
[comment]
<%script type="uml.TypedElement" name="type_specifier"%>
<%if (type != null){%><%if (type.filter("Classifier").qualifiedName.startsWith(owner.filter("Classifier").qualifiedName + "::")){%>
<%type.qualifiedName.replaceFirst(owner.filter("Classifier").qualifiedName + "::", "").replaceSpecCharExceptThis("::").replaceAll("::","." )%><%}
else{%><%type.type_path%><%}%><%}%>
[/comment]

[template public component_list(aTypedElement : TypedElement)]
[component_declaration()/][comment]<%-- NOTE: A list-notation for components of the same type is not supported. Components are listed separatly. --%>[/comment]
[/template]

[template public component_declaration(aTypedElement : TypedElement) post(trim())]	
[declaration()/][conditional_attribute()/][comment_fixed()/][constraining_clause()/]
[/template]

[template public declaration(aTypedElement : TypedElement) post(trim())]
[name.replaceSpecChar()/][array_subscripts()/][modification()/][declaration_equation()/][comment]<%-- NOTE: declaration_equation does not appear as such in the Modelica grammar. --%>[/comment]
[/template]


[comment]
<%-- 	############################################################# 	--%>
<%-- 					B.2.5 Modifications								--%>
<%-- 	############################################################# 	--%>
<%-- NOTE: Modifications are captured as text in SysML models. They are included as they are ... --%>
[/comment]

[comment]
<%-- 	############################################################# 	--%>
<%-- 					B.2.6 Equations									--%>
<%-- 	############################################################# 	--%>
[/comment]

[template public equation_section(aClassifier : Classifier) post(trim())]	
[equation()/]
[aClassifier->filter(Class).oclAsType(Class).connect_equations()/]
[/template] 

[template public algorithm_section(aClassifier : Classifier) post(trim())]
[algorithm()/]
[/template] 
 
[comment]
<%-- 	############################################################# 	--%>
<%-- 					Additional: UML Packge Code						--%>
<%-- In order to reflect the model structure UML packages are also translated into Modelica packages. --%>
<%-- NOTE: Since no stereotype is available for UML Package in the profile no properties of a Modelica class can be set. --%>
<%-- 	############################################################# 	--%>
[/comment]

[comment]CALLED[/comment]
[template public package_code(aPackage : Package)]
[file (file_name(), false)] 
[add_inc_top_file(aPackage)/]
[add_inc_validation(aPackage)/][comment]<%-- NOTE: Not part of the Modelica grammar. --%>[/comment]
[within()/]
package [name.replaceSpecChar()/]
[add_inc_top_annotation(aPackage)/]
	
[for (ownedElement->filter(Class)->select(isModelicaRestrictedClass() = true and isStoredDefinition() = false))]
	[nested_class_definition()/]
[/for]
	
[for (ownedElement->filter(Enumeration)->select(isModelicaRestrictedClass() = true and isStoredDefinition() = false))]
	[nested_class_definition()/]
[/for]
	
[for (ownedElement->filter(PrimitiveType)->select(isModelicaRestrictedClass() = true and isStoredDefinition() = false))]
	[nested_class_definition()/]
[/for]
end [name.replaceSpecChar()/];
[/file]
[/template]







