/*
* generated by Xtext
*/
grammar InternalModification;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.openmodelica.modelicaml.editor.xtext.modification.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.openmodelica.modelicaml.editor.xtext.modification.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.openmodelica.modelicaml.editor.xtext.modification.services.ModificationGrammarAccess;

}

@parser::members {

 	private ModificationGrammarAccess grammarAccess;
 	
    public InternalModificationParser(TokenStream input, IAstFactory factory, ModificationGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/openmodelica/modelicaml/editor/xtext/modification/parser/antlr/internal/InternalModification.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "modification_alternatives";	
   	}
   	
   	@Override
   	protected ModificationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulemodification_alternatives
entryRulemodification_alternatives returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModification_alternativesRule(), currentNode); }
	 iv_rulemodification_alternatives=rulemodification_alternatives 
	 { $current=$iv_rulemodification_alternatives.current; } 
	 EOF 
;

// Rule modification_alternatives
rulemodification_alternatives returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getModification_alternativesAccess().getLeft_hand_component_referenceParserRuleCall_0_0(), currentNode); 
    }
    this_left_hand_component_reference_0=ruleleft_hand_component_reference
    { 
        $current = $this_left_hand_component_reference_0.current; 
        currentNode = currentNode.getParent();
    }
	'=' 
    {
        createLeafNode(grammarAccess.getModification_alternativesAccess().getEqualsSignKeyword_0_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModification_alternativesAccess().getExprExpressionParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_Expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModification_alternativesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Expr",
	        		lv_Expr_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModification_alternativesAccess().getModification_RuleModificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_Modification_Rule_3_0=rulemodification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModification_alternativesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Modification_Rule",
	        		lv_Modification_Rule_3_0, 
	        		"modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleleft_hand_component_reference
entryRuleleft_hand_component_reference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLeft_hand_component_referenceRule(), currentNode); }
	 iv_ruleleft_hand_component_reference=ruleleft_hand_component_reference 
	 { $current=$iv_ruleleft_hand_component_reference.current; } 
	 EOF 
;

// Rule left_hand_component_reference
ruleleft_hand_component_reference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'.' 
    {
        createLeafNode(grammarAccess.getLeft_hand_component_referenceAccess().getFullStopKeyword_0(), null); 
    }
)?(
(
		lv_ref_1_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getLeft_hand_component_referenceAccess().getRefIDENTTerminalRuleCall_1_0(), "ref"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeft_hand_component_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_1_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLeft_hand_component_referenceAccess().getSubscripts1Array_subscriptsParserRuleCall_2_0(), currentNode); 
	    }
		lv_subscripts1_2_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeft_hand_component_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"subscripts1",
	        		lv_subscripts1_2_0, 
	        		"array_subscripts", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'.' 
    {
        createLeafNode(grammarAccess.getLeft_hand_component_referenceAccess().getFullStopKeyword_3_0(), null); 
    }
(
(
		lv_ref1_4_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getLeft_hand_component_referenceAccess().getRef1IDENTTerminalRuleCall_3_1_0(), "ref1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeft_hand_component_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ref1",
	        		lv_ref1_4_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLeft_hand_component_referenceAccess().getSubscriptsArray_subscriptsParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_subscripts_5_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeft_hand_component_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subscripts",
	        		lv_subscripts_5_0, 
	        		"array_subscripts", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)*)
;





// Entry rule entryRulemodification
entryRulemodification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModificationRule(), currentNode); }
	 iv_rulemodification=rulemodification 
	 { $current=$iv_rulemodification.current; } 
	 EOF 
;

// Rule modification
rulemodification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getModificationAccess().getClass_modificationParserRuleCall_0_0(), currentNode); 
    }
    this_class_modification_0=ruleclass_modification
    { 
        $current = $this_class_modification_0.current; 
        currentNode = currentNode.getParent();
    }
(	'=' 
    {
        createLeafNode(grammarAccess.getModificationAccess().getEqualsSignKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModificationAccess().getExprExpressionParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_Expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Expr",
	        		lv_Expr_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(	'=' 
    {
        createLeafNode(grammarAccess.getModificationAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModificationAccess().getExprExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Expr_4_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Expr",
	        		lv_Expr_4_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	':=' 
    {
        createLeafNode(grammarAccess.getModificationAccess().getColonEqualsSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModificationAccess().getExprExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_Expr_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Expr",
	        		lv_Expr_6_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleclass_modification
entryRuleclass_modification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClass_modificationRule(), currentNode); }
	 iv_ruleclass_modification=ruleclass_modification 
	 { $current=$iv_ruleclass_modification.current; } 
	 EOF 
;

// Rule class_modification
ruleclass_modification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getClass_modificationAccess().getClass_modification_actionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getClass_modificationAccess().getClass_modification_actionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getClass_modificationAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_modificationAccess().getArgArgument_listParserRuleCall_2_0(), currentNode); 
	    }
		lv_Arg_2_0=ruleargument_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_modificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Arg",
	        		lv_Arg_2_0, 
	        		"argument_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getClass_modificationAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleargument_list
entryRuleargument_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgument_listRule(), currentNode); }
	 iv_ruleargument_list=ruleargument_list 
	 { $current=$iv_ruleargument_list.current; } 
	 EOF 
;

// Rule argument_list
ruleargument_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getArgument_listAccess().getArgumentParserRuleCall(), currentNode); 
    }
    this_argument_0=ruleargument
    { 
        $current = $this_argument_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleargument
entryRuleargument returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgumentRule(), currentNode); }
	 iv_ruleargument=ruleargument 
	 { $current=$iv_ruleargument.current; } 
	 EOF 
;

// Rule argument
ruleargument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getElement_modification_or_replaceableParserRuleCall_0(), currentNode); 
    }
    this_element_modification_or_replaceable_0=ruleelement_modification_or_replaceable
    { 
        $current = $this_element_modification_or_replaceable_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getElement_redeclarationParserRuleCall_1(), currentNode); 
    }
    this_element_redeclaration_1=ruleelement_redeclaration
    { 
        $current = $this_element_redeclaration_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleelement_modification_or_replaceable
entryRuleelement_modification_or_replaceable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElement_modification_or_replaceableRule(), currentNode); }
	 iv_ruleelement_modification_or_replaceable=ruleelement_modification_or_replaceable 
	 { $current=$iv_ruleelement_modification_or_replaceable.current; } 
	 EOF 
;

// Rule element_modification_or_replaceable
ruleelement_modification_or_replaceable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getElement_modification_or_replaceableAccess().getElement_modification_or_replaceableAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElement_modification_or_replaceableAccess().getElement_modification_or_replaceableAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'each' 
    {
        createLeafNode(grammarAccess.getElement_modification_or_replaceableAccess().getEachKeyword_1(), null); 
    }
)?(	'final' 
    {
        createLeafNode(grammarAccess.getElement_modification_or_replaceableAccess().getFinalKeyword_2(), null); 
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_modification_or_replaceableAccess().getElement_modElement_modificationParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_Element_mod_3_0=ruleelement_modification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_modification_or_replaceableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Element_mod",
	        		lv_Element_mod_3_0, 
	        		"element_modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_modification_or_replaceableAccess().getElement_repElement_replaceableParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_Element_rep_4_0=ruleelement_replaceable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_modification_or_replaceableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Element_rep",
	        		lv_Element_rep_4_0, 
	        		"element_replaceable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleelement_modification
entryRuleelement_modification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElement_modificationRule(), currentNode); }
	 iv_ruleelement_modification=ruleelement_modification 
	 { $current=$iv_ruleelement_modification.current; } 
	 EOF 
;

// Rule element_modification
ruleelement_modification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_modificationAccess().getNameNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_Name_0_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_modificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_0_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_modificationAccess().getModificationModificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_Modification_1_0=rulemodification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_modificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Modification",
	        		lv_Modification_1_0, 
	        		"modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getElement_modificationAccess().getString_commentParserRuleCall_2(), currentNode); 
    }
rulestring_comment
    { 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleelement_replaceable
entryRuleelement_replaceable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElement_replaceableRule(), currentNode); }
	 iv_ruleelement_replaceable=ruleelement_replaceable 
	 { $current=$iv_ruleelement_replaceable.current; } 
	 EOF 
;

// Rule element_replaceable
ruleelement_replaceable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getElement_replaceableAccess().getElement_replaceableAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElement_replaceableAccess().getElement_replaceableAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'replaceable' 
    {
        createLeafNode(grammarAccess.getElement_replaceableAccess().getReplaceableKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_replaceableAccess().getClass_DefClass_definitionParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_Class_Def_2_0=ruleclass_definition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_replaceableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_Def",
	        		lv_Class_Def_2_0, 
	        		"class_definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_replaceableAccess().getComp_clause2Component_clause1ParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_Comp_clause2_3_0=rulecomponent_clause1		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_replaceableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Comp_clause2",
	        		lv_Comp_clause2_3_0, 
	        		"component_clause1", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_replaceableAccess().getConstrain_ClauseConstraining_clauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_Constrain_Clause_4_0=ruleconstraining_clause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_replaceableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Constrain_Clause",
	        		lv_Constrain_Clause_4_0, 
	        		"constraining_clause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleconstraining_clause
entryRuleconstraining_clause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstraining_clauseRule(), currentNode); }
	 iv_ruleconstraining_clause=ruleconstraining_clause 
	 { $current=$iv_ruleconstraining_clause.current; } 
	 EOF 
;

// Rule constraining_clause
ruleconstraining_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'constrainedby' 
    {
        createLeafNode(grammarAccess.getConstraining_clauseAccess().getConstrainedbyKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstraining_clauseAccess().getNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_Name_1_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraining_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_1_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstraining_clauseAccess().getClass_ModClass_modificationParserRuleCall_2_0(), currentNode); 
	    }
		lv_Class_Mod_2_0=ruleclass_modification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraining_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_Mod",
	        		lv_Class_Mod_2_0, 
	        		"class_modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleelement_redeclaration
entryRuleelement_redeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElement_redeclarationRule(), currentNode); }
	 iv_ruleelement_redeclaration=ruleelement_redeclaration 
	 { $current=$iv_ruleelement_redeclaration.current; } 
	 EOF 
;

// Rule element_redeclaration
ruleelement_redeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getElement_redeclarationAccess().getElement_redeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElement_redeclarationAccess().getElement_redeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'redeclare' 
    {
        createLeafNode(grammarAccess.getElement_redeclarationAccess().getRedeclareKeyword_1(), null); 
    }
(	'each' 
    {
        createLeafNode(grammarAccess.getElement_redeclarationAccess().getEachKeyword_2(), null); 
    }
)?(	'final' 
    {
        createLeafNode(grammarAccess.getElement_redeclarationAccess().getFinalKeyword_3(), null); 
    }
)?(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_redeclarationAccess().getClass_DefClass_definitionParserRuleCall_4_0_0_0(), currentNode); 
	    }
		lv_Class_Def_4_0=ruleclass_definition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_redeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_Def",
	        		lv_Class_Def_4_0, 
	        		"class_definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_redeclarationAccess().getComp_clause1Component_clause1ParserRuleCall_4_0_1_0(), currentNode); 
	    }
		lv_Comp_clause1_5_0=rulecomponent_clause1		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_redeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Comp_clause1",
	        		lv_Comp_clause1_5_0, 
	        		"component_clause1", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_redeclarationAccess().getElement_RElement_replaceableParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_Element_R_6_0=ruleelement_replaceable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_redeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Element_R",
	        		lv_Element_R_6_0, 
	        		"element_replaceable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulecomponent_clause
entryRulecomponent_clause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponent_clauseRule(), currentNode); }
	 iv_rulecomponent_clause=rulecomponent_clause 
	 { $current=$iv_rulecomponent_clause.current; } 
	 EOF 
;

// Rule component_clause
rulecomponent_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getType_prefixParserRuleCall_0(), currentNode); 
    }
ruletype_prefix
    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getType_specifierParserRuleCall_1(), currentNode); 
    }
    this_type_specifier_1=ruletype_specifier
    { 
        $current = $this_type_specifier_1.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getArray_SubsArray_subscriptsParserRuleCall_2_0(), currentNode); 
	    }
		lv_Array_Subs_2_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Array_Subs",
	        		lv_Array_Subs_2_0, 
	        		"array_subscripts", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_clauseAccess().getCom_ListComponent_listParserRuleCall_3_0(), currentNode); 
	    }
		lv_Com_List_3_0=rulecomponent_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Com_List",
	        		lv_Com_List_3_0, 
	        		"component_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulecomponent_list
entryRulecomponent_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponent_listRule(), currentNode); }
	 iv_rulecomponent_list=rulecomponent_list 
	 { $current=$iv_rulecomponent_list.current; } 
	 EOF 
;

// Rule component_list
rulecomponent_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_listAccess().getComponent_declarationParserRuleCall_0(), currentNode); 
    }
    this_component_declaration_0=rulecomponent_declaration
    { 
        $current = $this_component_declaration_0.current; 
        currentNode = currentNode.getParent();
    }
(	',' 
    {
        createLeafNode(grammarAccess.getComponent_listAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_listAccess().getComponent_DecComponent_declarationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_component_Dec_2_0=rulecomponent_declaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"component_Dec",
	        		lv_component_Dec_2_0, 
	        		"component_declaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulecomponent_declaration
entryRulecomponent_declaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponent_declarationRule(), currentNode); }
	 iv_rulecomponent_declaration=rulecomponent_declaration 
	 { $current=$iv_rulecomponent_declaration.current; } 
	 EOF 
;

// Rule component_declaration
rulecomponent_declaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_declarationAccess().getDecDeclarationParserRuleCall_0_0(), currentNode); 
	    }
		lv_Dec_0_0=ruledeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_declarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Dec",
	        		lv_Dec_0_0, 
	        		"declaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_declarationAccess().getConditional_AttConditional_attributeParserRuleCall_1_0(), currentNode); 
	    }
		lv_Conditional_Att_1_0=ruleconditional_attribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_declarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Conditional_Att",
	        		lv_Conditional_Att_1_0, 
	        		"conditional_attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_declarationAccess().getCommentParserRuleCall_2(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleconditional_attribute
entryRuleconditional_attribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditional_attributeRule(), currentNode); }
	 iv_ruleconditional_attribute=ruleconditional_attribute 
	 { $current=$iv_ruleconditional_attribute.current; } 
	 EOF 
;

// Rule conditional_attribute
ruleconditional_attribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getConditional_attributeAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditional_attributeAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_Expr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_attributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Expr",
	        		lv_Expr_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulecomponent_clause1
entryRulecomponent_clause1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponent_clause1Rule(), currentNode); }
	 iv_rulecomponent_clause1=rulecomponent_clause1 
	 { $current=$iv_rulecomponent_clause1.current; } 
	 EOF 
;

// Rule component_clause1
rulecomponent_clause1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_clause1Access().getType_prefixParserRuleCall_0(), currentNode); 
    }
ruletype_prefix
    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_clause1Access().getType_specifierParserRuleCall_1(), currentNode); 
    }
    this_type_specifier_1=ruletype_specifier
    { 
        $current = $this_type_specifier_1.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_clause1Access().getCom_DecComponent_declaration1ParserRuleCall_2_0(), currentNode); 
	    }
		lv_Com_Dec_2_0=rulecomponent_declaration1		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_clause1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Com_Dec",
	        		lv_Com_Dec_2_0, 
	        		"component_declaration1", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulecomponent_declaration1
entryRulecomponent_declaration1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponent_declaration1Rule(), currentNode); }
	 iv_rulecomponent_declaration1=rulecomponent_declaration1 
	 { $current=$iv_rulecomponent_declaration1.current; } 
	 EOF 
;

// Rule component_declaration1
rulecomponent_declaration1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_declaration1Access().getDeclarationParserRuleCall_0(), currentNode); 
    }
    this_declaration_0=ruledeclaration
    { 
        $current = $this_declaration_0.current; 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getComponent_declaration1Access().getCommentParserRuleCall_1(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuletype_specifier
entryRuletype_specifier returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getType_specifierRule(), currentNode); }
	 iv_ruletype_specifier=ruletype_specifier 
	 { $current=$iv_ruletype_specifier.current; } 
	 EOF 
;

// Rule type_specifier
ruletype_specifier returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getType_specifierAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_Name_0_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getType_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_0_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuledeclaration
entryRuledeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclarationRule(), currentNode); }
	 iv_ruledeclaration=ruledeclaration 
	 { $current=$iv_ruledeclaration.current; } 
	 EOF 
;

// Rule declaration
ruledeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDeclarationAccess().getDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDeclarationAccess().getDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_redeclaredComponentName_1_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getDeclarationAccess().getRedeclaredComponentNameIDENTTerminalRuleCall_1_0(), "redeclaredComponentName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"redeclaredComponentName",
	        		lv_redeclaredComponentName_1_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getArraySubsArray_subscriptsParserRuleCall_2_0(), currentNode); 
	    }
		lv_ArraySubs_2_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ArraySubs",
	        		lv_ArraySubs_2_0, 
	        		"array_subscripts", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getModModificationParserRuleCall_3_0(), currentNode); 
	    }
		lv_Mod_3_0=rulemodification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Mod",
	        		lv_Mod_3_0, 
	        		"modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleclass_definition
entryRuleclass_definition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClass_definitionRule(), currentNode); }
	 iv_ruleclass_definition=ruleclass_definition 
	 { $current=$iv_ruleclass_definition.current; } 
	 EOF 
;

// Rule class_definition
ruleclass_definition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'encapsulated' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getEncapsulatedKeyword_0(), null); 
    }
)?(	'partial' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getPartialKeyword_1(), null); 
    }
)?(	'class' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getClassKeyword_2_0(), null); 
    }

    |	'model' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getModelKeyword_2_1(), null); 
    }

    |	'record' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getRecordKeyword_2_2(), null); 
    }

    |	'block' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getBlockKeyword_2_3(), null); 
    }

    |((	'expandable' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getExpandableKeyword_2_4_0(), null); 
    }
)?	'connector' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getConnectorKeyword_2_4_1(), null); 
    }
)
    |	'type' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getTypeKeyword_2_5(), null); 
    }

    |	'package' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getPackageKeyword_2_6(), null); 
    }

    |	'function' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getFunctionKeyword_2_7(), null); 
    }

    |	'operator' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getOperatorKeyword_2_8(), null); 
    }

    |(	'operator' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getOperatorKeyword_2_9_0(), null); 
    }
	'function' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getFunctionKeyword_2_9_1(), null); 
    }
)
    |(	'operator' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getOperatorKeyword_2_10_0(), null); 
    }
	'record' 
    {
        createLeafNode(grammarAccess.getClass_definitionAccess().getRecordKeyword_2_10_1(), null); 
    }
))
    { 
        currentNode=createCompositeNode(grammarAccess.getClass_definitionAccess().getClass_specifierParserRuleCall_3(), currentNode); 
    }
    this_class_specifier_16=ruleclass_specifier
    { 
        $current = $this_class_specifier_16.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleclass_specifier
entryRuleclass_specifier returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClass_specifierRule(), currentNode); }
	 iv_ruleclass_specifier=ruleclass_specifier 
	 { $current=$iv_ruleclass_specifier.current; } 
	 EOF 
;

// Rule class_specifier
ruleclass_specifier returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getClass_specifierAccess().getClass_specifierAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getClass_specifierAccess().getClass_specifierAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getString_commentParserRuleCall_1_0_1(), currentNode); 
    }
rulestring_comment
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getCompCompositionParserRuleCall_1_0_2_0(), currentNode); 
	    }
		lv_Comp_3_0=rulecomposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Comp",
	        		lv_Comp_3_0, 
	        		"composition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'end' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getEndKeyword_1_0_3(), null); 
    }
RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_0_4(), null); 
    }
)
    |(RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_1_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getEqualsSignKeyword_1_1_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getBase_prefixParserRuleCall_1_1_2(), currentNode); 
    }
rulebase_prefix
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getNameNameParserRuleCall_1_1_3_0(), currentNode); 
	    }
		lv_Name_9_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_9_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getArray_SubsArray_subscriptsParserRuleCall_1_1_4_0(), currentNode); 
	    }
		lv_Array_Subs_10_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Array_Subs",
	        		lv_Array_Subs_10_0, 
	        		"array_subscripts", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getClass_modClass_modificationParserRuleCall_1_1_5_0(), currentNode); 
	    }
		lv_Class_mod_11_0=ruleclass_modification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_mod",
	        		lv_Class_mod_11_0, 
	        		"class_modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getCommentParserRuleCall_1_1_6(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)
    |((
(
		lv_var_13_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getClass_specifierAccess().getVarIDENTTerminalRuleCall_1_2_0_0(), "var"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"var",
	        		lv_var_13_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getEqualsSignKeyword_1_2_1(), null); 
    }
	'enumeration' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getEnumerationKeyword_1_2_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getLeftParenthesisKeyword_1_2_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getEnum_listEnum_listParserRuleCall_1_2_4_0_0(), currentNode); 
	    }
		lv_Enum_list_17_0=ruleenum_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Enum_list",
	        		lv_Enum_list_17_0, 
	        		"enum_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
    |	':' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getColonKeyword_1_2_4_1(), null); 
    }
)	')' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getRightParenthesisKeyword_1_2_5(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getCommentParserRuleCall_1_2_6(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)
    |(RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_3_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getEqualsSignKeyword_1_3_1(), null); 
    }
	'der' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getDerKeyword_1_3_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getLeftParenthesisKeyword_1_3_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getNameNameParserRuleCall_1_3_4_0(), currentNode); 
	    }
		lv_Name_25_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_25_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getCommaKeyword_1_3_5(), null); 
    }
RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_3_6(), null); 
    }
(	',' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getCommaKeyword_1_3_7_0(), null); 
    }
RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_3_7_1(), null); 
    }
)*	')' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getRightParenthesisKeyword_1_3_8(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getCommentParserRuleCall_1_3_9(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)
    |(	'extends' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getExtendsKeyword_1_4_0(), null); 
    }
RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_4_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getClass_modClass_modificationParserRuleCall_1_4_2_0(), currentNode); 
	    }
		lv_Class_mod_34_0=ruleclass_modification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_mod",
	        		lv_Class_mod_34_0, 
	        		"class_modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getString_commentParserRuleCall_1_4_3(), currentNode); 
    }
rulestring_comment
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_specifierAccess().getCompCompositionParserRuleCall_1_4_4_0(), currentNode); 
	    }
		lv_Comp_36_0=rulecomposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_specifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Comp",
	        		lv_Comp_36_0, 
	        		"composition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'end' 
    {
        createLeafNode(grammarAccess.getClass_specifierAccess().getEndKeyword_1_4_5(), null); 
    }
RULE_IDENT
    { 
    createLeafNode(grammarAccess.getClass_specifierAccess().getIDENTTerminalRuleCall_1_4_6(), null); 
    }
)))
;





// Entry rule entryRulebase_prefix
entryRulebase_prefix returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBase_prefixRule(), currentNode); } 
	 iv_rulebase_prefix=rulebase_prefix 
	 { $current=$iv_rulebase_prefix.current.getText(); }  
	 EOF 
;

// Rule base_prefix
rulebase_prefix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getBase_prefixAccess().getType_prefixParserRuleCall(), currentNode); 
    }
    this_type_prefix_0=ruletype_prefix    {
		$current.merge(this_type_prefix_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuletype_prefix
entryRuletype_prefix returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getType_prefixRule(), currentNode); } 
	 iv_ruletype_prefix=ruletype_prefix 
	 { $current=$iv_ruletype_prefix.current.getText(); }  
	 EOF 
;

// Rule type_prefix
ruletype_prefix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='flow' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getFlowKeyword_0_0(), null); 
    }

    |
	kw='stream' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getStreamKeyword_0_1(), null); 
    }
)?(
	kw='discrete' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getDiscreteKeyword_1_0(), null); 
    }

    |
	kw='parameter' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getParameterKeyword_1_1(), null); 
    }

    |
	kw='constant' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getConstantKeyword_1_2(), null); 
    }
)?(
	kw='input' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getInputKeyword_2_0(), null); 
    }

    |
	kw='output' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getType_prefixAccess().getOutputKeyword_2_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleenum_list
entryRuleenum_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnum_listRule(), currentNode); }
	 iv_ruleenum_list=ruleenum_list 
	 { $current=$iv_ruleenum_list.current; } 
	 EOF 
;

// Rule enum_list
ruleenum_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEnum_listAccess().getEnum_listAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEnum_listAccess().getEnum_listAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnum_listAccess().getEnnum_LitEnumeration_literalParserRuleCall_1_0(), currentNode); 
	    }
		lv_Ennum_Lit_1_0=ruleenumeration_literal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnum_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Ennum_Lit",
	        		lv_Ennum_Lit_1_0, 
	        		"enumeration_literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getEnum_listAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnum_listAccess().getE_literalEnumeration_literalParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_E_literal_3_0=ruleenumeration_literal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnum_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"E_literal",
	        		lv_E_literal_3_0, 
	        		"enumeration_literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleenumeration_literal
entryRuleenumeration_literal returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumeration_literalRule(), currentNode); } 
	 iv_ruleenumeration_literal=ruleenumeration_literal 
	 { $current=$iv_ruleenumeration_literal.current.getText(); }  
	 EOF 
;

// Rule enumeration_literal
ruleenumeration_literal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_IDENT_0=RULE_IDENT    {
		$current.merge(this_IDENT_0);
    }

    { 
    createLeafNode(grammarAccess.getEnumeration_literalAccess().getIDENTTerminalRuleCall_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getEnumeration_literalAccess().getCommentParserRuleCall_1(), currentNode); 
    }
    this_comment_1=rulecomment    {
		$current.merge(this_comment_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulecomposition
entryRulecomposition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompositionRule(), currentNode); }
	 iv_rulecomposition=rulecomposition 
	 { $current=$iv_rulecomposition.current; } 
	 EOF 
;

// Rule composition
rulecomposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getE_List_InitialElement_listParserRuleCall_0_0(), currentNode); 
	    }
		lv_E_List_Initial_0_0=ruleelement_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"E_List_Initial",
	        		lv_E_List_Initial_0_0, 
	        		"element_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'public' 
    {
        createLeafNode(grammarAccess.getCompositionAccess().getPublicKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getE_List_PublicElement_listParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_E_List_Public_2_0=ruleelement_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"E_List_Public",
	        		lv_E_List_Public_2_0, 
	        		"element_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'protected' 
    {
        createLeafNode(grammarAccess.getCompositionAccess().getProtectedKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getE_List_ProtectedElement_listParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_E_List_Protected_4_0=ruleelement_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"E_List_Protected",
	        		lv_E_List_Protected_4_0, 
	        		"element_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getEqn_sectionEquation_sectionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_Eqn_section_5_0=ruleequation_section		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Eqn_section",
	        		lv_Eqn_section_5_0, 
	        		"equation_section", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getAlg_sectionAlgorithm_sectionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_Alg_section_6_0=rulealgorithm_section		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Alg_section",
	        		lv_Alg_section_6_0, 
	        		"algorithm_section", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	'external' 
    {
        createLeafNode(grammarAccess.getCompositionAccess().getExternalKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getLang_SpecLanguage_specificationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_Lang_Spec_8_0=rulelanguage_specification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Lang_Spec",
	        		lv_Lang_Spec_8_0, 
	        		"language_specification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getExternal_F_CExternal_function_callParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_External_F_C_9_0=ruleexternal_function_call		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"External_F_C",
	        		lv_External_F_C_9_0, 
	        		"external_function_call", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getAnnotation1AnnotationParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_Annotation1_10_0=ruleannotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Annotation1",
	        		lv_Annotation1_10_0, 
	        		"annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getCompositionAccess().getSemicolonKeyword_2_4(), null); 
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositionAccess().getAnnotation2AnnotationParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_Annotation2_12_0=ruleannotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Annotation2",
	        		lv_Annotation2_12_0, 
	        		"annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getCompositionAccess().getSemicolonKeyword_3_1(), null); 
    }
)?)
;





// Entry rule entryRuleelement_list
entryRuleelement_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElement_listRule(), currentNode); }
	 iv_ruleelement_list=ruleelement_list 
	 { $current=$iv_ruleelement_list.current; } 
	 EOF 
;

// Rule element_list
ruleelement_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getElement_listAccess().getElement_listAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElement_listAccess().getElement_listAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElement_listAccess().getElementElementParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_Element_1_0=ruleelement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElement_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Element",
	        		lv_Element_1_0, 
	        		"element", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getElement_listAccess().getSemicolonKeyword_1_1(), null); 
    }
)*)
;





// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElementRule(), currentNode); }
	 iv_ruleelement=ruleelement 
	 { $current=$iv_ruleelement.current; } 
	 EOF 
;

// Rule element
ruleelement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getImport_clauseParserRuleCall_0(), currentNode); 
    }
    this_import_clause_0=ruleimport_clause
    { 
        $current = $this_import_clause_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getExtends_clauseParserRuleCall_1(), currentNode); 
    }
    this_extends_clause_1=ruleextends_clause
    { 
        $current = $this_extends_clause_1.current; 
        currentNode = currentNode.getParent();
    }

    |((	'redeclare' 
    {
        createLeafNode(grammarAccess.getElementAccess().getRedeclareKeyword_2_0(), null); 
    }
)?(	'final' 
    {
        createLeafNode(grammarAccess.getElementAccess().getFinalKeyword_2_1(), null); 
    }
)?(	'inner' 
    {
        createLeafNode(grammarAccess.getElementAccess().getInnerKeyword_2_2(), null); 
    }
)?(	'outer' 
    {
        createLeafNode(grammarAccess.getElementAccess().getOuterKeyword_2_3(), null); 
    }
)?(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getClass_DefClass_definitionParserRuleCall_2_4_0_0_0(), currentNode); 
	    }
		lv_Class_Def_6_0=ruleclass_definition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_Def",
	        		lv_Class_Def_6_0, 
	        		"class_definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getComp_ClauseComponent_clauseParserRuleCall_2_4_0_1_0(), currentNode); 
	    }
		lv_Comp_Clause_7_0=rulecomponent_clause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Comp_Clause",
	        		lv_Comp_Clause_7_0, 
	        		"component_clause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'replaceable' 
    {
        createLeafNode(grammarAccess.getElementAccess().getReplaceableKeyword_2_4_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getClass_DefClass_definitionParserRuleCall_2_4_1_1_0_0(), currentNode); 
	    }
		lv_Class_Def_9_0=ruleclass_definition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_Def",
	        		lv_Class_Def_9_0, 
	        		"class_definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getComp_ClauseComponent_clauseParserRuleCall_2_4_1_1_1_0(), currentNode); 
	    }
		lv_Comp_Clause_10_0=rulecomponent_clause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Comp_Clause",
	        		lv_Comp_Clause_10_0, 
	        		"component_clause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getConstrain_ClauseConstraining_clauseParserRuleCall_2_4_1_2_0_0(), currentNode); 
	    }
		lv_Constrain_Clause_11_0=ruleconstraining_clause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Constrain_Clause",
	        		lv_Constrain_Clause_11_0, 
	        		"constraining_clause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getCommentParserRuleCall_2_4_1_2_1(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)?))))
;





// Entry rule entryRuleequation_section
entryRuleequation_section returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEquation_sectionRule(), currentNode); }
	 iv_ruleequation_section=ruleequation_section 
	 { $current=$iv_ruleequation_section.current; } 
	 EOF 
;

// Rule equation_section
ruleequation_section returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEquation_sectionAccess().getEquation_sectionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEquation_sectionAccess().getEquation_sectionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'initial' 
    {
        createLeafNode(grammarAccess.getEquation_sectionAccess().getInitialKeyword_1(), null); 
    }
)?	'equation' 
    {
        createLeafNode(grammarAccess.getEquation_sectionAccess().getEquationKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquation_sectionAccess().getEqnEquationParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_Eqn_3_0=ruleequation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquation_sectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Eqn",
	        		lv_Eqn_3_0, 
	        		"equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getEquation_sectionAccess().getSemicolonKeyword_3_1(), null); 
    }
)*)
;





// Entry rule entryRuleequation
entryRuleequation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEquationRule(), currentNode); }
	 iv_ruleequation=ruleequation 
	 { $current=$iv_ruleequation.current; } 
	 EOF 
;

// Rule equation
ruleequation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquationAccess().getSimSimple_expressionParserRuleCall_0_0_0_0(), currentNode); 
	    }
		lv_sim_0_0=rulesimple_expression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sim",
	        		lv_sim_0_0, 
	        		"simple_expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getEquationAccess().getEqualsSignKeyword_0_0_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquationAccess().getExprExpressionParserRuleCall_0_0_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquationAccess().getIF_EQNIf_equationParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_IF_EQN_3_0=ruleif_equation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"IF_EQN",
	        		lv_IF_EQN_3_0, 
	        		"if_equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquationAccess().getFOR_EQNFor_equationParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_FOR_EQN_4_0=rulefor_equation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"FOR_EQN",
	        		lv_FOR_EQN_4_0, 
	        		"for_equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquationAccess().getConConnect_clauseParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_Con_5_0=ruleconnect_clause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Con",
	        		lv_Con_5_0, 
	        		"connect_clause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquationAccess().getWHEN_EQNWhen_equationParserRuleCall_0_4_0(), currentNode); 
	    }
		lv_WHEN_EQN_6_0=rulewhen_equation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"WHEN_EQN",
	        		lv_WHEN_EQN_6_0, 
	        		"when_equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquationAccess().getCommentCommentParserRuleCall_1_0(), currentNode); 
	    }
		lv_Comment_7_0=rulecomment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Comment",
	        		lv_Comment_7_0, 
	        		"comment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulewhen_equation
entryRulewhen_equation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhen_equationRule(), currentNode); }
	 iv_rulewhen_equation=rulewhen_equation 
	 { $current=$iv_rulewhen_equation.current; } 
	 EOF 
;

// Rule when_equation
rulewhen_equation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'when' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getWhenKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_equationAccess().getWhenEprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_whenEpr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whenEpr",
	        		lv_whenEpr_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getThenKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_equationAccess().getEqn_ThenEquationParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_Eqn_Then_3_0=ruleequation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Eqn_Then",
	        		lv_Eqn_Then_3_0, 
	        		"equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getSemicolonKeyword_3_1(), null); 
    }
)*(	'elsewhen' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getElsewhenKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_equationAccess().getElseWhenEprExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_elseWhenEpr_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elseWhenEpr",
	        		lv_elseWhenEpr_6_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getThenKeyword_4_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_equationAccess().getEqn_ThenEquationParserRuleCall_4_3_0_0(), currentNode); 
	    }
		lv_Eqn_Then_8_0=ruleequation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Eqn_Then",
	        		lv_Eqn_Then_8_0, 
	        		"equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getSemicolonKeyword_4_3_1(), null); 
    }
)*)*	'end' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getEndKeyword_5(), null); 
    }
	'when' 
    {
        createLeafNode(grammarAccess.getWhen_equationAccess().getWhenKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleif_equation
entryRuleif_equation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIf_equationRule(), currentNode); }
	 iv_ruleif_equation=ruleif_equation 
	 { $current=$iv_ruleif_equation.current; } 
	 EOF 
;

// Rule if_equation
ruleif_equation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_equationAccess().getExprtrueExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_exprtrue_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprtrue",
	        		lv_exprtrue_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getThenKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_equationAccess().getEqnEquationParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_Eqn_3_0=ruleequation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Eqn",
	        		lv_Eqn_3_0, 
	        		"equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getSemicolonKeyword_3_1(), null); 
    }
)*(	'elseif' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getElseifKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_equationAccess().getExprStilltrueExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_exprStilltrue_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exprStilltrue",
	        		lv_exprStilltrue_6_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getThenKeyword_4_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_equationAccess().getThenEqnEquationParserRuleCall_4_3_0_0(), currentNode); 
	    }
		lv_thenEqn_8_0=ruleequation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"thenEqn",
	        		lv_thenEqn_8_0, 
	        		"equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getSemicolonKeyword_4_3_1(), null); 
    }
)*)*(	'else' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getElseKeyword_5_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_equationAccess().getElseEqnEquationParserRuleCall_5_1_0_0(), currentNode); 
	    }
		lv_elseEqn_11_0=ruleequation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elseEqn",
	        		lv_elseEqn_11_0, 
	        		"equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getSemicolonKeyword_5_1_1(), null); 
    }
)*)?	'end' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getEndKeyword_6(), null); 
    }
	'if' 
    {
        createLeafNode(grammarAccess.getIf_equationAccess().getIfKeyword_7(), null); 
    }
)
;





// Entry rule entryRulefor_equation
entryRulefor_equation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFor_equationRule(), currentNode); }
	 iv_rulefor_equation=rulefor_equation 
	 { $current=$iv_rulefor_equation.current; } 
	 EOF 
;

// Rule for_equation
rulefor_equation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'for' 
    {
        createLeafNode(grammarAccess.getFor_equationAccess().getForKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFor_equationAccess().getFor_loopFor_indicesParserRuleCall_1_0(), currentNode); 
	    }
		lv_for_loop_1_0=rulefor_indices		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"for_loop",
	        		lv_for_loop_1_0, 
	        		"for_indices", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'loop' 
    {
        createLeafNode(grammarAccess.getFor_equationAccess().getLoopKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFor_equationAccess().getFor_EqnEquationParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_For_Eqn_3_0=ruleequation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_equationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"For_Eqn",
	        		lv_For_Eqn_3_0, 
	        		"equation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getFor_equationAccess().getSemicolonKeyword_3_1(), null); 
    }
)	'end' 
    {
        createLeafNode(grammarAccess.getFor_equationAccess().getEndKeyword_4(), null); 
    }
	'for' 
    {
        createLeafNode(grammarAccess.getFor_equationAccess().getForKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleconnect_clause
entryRuleconnect_clause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConnect_clauseRule(), currentNode); }
	 iv_ruleconnect_clause=ruleconnect_clause 
	 { $current=$iv_ruleconnect_clause.current; } 
	 EOF 
;

// Rule connect_clause
ruleconnect_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'connect' 
    {
        createLeafNode(grammarAccess.getConnect_clauseAccess().getConnectKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getConnect_clauseAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConnect_clauseAccess().getConnector1Component_referenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_connector1_2_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConnect_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"connector1",
	        		lv_connector1_2_0, 
	        		"component_reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getConnect_clauseAccess().getCommaKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConnect_clauseAccess().getConnector2Component_referenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_connector2_4_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConnect_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"connector2",
	        		lv_connector2_4_0, 
	        		"component_reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getConnect_clauseAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRulealgorithm_section
entryRulealgorithm_section returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAlgorithm_sectionRule(), currentNode); }
	 iv_rulealgorithm_section=rulealgorithm_section 
	 { $current=$iv_rulealgorithm_section.current; } 
	 EOF 
;

// Rule algorithm_section
rulealgorithm_section returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAlgorithm_sectionAccess().getAlgorithm_clauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAlgorithm_sectionAccess().getAlgorithm_clauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'initial' 
    {
        createLeafNode(grammarAccess.getAlgorithm_sectionAccess().getInitialKeyword_1(), null); 
    }
)?	'algorithm' 
    {
        createLeafNode(grammarAccess.getAlgorithm_sectionAccess().getAlgorithmKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAlgorithm_sectionAccess().getAlgorithmStatementParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_Algorithm_3_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlgorithm_sectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Algorithm",
	        		lv_Algorithm_3_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getAlgorithm_sectionAccess().getSemicolonKeyword_3_1(), null); 
    }
)*)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIf_statementIf_statementParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_If_statement_1_0=ruleif_statement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"If_statement",
	        		lv_If_statement_1_0, 
	        		"if_statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getState_OutputExprListState_OutputExprListParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_State_OutputExprList_2_0=rulestate_OutputExprList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"State_OutputExprList",
	        		lv_State_OutputExprList_2_0, 
	        		"state_OutputExprList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'return' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getReturnKeyword_1_2(), null); 
    }

    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getState_Comp_RefState_Comp_RefParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_state_Comp_Ref_4_0=rulestate_Comp_Ref		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state_Comp_Ref",
	        		lv_state_Comp_Ref_4_0, 
	        		"state_Comp_Ref", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getFor_statementFor_statementParserRuleCall_1_4_0(), currentNode); 
	    }
		lv_For_statement_5_0=rulefor_statement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"For_statement",
	        		lv_For_statement_5_0, 
	        		"for_statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWhen_statementWhen_statementParserRuleCall_1_5_0(), currentNode); 
	    }
		lv_When_statement_6_0=rulewhen_statement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"When_statement",
	        		lv_When_statement_6_0, 
	        		"when_statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWhile_statementWhile_statementParserRuleCall_1_6_0(), currentNode); 
	    }
		lv_While_statement_7_0=rulewhile_statement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"While_statement",
	        		lv_While_statement_7_0, 
	        		"while_statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'break' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getBreakKeyword_1_7(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getCommentParserRuleCall_2(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulestate_OutputExprList
entryRulestate_OutputExprList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getState_OutputExprListRule(), currentNode); }
	 iv_rulestate_OutputExprList=rulestate_OutputExprList 
	 { $current=$iv_rulestate_OutputExprList.current; } 
	 EOF 
;

// Rule state_OutputExprList
rulestate_OutputExprList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getState_OutputExprListAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getState_OutputExprListAccess().getOutput_expression_listOutput_expression_listParserRuleCall_1_0(), currentNode); 
	    }
		lv_output_expression_list_1_0=ruleoutput_expression_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getState_OutputExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"output_expression_list",
	        		lv_output_expression_list_1_0, 
	        		"output_expression_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getState_OutputExprListAccess().getRightParenthesisKeyword_2(), null); 
    }
	':=' 
    {
        createLeafNode(grammarAccess.getState_OutputExprListAccess().getColonEqualsSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getState_OutputExprListAccess().getComponent_refComponent_referenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_Component_ref_4_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getState_OutputExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Component_ref",
	        		lv_Component_ref_4_0, 
	        		"component_reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getState_OutputExprListAccess().getFun_call_argsFunction_call_argsParserRuleCall_5_0(), currentNode); 
	    }
		lv_fun_call_args_5_0=rulefunction_call_args		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getState_OutputExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fun_call_args",
	        		lv_fun_call_args_5_0, 
	        		"function_call_args", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulestate_Comp_Ref
entryRulestate_Comp_Ref returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getState_Comp_RefRule(), currentNode); }
	 iv_rulestate_Comp_Ref=rulestate_Comp_Ref 
	 { $current=$iv_rulestate_Comp_Ref.current; } 
	 EOF 
;

// Rule state_Comp_Ref
rulestate_Comp_Ref returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getState_Comp_RefAccess().getComponent_referenceComponent_referenceParserRuleCall_0_0(), currentNode); 
	    }
		lv_component_reference_0_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getState_Comp_RefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"component_reference",
	        		lv_component_reference_0_0, 
	        		"component_reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	':=' 
    {
        createLeafNode(grammarAccess.getState_Comp_RefAccess().getColonEqualsSignKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getState_Comp_RefAccess().getExprExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getState_Comp_RefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getState_Comp_RefAccess().getFun_call_argsFunction_call_argsParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_fun_call_args_3_0=rulefunction_call_args		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getState_Comp_RefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fun_call_args",
	        		lv_fun_call_args_3_0, 
	        		"function_call_args", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulewhen_statement
entryRulewhen_statement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhen_statementRule(), currentNode); }
	 iv_rulewhen_statement=rulewhen_statement 
	 { $current=$iv_rulewhen_statement.current; } 
	 EOF 
;

// Rule when_statement
rulewhen_statement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'when' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getWhenKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_statementAccess().getWhen_exprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_When_expr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"When_expr",
	        		lv_When_expr_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getThenKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_statementAccess().getWhen_stat_trueStatementParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_When_stat_true_3_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"When_stat_true",
	        		lv_When_stat_true_3_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getSemicolonKeyword_3_1(), null); 
    }
)*(	'elsewhen' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getElsewhenKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_statementAccess().getElse_When_exprExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_Else_When_expr_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Else_When_expr",
	        		lv_Else_When_expr_6_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getThenKeyword_4_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhen_statementAccess().getThen_statementStatementParserRuleCall_4_3_0_0(), currentNode); 
	    }
		lv_Then_statement_8_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhen_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Then_statement",
	        		lv_Then_statement_8_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getSemicolonKeyword_4_3_1(), null); 
    }
)*)*	'end' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getEndKeyword_5(), null); 
    }
	'when' 
    {
        createLeafNode(grammarAccess.getWhen_statementAccess().getWhenKeyword_6(), null); 
    }
)
;





// Entry rule entryRulewhile_statement
entryRulewhile_statement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhile_statementRule(), currentNode); }
	 iv_rulewhile_statement=rulewhile_statement 
	 { $current=$iv_rulewhile_statement.current; } 
	 EOF 
;

// Rule while_statement
rulewhile_statement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'while' 
    {
        createLeafNode(grammarAccess.getWhile_statementAccess().getWhileKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhile_statementAccess().getWhile_exprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_while_expr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhile_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"while_expr",
	        		lv_while_expr_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'loop' 
    {
        createLeafNode(grammarAccess.getWhile_statementAccess().getLoopKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhile_statementAccess().getWhile_statWhile_statementParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_While_stat_3_0=rulewhile_statement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhile_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"While_stat",
	        		lv_While_stat_3_0, 
	        		"while_statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getWhile_statementAccess().getSemicolonKeyword_3_1(), null); 
    }
)*	'end' 
    {
        createLeafNode(grammarAccess.getWhile_statementAccess().getEndKeyword_4(), null); 
    }
	'while' 
    {
        createLeafNode(grammarAccess.getWhile_statementAccess().getWhileKeyword_5(), null); 
    }
)
;





// Entry rule entryRulefor_statement
entryRulefor_statement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFor_statementRule(), currentNode); }
	 iv_rulefor_statement=rulefor_statement 
	 { $current=$iv_rulefor_statement.current; } 
	 EOF 
;

// Rule for_statement
rulefor_statement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'for' 
    {
        createLeafNode(grammarAccess.getFor_statementAccess().getForKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFor_statementAccess().getFor_indicesFor_indicesParserRuleCall_1_0(), currentNode); 
	    }
		lv_For_indices_1_0=rulefor_indices		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"For_indices",
	        		lv_For_indices_1_0, 
	        		"for_indices", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'loop' 
    {
        createLeafNode(grammarAccess.getFor_statementAccess().getLoopKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFor_statementAccess().getFor_statementFor_statementParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_For_statement_3_0=rulefor_statement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"For_statement",
	        		lv_For_statement_3_0, 
	        		"for_statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getFor_statementAccess().getSemicolonKeyword_3_1(), null); 
    }
)*	'end' 
    {
        createLeafNode(grammarAccess.getFor_statementAccess().getEndKeyword_4(), null); 
    }
	'for' 
    {
        createLeafNode(grammarAccess.getFor_statementAccess().getForKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleif_statement
entryRuleif_statement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIf_statementRule(), currentNode); }
	 iv_ruleif_statement=ruleif_statement 
	 { $current=$iv_ruleif_statement.current; } 
	 EOF 
;

// Rule if_statement
ruleif_statement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_statementAccess().getExprtrueExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_exprtrue_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprtrue",
	        		lv_exprtrue_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getThenKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_statementAccess().getStateStatementParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_state_3_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"state",
	        		lv_state_3_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getSemicolonKeyword_3_1(), null); 
    }
)*(	'elseif' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getElseifKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_statementAccess().getExprStilltrueExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_exprStilltrue_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exprStilltrue",
	        		lv_exprStilltrue_6_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getThenKeyword_4_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_statementAccess().getStateStatementParserRuleCall_4_3_0_0(), currentNode); 
	    }
		lv_state_8_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"state",
	        		lv_state_8_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getSemicolonKeyword_4_3_1(), null); 
    }
)*)*(	'else' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getElseKeyword_5_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIf_statementAccess().getStateStatementParserRuleCall_5_1_0_0(), currentNode); 
	    }
		lv_state_11_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIf_statementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"state",
	        		lv_state_11_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getSemicolonKeyword_5_1_1(), null); 
    }
)*)?	'end' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getEndKeyword_6(), null); 
    }
	'if' 
    {
        createLeafNode(grammarAccess.getIf_statementAccess().getIfKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleextends_clause
entryRuleextends_clause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExtends_clauseRule(), currentNode); }
	 iv_ruleextends_clause=ruleextends_clause 
	 { $current=$iv_ruleextends_clause.current; } 
	 EOF 
;

// Rule extends_clause
ruleextends_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'extends' 
    {
        createLeafNode(grammarAccess.getExtends_clauseAccess().getExtendsKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExtends_clauseAccess().getNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_Name_1_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtends_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_1_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExtends_clauseAccess().getClass_ModClass_modificationParserRuleCall_2_0(), currentNode); 
	    }
		lv_Class_Mod_2_0=ruleclass_modification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtends_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_Mod",
	        		lv_Class_Mod_2_0, 
	        		"class_modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExtends_clauseAccess().getAnnotationAnnotationParserRuleCall_3_0(), currentNode); 
	    }
		lv_Annotation_3_0=ruleannotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExtends_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Annotation",
	        		lv_Annotation_3_0, 
	        		"annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleannotation
entryRuleannotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationRule(), currentNode); }
	 iv_ruleannotation=ruleannotation 
	 { $current=$iv_ruleannotation.current; } 
	 EOF 
;

// Rule annotation
ruleannotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'annotation' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getAnnotationKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getClass_ModClass_modificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_Class_Mod_1_0=ruleclass_modification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Class_Mod",
	        		lv_Class_Mod_1_0, 
	        		"class_modification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleimport_clause
entryRuleimport_clause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImport_clauseRule(), currentNode); }
	 iv_ruleimport_clause=ruleimport_clause 
	 { $current=$iv_ruleimport_clause.current; } 
	 EOF 
;

// Rule import_clause
ruleimport_clause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImport_clauseAccess().getImportKeyword_0(), null); 
    }
((RULE_IDENT
    { 
    createLeafNode(grammarAccess.getImport_clauseAccess().getIDENTTerminalRuleCall_1_0_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getImport_clauseAccess().getEqualsSignKeyword_1_0_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImport_clauseAccess().getNameNameParserRuleCall_1_0_2_0(), currentNode); 
	    }
		lv_Name_3_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImport_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_3_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImport_clauseAccess().getNameNameParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_Name_4_0=rulename		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImport_clauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Name",
	        		lv_Name_4_0, 
	        		"name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getImport_clauseAccess().getFullStopKeyword_1_1_1_0(), null); 
    }
	'*' 
    {
        createLeafNode(grammarAccess.getImport_clauseAccess().getAsteriskKeyword_1_1_1_1(), null); 
    }
)?))
    { 
        currentNode=createCompositeNode(grammarAccess.getImport_clauseAccess().getCommentParserRuleCall_2(), currentNode); 
    }
rulecomment
    { 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulelanguage_specification
entryRulelanguage_specification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLanguage_specificationRule(), currentNode); }
	 iv_rulelanguage_specification=rulelanguage_specification 
	 { $current=$iv_rulelanguage_specification.current; } 
	 EOF 
;

// Rule language_specification
rulelanguage_specification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_Str_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getLanguage_specificationAccess().getStrSTRINGTerminalRuleCall_0(), "Str"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLanguage_specificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Str",
	        		lv_Str_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleexternal_function_call
entryRuleexternal_function_call returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExternal_function_callRule(), currentNode); }
	 iv_ruleexternal_function_call=ruleexternal_function_call 
	 { $current=$iv_ruleexternal_function_call.current; } 
	 EOF 
;

// Rule external_function_call
ruleexternal_function_call returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExternal_function_callAccess().getExternal_function_callAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExternal_function_callAccess().getExternal_function_callAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExternal_function_callAccess().getComponent_referenceComponent_referenceParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_component_reference_1_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternal_function_callRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"component_reference",
	        		lv_component_reference_1_0, 
	        		"component_reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getExternal_function_callAccess().getEqualsSignKeyword_1_1(), null); 
    }
)?RULE_IDENT
    { 
    createLeafNode(grammarAccess.getExternal_function_callAccess().getIDENTTerminalRuleCall_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getExternal_function_callAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExternal_function_callAccess().getE_ListExpression_listParserRuleCall_4_0(), currentNode); 
	    }
		lv_E_List_5_0=ruleexpression_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternal_function_callRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"E_List",
	        		lv_E_List_5_0, 
	        		"expression_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getExternal_function_callAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprSimple_expressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_Expr_0_0=rulesimple_expression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Expr",
	        		lv_Expr_0_0, 
	        		"simple_expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getConditional_exprParserRuleCall_1(), currentNode); 
    }
    this_conditional_expr_1=ruleconditional_expr
    { 
        $current = $this_conditional_expr_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimple_expressionRule(), currentNode); }
	 iv_rulesimple_expression=rulesimple_expression 
	 { $current=$iv_rulesimple_expression.current; } 
	 EOF 
;

// Rule simple_expression
rulesimple_expression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimple_expressionAccess().getLog_ExpLogical_expressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_Log_Exp_0_0=rulelogical_expression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimple_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Log_Exp",
	        		lv_Log_Exp_0_0, 
	        		"logical_expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getSimple_expressionAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimple_expressionAccess().getS_Logical_expressionLogical_expressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_S_Logical_expression_2_0=rulelogical_expression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimple_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"S_Logical_expression",
	        		lv_S_Logical_expression_2_0, 
	        		"logical_expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getSimple_expressionAccess().getColonKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimple_expressionAccess().getL_Logical_expressionLogical_expressionParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_L_Logical_expression_4_0=rulelogical_expression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimple_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"L_Logical_expression",
	        		lv_L_Logical_expression_4_0, 
	        		"logical_expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)?)
;





// Entry rule entryRuleconditional_expr
entryRuleconditional_expr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditional_exprRule(), currentNode); }
	 iv_ruleconditional_expr=ruleconditional_expr 
	 { $current=$iv_ruleconditional_expr.current; } 
	 EOF 
;

// Rule conditional_expr
ruleconditional_expr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getConditional_exprAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditional_exprAccess().getIfexprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_ifexpr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_exprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ifexpr",
	        		lv_ifexpr_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getConditional_exprAccess().getThenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditional_exprAccess().getThenexprExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_thenexpr_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_exprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenexpr",
	        		lv_thenexpr_3_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'elseif' 
    {
        createLeafNode(grammarAccess.getConditional_exprAccess().getElseifKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditional_exprAccess().getElseifexprExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_elseifexpr_5_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_exprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elseifexpr",
	        		lv_elseifexpr_5_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getConditional_exprAccess().getThenKeyword_4_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditional_exprAccess().getTrueexprExpressionParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_trueexpr_7_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_exprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"trueexpr",
	        		lv_trueexpr_7_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	'else' 
    {
        createLeafNode(grammarAccess.getConditional_exprAccess().getElseKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditional_exprAccess().getFalseexprExpressionParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_falseexpr_9_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditional_exprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"falseexpr",
	        		lv_falseexpr_9_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulelogical_expression
entryRulelogical_expression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogical_expressionRule(), currentNode); }
	 iv_rulelogical_expression=rulelogical_expression 
	 { $current=$iv_rulelogical_expression.current; } 
	 EOF 
;

// Rule logical_expression
rulelogical_expression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogical_expressionAccess().getLogical_termParserRuleCall_0(), currentNode); 
    }
    this_logical_term_0=rulelogical_term
    { 
        $current = $this_logical_term_0.current; 
        currentNode = currentNode.getParent();
    }
(	'or' 
    {
        createLeafNode(grammarAccess.getLogical_expressionAccess().getOrKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogical_expressionAccess().getLogical_termLogical_termParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Logical_term_2_0=rulelogical_term		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogical_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Logical_term",
	        		lv_Logical_term_2_0, 
	        		"logical_term", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulelogical_term
entryRulelogical_term returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogical_termRule(), currentNode); }
	 iv_rulelogical_term=rulelogical_term 
	 { $current=$iv_rulelogical_term.current; } 
	 EOF 
;

// Rule logical_term
rulelogical_term returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogical_termAccess().getLogical_factorParserRuleCall_0(), currentNode); 
    }
    this_logical_factor_0=rulelogical_factor
    { 
        $current = $this_logical_factor_0.current; 
        currentNode = currentNode.getParent();
    }
(	'and' 
    {
        createLeafNode(grammarAccess.getLogical_termAccess().getAndKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogical_termAccess().getLogical_factorLogical_factorParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Logical_factor_2_0=rulelogical_factor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogical_termRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Logical_factor",
	        		lv_Logical_factor_2_0, 
	        		"logical_factor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulelogical_factor
entryRulelogical_factor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogical_factorRule(), currentNode); }
	 iv_rulelogical_factor=rulelogical_factor 
	 { $current=$iv_rulelogical_factor.current; } 
	 EOF 
;

// Rule logical_factor
rulelogical_factor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'not' 
    {
        createLeafNode(grammarAccess.getLogical_factorAccess().getNotKeyword_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogical_factorAccess().getRelationRelationParserRuleCall_1_0(), currentNode); 
	    }
		lv_Relation_1_0=rulerelation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogical_factorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Relation",
	        		lv_Relation_1_0, 
	        		"relation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulerelation
entryRulerelation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationRule(), currentNode); }
	 iv_rulerelation=rulerelation 
	 { $current=$iv_rulerelation.current; } 
	 EOF 
;

// Rule relation
rulerelation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getArithmetic_expressionParserRuleCall_0(), currentNode); 
    }
    this_arithmetic_expression_0=rulearithmetic_expression
    { 
        $current = $this_arithmetic_expression_0.current; 
        currentNode = currentNode.getParent();
    }
((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_Less_thenParserRuleCall_1_0_0_0(), currentNode); 
	    }
		lv_op_1_1=rulerel_op_Less_then		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_1, 
	        		"rel_op_Less_then", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_Less_equalParserRuleCall_1_0_0_1(), currentNode); 
	    }
		lv_op_1_2=rulerel_op_Less_equal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_2, 
	        		"rel_op_Less_equal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_greater_thenParserRuleCall_1_0_0_2(), currentNode); 
	    }
		lv_op_1_3=rulerel_op_greater_then		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_3, 
	        		"rel_op_greater_then", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_greater_equalParserRuleCall_1_0_0_3(), currentNode); 
	    }
		lv_op_1_4=rulerel_op_greater_equal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_4, 
	        		"rel_op_greater_equal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_assignmentParserRuleCall_1_0_0_4(), currentNode); 
	    }
		lv_op_1_5=rulerel_op_assignment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_5, 
	        		"rel_op_assignment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getOpRel_op_OperParserRuleCall_1_0_0_5(), currentNode); 
	    }
		lv_op_1_6=rulerel_op_Oper		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_6, 
	        		"rel_op_Oper", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getArithmetic_expressionArithmetic_expressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Arithmetic_expression_2_0=rulearithmetic_expression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Arithmetic_expression",
	        		lv_Arithmetic_expression_2_0, 
	        		"arithmetic_expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulearithmetic_expression
entryRulearithmetic_expression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArithmetic_expressionRule(), currentNode); }
	 iv_rulearithmetic_expression=rulearithmetic_expression 
	 { $current=$iv_rulearithmetic_expression.current; } 
	 EOF 
;

// Rule arithmetic_expression
rulearithmetic_expression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_plusParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_opr_0_1=ruleadd_op_plus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opr",
	        		lv_opr_0_1, 
	        		"add_op_plus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_minusParserRuleCall_0_0_1(), currentNode); 
	    }
		lv_opr_0_2=ruleadd_op_minus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opr",
	        		lv_opr_0_2, 
	        		"add_op_minus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_dotplusParserRuleCall_0_0_2(), currentNode); 
	    }
		lv_opr_0_3=ruleadd_op_dotplus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opr",
	        		lv_opr_0_3, 
	        		"add_op_dotplus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOprAdd_op_dotminusParserRuleCall_0_0_3(), currentNode); 
	    }
		lv_opr_0_4=ruleadd_op_dotminus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opr",
	        		lv_opr_0_4, 
	        		"add_op_dotminus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getTermTermParserRuleCall_1_0(), currentNode); 
	    }
		lv_Term_1_0=ruleterm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Term",
	        		lv_Term_1_0, 
	        		"term", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_plusParserRuleCall_2_0_0_0(), currentNode); 
	    }
		lv_Oper1_2_1=ruleadd_op_plus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Oper1",
	        		lv_Oper1_2_1, 
	        		"add_op_plus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_minusParserRuleCall_2_0_0_1(), currentNode); 
	    }
		lv_Oper1_2_2=ruleadd_op_minus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Oper1",
	        		lv_Oper1_2_2, 
	        		"add_op_minus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_dotplusParserRuleCall_2_0_0_2(), currentNode); 
	    }
		lv_Oper1_2_3=ruleadd_op_dotplus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Oper1",
	        		lv_Oper1_2_3, 
	        		"add_op_dotplus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getOper1Add_op_dotminusParserRuleCall_2_0_0_3(), currentNode); 
	    }
		lv_Oper1_2_4=ruleadd_op_dotminus		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Oper1",
	        		lv_Oper1_2_4, 
	        		"add_op_dotminus", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArithmetic_expressionAccess().getTerm1TermParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_Term1_3_0=ruleterm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArithmetic_expressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Term1",
	        		lv_Term1_3_0, 
	        		"term", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTermRule(), currentNode); }
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current; } 
	 EOF 
;

// Rule term
ruleterm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0(), currentNode); 
    }
    this_factor_0=rulefactor
    { 
        $current = $this_factor_0.current; 
        currentNode = currentNode.getParent();
    }
((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getOpMul_op_mulParserRuleCall_1_0_0_0(), currentNode); 
	    }
		lv_op_1_1=rulemul_op_mul		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"op",
	        		lv_op_1_1, 
	        		"mul_op_mul", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getOpMul_op_divParserRuleCall_1_0_0_1(), currentNode); 
	    }
		lv_op_1_2=rulemul_op_div		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"op",
	        		lv_op_1_2, 
	        		"mul_op_div", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getOpMul_op_dotmulParserRuleCall_1_0_0_2(), currentNode); 
	    }
		lv_op_1_3=rulemul_op_dotmul		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"op",
	        		lv_op_1_3, 
	        		"mul_op_dotmul", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getOpMul_op_dotdivParserRuleCall_1_0_0_3(), currentNode); 
	    }
		lv_op_1_4=rulemul_op_dotdiv		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"op",
	        		lv_op_1_4, 
	        		"mul_op_dotdiv", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getFactorFactorParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Factor_2_0=rulefactor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Factor",
	        		lv_Factor_2_0, 
	        		"factor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFactorRule(), currentNode); }
	 iv_rulefactor=rulefactor 
	 { $current=$iv_rulefactor.current; } 
	 EOF 
;

// Rule factor
rulefactor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0(), currentNode); 
    }
    this_primary_0=ruleprimary
    { 
        $current = $this_primary_0.current; 
        currentNode = currentNode.getParent();
    }
((	'^' 
    {
        createLeafNode(grammarAccess.getFactorAccess().getCircumflexAccentKeyword_1_0_0(), null); 
    }

    |	'.^' 
    {
        createLeafNode(grammarAccess.getFactorAccess().getFullStopCircumflexAccentKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFactorAccess().getPrimaryPrimaryParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Primary_3_0=ruleprimary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFactorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Primary",
	        		lv_Primary_3_0, 
	        		"primary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleprimary
entryRuleprimary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryRule(), currentNode); }
	 iv_ruleprimary=ruleprimary 
	 { $current=$iv_ruleprimary.current; } 
	 EOF 
;

// Rule primary
ruleprimary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_num_0_0=RULE_UNSIGNED_NUMBER
		{
			createLeafNode(grammarAccess.getPrimaryAccess().getNumUNSIGNED_NUMBERTerminalRuleCall_0_0(), "num"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"num",
	        		lv_num_0_0, 
	        		"UNSIGNED_NUMBER", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_int_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getPrimaryAccess().getIntINTTerminalRuleCall_1_0(), "int"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"int",
	        		lv_int_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_str_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getPrimaryAccess().getStrSTRINGTerminalRuleCall_2_0(), "str"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"str",
	        		lv_str_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_Bool_3_0=RULE_BOOL_VAL
		{
			createLeafNode(grammarAccess.getPrimaryAccess().getBoolBOOL_VALTerminalRuleCall_3_0(), "Bool"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Bool",
	        		lv_Bool_3_0, 
	        		"BOOL_VAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getName_FunctionParserRuleCall_4(), currentNode); 
    }
    this_name_Function_4=rulename_Function
    { 
        $current = $this_name_Function_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getInitial_refParserRuleCall_5(), currentNode); 
    }
    this_initial_ref_5=ruleinitial_ref
    { 
        $current = $this_initial_ref_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getExprDerParserRuleCall_6(), currentNode); 
    }
    this_ExprDer_6=ruleExprDer
    { 
        $current = $this_ExprDer_6.current; 
        currentNode = currentNode.getParent();
    }

    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getComponent_referenceComponent_referenceParserRuleCall_7_0(), currentNode); 
	    }
		lv_Component_reference_7_0=rulecomponent_reference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Component_reference",
	        		lv_Component_reference_7_0, 
	        		"component_reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_8_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getOutput_expr_listOutput_expression_listParserRuleCall_8_1_0(), currentNode); 
	    }
		lv_output_expr_list_9_0=ruleoutput_expression_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"output_expr_list",
	        		lv_output_expr_list_9_0, 
	        		"output_expression_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_8_2(), null); 
    }
)
    |(	'[' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getLeftSquareBracketKeyword_9_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getExpre_listExpression_listParserRuleCall_9_1_0(), currentNode); 
	    }
		lv_Expre_list_12_0=ruleexpression_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Expre_list",
	        		lv_Expre_list_12_0, 
	        		"expression_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getSemicolonKeyword_9_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getExpression_listExpression_listParserRuleCall_9_2_1_0(), currentNode); 
	    }
		lv_Expression_list_14_0=ruleexpression_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Expression_list",
	        		lv_Expression_list_14_0, 
	        		"expression_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getRightSquareBracketKeyword_9_3(), null); 
    }
)
    |(	'{' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getLeftCurlyBracketKeyword_10_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getF_argumentsFunction_argumentsParserRuleCall_10_1_0(), currentNode); 
	    }
		lv_f_arguments_17_0=rulefunction_arguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"f_arguments",
	        		lv_f_arguments_17_0, 
	        		"function_arguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getRightCurlyBracketKeyword_10_2(), null); 
    }
)
    |(
(
		lv_End_19_0=	'end' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getEndEndKeyword_11_0(), "End"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "End", lv_End_19_0, "end", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulename_Function
entryRulename_Function returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getName_FunctionRule(), currentNode); }
	 iv_rulename_Function=rulename_Function 
	 { $current=$iv_rulename_Function.current; } 
	 EOF 
;

// Rule name_Function
rulename_Function returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getName_FunctionAccess().getNameParserRuleCall_0(), currentNode); 
    }
    this_name_0=rulename
    { 
        $current = $this_name_0.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getName_FunctionAccess().getFunction_call_argsFunction_call_argsParserRuleCall_1_0(), currentNode); 
	    }
		lv_Function_call_args_1_0=rulefunction_call_args		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getName_FunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Function_call_args",
	        		lv_Function_call_args_1_0, 
	        		"function_call_args", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleinitial_ref
entryRuleinitial_ref returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitial_refRule(), currentNode); }
	 iv_ruleinitial_ref=ruleinitial_ref 
	 { $current=$iv_ruleinitial_ref.current; } 
	 EOF 
;

// Rule initial_ref
ruleinitial_ref returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'initial' 
    {
        createLeafNode(grammarAccess.getInitial_refAccess().getInitialKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getInitial_refAccess().getFunction_call_argsParserRuleCall_1(), currentNode); 
    }
    this_function_call_args_1=rulefunction_call_args
    { 
        $current = $this_function_call_args_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExprDer
entryRuleExprDer returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExprDerRule(), currentNode); }
	 iv_ruleExprDer=ruleExprDer 
	 { $current=$iv_ruleExprDer.current; } 
	 EOF 
;

// Rule ExprDer
ruleExprDer returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'der' 
    {
        createLeafNode(grammarAccess.getExprDerAccess().getDerKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprDerAccess().getFunctionArgsFunction_call_argsParserRuleCall_1_0(), currentNode); 
	    }
		lv_functionArgs_1_0=rulefunction_call_args		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprDerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"functionArgs",
	        		lv_functionArgs_1_0, 
	        		"function_call_args", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulefunction_call_args
entryRulefunction_call_args returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunction_call_argsRule(), currentNode); }
	 iv_rulefunction_call_args=rulefunction_call_args 
	 { $current=$iv_rulefunction_call_args.current; } 
	 EOF 
;

// Rule function_call_args
rulefunction_call_args returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFunction_call_argsAccess().getFunction_call_argsAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunction_call_argsAccess().getFunction_call_argsAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getFunction_call_argsAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunction_call_argsAccess().getF_argFunction_argumentsParserRuleCall_2_0(), currentNode); 
	    }
		lv_f_arg_2_0=rulefunction_arguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunction_call_argsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"f_arg",
	        		lv_f_arg_2_0, 
	        		"function_arguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getFunction_call_argsAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleexpression_list
entryRuleexpression_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpression_listRule(), currentNode); }
	 iv_ruleexpression_list=ruleexpression_list 
	 { $current=$iv_ruleexpression_list.current; } 
	 EOF 
;

// Rule expression_list
ruleexpression_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpression_listAccess().getExprExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expr_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpression_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_0_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getExpression_listAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpression_listAccess().getExpreExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Expre_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpression_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Expre",
	        		lv_Expre_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulename
entryRulename returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameRule(), currentNode); }
	 iv_rulename=rulename 
	 { $current=$iv_rulename.current; } 
	 EOF 
;

// Rule name
rulename returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'.' 
    {
        createLeafNode(grammarAccess.getNameAccess().getFullStopKeyword_0(), null); 
    }
)?(
(
		lv_name_ID_1_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getNameAccess().getName_IDIDENTTerminalRuleCall_1_0(), "name_ID"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name_ID",
	        		lv_name_ID_1_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getNameAccess().getFullStopKeyword_2_0(), null); 
    }
(
(
		lv_nam_ID_3_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getNameAccess().getNam_IDIDENTTerminalRuleCall_2_1_0(), "nam_ID"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"nam_ID",
	        		lv_nam_ID_3_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*)
;





// Entry rule entryRulecomponent_reference
entryRulecomponent_reference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponent_referenceRule(), currentNode); }
	 iv_rulecomponent_reference=rulecomponent_reference 
	 { $current=$iv_rulecomponent_reference.current; } 
	 EOF 
;

// Rule component_reference
rulecomponent_reference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'.' 
    {
        createLeafNode(grammarAccess.getComponent_referenceAccess().getFullStopKeyword_0(), null); 
    }
)?(
(
		lv_ref_1_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getComponent_referenceAccess().getRefIDENTTerminalRuleCall_1_0(), "ref"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_1_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_referenceAccess().getSubscripts1Array_subscriptsParserRuleCall_2_0(), currentNode); 
	    }
		lv_subscripts1_2_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"subscripts1",
	        		lv_subscripts1_2_0, 
	        		"array_subscripts", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'.' 
    {
        createLeafNode(grammarAccess.getComponent_referenceAccess().getFullStopKeyword_3_0(), null); 
    }
(
(
		lv_ref1_4_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getComponent_referenceAccess().getRef1IDENTTerminalRuleCall_3_1_0(), "ref1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ref1",
	        		lv_ref1_4_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponent_referenceAccess().getSubscriptsArray_subscriptsParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_subscripts_5_0=rulearray_subscripts		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponent_referenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subscripts",
	        		lv_subscripts_5_0, 
	        		"array_subscripts", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)*)
;





// Entry rule entryRuleoutput_expression_list
entryRuleoutput_expression_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOutput_expression_listRule(), currentNode); }
	 iv_ruleoutput_expression_list=ruleoutput_expression_list 
	 { $current=$iv_ruleoutput_expression_list.current; } 
	 EOF 
;

// Rule output_expression_list
ruleoutput_expression_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOutput_expression_listAccess().getOutput_expression_listAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOutput_expression_listAccess().getOutput_expression_listAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutput_expression_listAccess().getEprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_epr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutput_expression_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"epr",
	        		lv_epr_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getOutput_expression_listAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutput_expression_listAccess().getExprExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_Expr_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutput_expression_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Expr",
	        		lv_Expr_3_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)*)
;





// Entry rule entryRulearray_subscripts
entryRulearray_subscripts returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArray_subscriptsRule(), currentNode); }
	 iv_rulearray_subscripts=rulearray_subscripts 
	 { $current=$iv_rulearray_subscripts.current; } 
	 EOF 
;

// Rule array_subscripts
rulearray_subscripts returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getArray_subscriptsAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArray_subscriptsAccess().getSubSubscriptParserRuleCall_1_0(), currentNode); 
	    }
		lv_Sub_1_0=rulesubscript		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArray_subscriptsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Sub",
	        		lv_Sub_1_0, 
	        		"subscript", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getArray_subscriptsAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArray_subscriptsAccess().getSubscriptSubscriptParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_Subscript_3_0=rulesubscript		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArray_subscriptsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Subscript",
	        		lv_Subscript_3_0, 
	        		"subscript", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getArray_subscriptsAccess().getRightSquareBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRulesubscript
entryRulesubscript returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubscriptRule(), currentNode); }
	 iv_rulesubscript=rulesubscript 
	 { $current=$iv_rulesubscript.current; } 
	 EOF 
;

// Rule subscript
rulesubscript returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getSubscriptAccess().getSubscriptAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSubscriptAccess().getSubscriptAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	':' 
    {
        createLeafNode(grammarAccess.getSubscriptAccess().getColonKeyword_0_1(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubscriptAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubscriptRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulefunction_arguments
entryRulefunction_arguments returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunction_argumentsRule(), currentNode); }
	 iv_rulefunction_arguments=rulefunction_arguments 
	 { $current=$iv_rulefunction_arguments.current; } 
	 EOF 
;

// Rule function_arguments
rulefunction_arguments returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getFunction_argumentsAccess().getFunction_argumentsAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunction_argumentsAccess().getFunction_argumentsAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunction_argumentsAccess().getArgExpExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_ArgExp_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunction_argumentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ArgExp",
	        		lv_ArgExp_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunction_argumentsAccess().getFun_Arg_ExprFun_Arguments_expParserRuleCall_0_2_0_0(), currentNode); 
	    }
		lv_Fun_Arg_Expr_2_0=ruleFun_Arguments_exp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunction_argumentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Fun_Arg_Expr",
	        		lv_Fun_Arg_Expr_2_0, 
	        		"Fun_Arguments_exp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunction_argumentsAccess().getFun_Arg_ForFun_Arguments_forParserRuleCall_0_2_1_0(), currentNode); 
	    }
		lv_Fun_Arg_For_3_0=ruleFun_Arguments_for		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunction_argumentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Fun_Arg_For",
	        		lv_Fun_Arg_For_3_0, 
	        		"Fun_Arguments_for", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunction_argumentsAccess().getName_argNamed_argumentsParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_arg_4_0=rulenamed_arguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunction_argumentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name_arg",
	        		lv_name_arg_4_0, 
	        		"named_arguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFun_Arguments_exp
entryRuleFun_Arguments_exp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFun_Arguments_expRule(), currentNode); }
	 iv_ruleFun_Arguments_exp=ruleFun_Arguments_exp 
	 { $current=$iv_ruleFun_Arguments_exp.current; } 
	 EOF 
;

// Rule Fun_Arguments_exp
ruleFun_Arguments_exp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	',' 
    {
        createLeafNode(grammarAccess.getFun_Arguments_expAccess().getCommaKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFun_Arguments_expAccess().getArgsFunction_argumentsParserRuleCall_1_0(), currentNode); 
	    }
		lv_Args_1_0=rulefunction_arguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFun_Arguments_expRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Args",
	        		lv_Args_1_0, 
	        		"function_arguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFun_Arguments_for
entryRuleFun_Arguments_for returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFun_Arguments_forRule(), currentNode); }
	 iv_ruleFun_Arguments_for=ruleFun_Arguments_for 
	 { $current=$iv_ruleFun_Arguments_for.current; } 
	 EOF 
;

// Rule Fun_Arguments_for
ruleFun_Arguments_for returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'for' 
    {
        createLeafNode(grammarAccess.getFun_Arguments_forAccess().getForKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFun_Arguments_forAccess().getFor_indicesFor_indicesParserRuleCall_1_0(), currentNode); 
	    }
		lv_For_indices_1_0=rulefor_indices		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFun_Arguments_forRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"For_indices",
	        		lv_For_indices_1_0, 
	        		"for_indices", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulenamed_arguments
entryRulenamed_arguments returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamed_argumentsRule(), currentNode); }
	 iv_rulenamed_arguments=rulenamed_arguments 
	 { $current=$iv_rulenamed_arguments.current; } 
	 EOF 
;

// Rule named_arguments
rulenamed_arguments returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNamed_argumentsAccess().getNamed_argumentParserRuleCall_0(), currentNode); 
    }
    this_named_argument_0=rulenamed_argument
    { 
        $current = $this_named_argument_0.current; 
        currentNode = currentNode.getParent();
    }
(	',' 
    {
        createLeafNode(grammarAccess.getNamed_argumentsAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamed_argumentsAccess().getNamed_argumentsNamed_argumentsParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Named_arguments_2_0=rulenamed_arguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamed_argumentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Named_arguments",
	        		lv_Named_arguments_2_0, 
	        		"named_arguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulenamed_argument
entryRulenamed_argument returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamed_argumentRule(), currentNode); }
	 iv_rulenamed_argument=rulenamed_argument 
	 { $current=$iv_rulenamed_argument.current; } 
	 EOF 
;

// Rule named_argument
rulenamed_argument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_arg_0_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getNamed_argumentAccess().getArgIDENTTerminalRuleCall_0_0(), "arg"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamed_argumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"arg",
	        		lv_arg_0_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getNamed_argumentAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamed_argumentAccess().getExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamed_argumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulefor_indices
entryRulefor_indices returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFor_indicesRule(), currentNode); }
	 iv_rulefor_indices=rulefor_indices 
	 { $current=$iv_rulefor_indices.current; } 
	 EOF 
;

// Rule for_indices
rulefor_indices returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFor_indicesAccess().getFor_indexParserRuleCall_0(), currentNode); 
    }
    this_for_index_0=rulefor_index
    { 
        $current = $this_for_index_0.current; 
        currentNode = currentNode.getParent();
    }
(	',' 
    {
        createLeafNode(grammarAccess.getFor_indicesAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFor_indicesAccess().getFor_indexFor_indexParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_For_index_2_0=rulefor_index		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_indicesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"For_index",
	        		lv_For_index_2_0, 
	        		"for_index", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulefor_index
entryRulefor_index returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFor_indexRule(), currentNode); }
	 iv_rulefor_index=rulefor_index 
	 { $current=$iv_rulefor_index.current; } 
	 EOF 
;

// Rule for_index
rulefor_index returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_index_0_0=RULE_IDENT
		{
			createLeafNode(grammarAccess.getFor_indexAccess().getIndexIDENTTerminalRuleCall_0_0(), "index"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_indexRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"index",
	        		lv_index_0_0, 
	        		"IDENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'in' 
    {
        createLeafNode(grammarAccess.getFor_indexAccess().getInKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFor_indexAccess().getExprExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFor_indexRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulemul_op_mul
entryRulemul_op_mul returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMul_op_mulRule(), currentNode); } 
	 iv_rulemul_op_mul=rulemul_op_mul 
	 { $current=$iv_rulemul_op_mul.current.getText(); }  
	 EOF 
;

// Rule mul_op_mul
rulemul_op_mul returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMul_op_mulAccess().getAsteriskKeyword(), null); 
    }

    ;





// Entry rule entryRulemul_op_div
entryRulemul_op_div returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMul_op_divRule(), currentNode); } 
	 iv_rulemul_op_div=rulemul_op_div 
	 { $current=$iv_rulemul_op_div.current.getText(); }  
	 EOF 
;

// Rule mul_op_div
rulemul_op_div returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMul_op_divAccess().getSolidusKeyword(), null); 
    }

    ;





// Entry rule entryRulemul_op_dotmul
entryRulemul_op_dotmul returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMul_op_dotmulRule(), currentNode); } 
	 iv_rulemul_op_dotmul=rulemul_op_dotmul 
	 { $current=$iv_rulemul_op_dotmul.current.getText(); }  
	 EOF 
;

// Rule mul_op_dotmul
rulemul_op_dotmul returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='.*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMul_op_dotmulAccess().getFullStopAsteriskKeyword(), null); 
    }

    ;





// Entry rule entryRulemul_op_dotdiv
entryRulemul_op_dotdiv returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMul_op_dotdivRule(), currentNode); } 
	 iv_rulemul_op_dotdiv=rulemul_op_dotdiv 
	 { $current=$iv_rulemul_op_dotdiv.current.getText(); }  
	 EOF 
;

// Rule mul_op_dotdiv
rulemul_op_dotdiv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='./' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMul_op_dotdivAccess().getFullStopSolidusKeyword(), null); 
    }

    ;





// Entry rule entryRuleadd_op_plus
entryRuleadd_op_plus returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdd_op_plusRule(), currentNode); } 
	 iv_ruleadd_op_plus=ruleadd_op_plus 
	 { $current=$iv_ruleadd_op_plus.current.getText(); }  
	 EOF 
;

// Rule add_op_plus
ruleadd_op_plus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAdd_op_plusAccess().getPlusSignKeyword(), null); 
    }

    ;





// Entry rule entryRuleadd_op_minus
entryRuleadd_op_minus returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdd_op_minusRule(), currentNode); } 
	 iv_ruleadd_op_minus=ruleadd_op_minus 
	 { $current=$iv_ruleadd_op_minus.current.getText(); }  
	 EOF 
;

// Rule add_op_minus
ruleadd_op_minus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAdd_op_minusAccess().getHyphenMinusKeyword(), null); 
    }

    ;





// Entry rule entryRuleadd_op_dotplus
entryRuleadd_op_dotplus returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdd_op_dotplusRule(), currentNode); } 
	 iv_ruleadd_op_dotplus=ruleadd_op_dotplus 
	 { $current=$iv_ruleadd_op_dotplus.current.getText(); }  
	 EOF 
;

// Rule add_op_dotplus
ruleadd_op_dotplus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='.+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAdd_op_dotplusAccess().getFullStopPlusSignKeyword(), null); 
    }

    ;





// Entry rule entryRuleadd_op_dotminus
entryRuleadd_op_dotminus returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdd_op_dotminusRule(), currentNode); } 
	 iv_ruleadd_op_dotminus=ruleadd_op_dotminus 
	 { $current=$iv_ruleadd_op_dotminus.current.getText(); }  
	 EOF 
;

// Rule add_op_dotminus
ruleadd_op_dotminus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='.-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAdd_op_dotminusAccess().getFullStopHyphenMinusKeyword(), null); 
    }

    ;





// Entry rule entryRulerel_op_Less_then
entryRulerel_op_Less_then returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRel_op_Less_thenRule(), currentNode); } 
	 iv_rulerel_op_Less_then=rulerel_op_Less_then 
	 { $current=$iv_rulerel_op_Less_then.current.getText(); }  
	 EOF 
;

// Rule rel_op_Less_then
rulerel_op_Less_then returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRel_op_Less_thenAccess().getLessThanSignKeyword(), null); 
    }

    ;





// Entry rule entryRulerel_op_Less_equal
entryRulerel_op_Less_equal returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRel_op_Less_equalRule(), currentNode); } 
	 iv_rulerel_op_Less_equal=rulerel_op_Less_equal 
	 { $current=$iv_rulerel_op_Less_equal.current.getText(); }  
	 EOF 
;

// Rule rel_op_Less_equal
rulerel_op_Less_equal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRel_op_Less_equalAccess().getLessThanSignEqualsSignKeyword(), null); 
    }

    ;





// Entry rule entryRulerel_op_greater_then
entryRulerel_op_greater_then returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRel_op_greater_thenRule(), currentNode); } 
	 iv_rulerel_op_greater_then=rulerel_op_greater_then 
	 { $current=$iv_rulerel_op_greater_then.current.getText(); }  
	 EOF 
;

// Rule rel_op_greater_then
rulerel_op_greater_then returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRel_op_greater_thenAccess().getGreaterThanSignKeyword(), null); 
    }

    ;





// Entry rule entryRulerel_op_greater_equal
entryRulerel_op_greater_equal returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRel_op_greater_equalRule(), currentNode); } 
	 iv_rulerel_op_greater_equal=rulerel_op_greater_equal 
	 { $current=$iv_rulerel_op_greater_equal.current.getText(); }  
	 EOF 
;

// Rule rel_op_greater_equal
rulerel_op_greater_equal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRel_op_greater_equalAccess().getGreaterThanSignEqualsSignKeyword(), null); 
    }

    ;





// Entry rule entryRulerel_op_assignment
entryRulerel_op_assignment returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRel_op_assignmentRule(), currentNode); } 
	 iv_rulerel_op_assignment=rulerel_op_assignment 
	 { $current=$iv_rulerel_op_assignment.current.getText(); }  
	 EOF 
;

// Rule rel_op_assignment
rulerel_op_assignment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='==' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRel_op_assignmentAccess().getEqualsSignEqualsSignKeyword(), null); 
    }

    ;





// Entry rule entryRulerel_op_Oper
entryRulerel_op_Oper returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRel_op_OperRule(), currentNode); } 
	 iv_rulerel_op_Oper=rulerel_op_Oper 
	 { $current=$iv_rulerel_op_Oper.current.getText(); }  
	 EOF 
;

// Rule rel_op_Oper
rulerel_op_Oper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='<>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRel_op_OperAccess().getLessThanSignGreaterThanSignKeyword(), null); 
    }

    ;





// Entry rule entryRulecomment
entryRulecomment returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommentRule(), currentNode); } 
	 iv_rulecomment=rulecomment 
	 { $current=$iv_rulecomment.current.getText(); }  
	 EOF 
;

// Rule comment
rulecomment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getCommentAccess().getString_commentParserRuleCall(), currentNode); 
    }
    this_string_comment_0=rulestring_comment    {
		$current.merge(this_string_comment_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulestring_comment
entryRulestring_comment returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getString_commentRule(), currentNode); } 
	 iv_rulestring_comment=rulestring_comment 
	 { $current=$iv_rulestring_comment.current.getText(); }  
	 EOF 
;

// Rule string_comment
rulestring_comment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getString_commentAccess().getSTRINGTerminalRuleCall_0(), null); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getString_commentAccess().getPlusSignKeyword_1_0(), null); 
    }
    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    createLeafNode(grammarAccess.getString_commentAccess().getSTRINGTerminalRuleCall_1_1(), null); 
    }
)*)?
    ;





RULE_UNSIGNED_NUMBER : (('0'..'9')+ '.' ('0'..'9')* (('E'|'e') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('E'|'e') ('+'|'-')? ('0'..'9')+);

RULE_BOOL_VAL : ('true'|'false');

RULE_INT : ('0'..'9')+;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_IDENT : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'.')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


