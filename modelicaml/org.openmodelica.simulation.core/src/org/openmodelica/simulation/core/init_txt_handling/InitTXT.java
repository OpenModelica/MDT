/*
 * This file is part of OpenModelica.
 *
 * Copyright (c) 1998-CurrentYear, Open Source Modelica Consortium (OSMC),
 * c/o Linköpings universitet, Department of Computer and Information Science,
 * SE-58183 Linköping, Sweden.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR 
 * THIS OSMC PUBLIC LICENSE (OSMC-PL). 
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE
 * OF THE OSMC PUBLIC LICENSE OR THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE. 
 *
 * The OpenModelica software and the Open Source Modelica
 * Consortium (OSMC) Public License (OSMC-PL) are obtained
 * from OSMC, either from the above address,
 * from the URLs: http://www.ida.liu.se/projects/OpenModelica or  
 * http://www.openmodelica.org, and in the OpenModelica distribution. 
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
 * IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF OSMC-PL.
 *
 * See the full OSMC Public License conditions for more details.
 *
 * Main author: Wladimir Schamai, EADS Innovation Works / Linköping University, 2009-now
 *
 * Contributors: 
 *   Uwe Pohlmann, University of Paderborn 2009-2010, contribution to the Modelica code generation for state machine behavior, contribution to Papyrus GUI adoptations
 *   Parham Vasaiely, EADS Innovation Works / Hamburg University of Applied Sciences 2009-2011, implementation of simulation plugins
 */
package org.openmodelica.simulation.core.init_txt_handling;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

// TODO: Auto-generated Javadoc
/**
 * This class represents an OpenModelica init.txt file structure 
 * which will be used while reading and manipulating an init.txt file.
 * This file is generated by the OMC and is used by OpenModelica to initialize a corresponding simulation runtime executable.
 * 
 * <b>NOTE1:</b> the properties order of the original init.txt have be respected! otherwise an error occurs while writing the data back to the init.txt
 * 
 * @author EADS Innovation Works, Parham Vasaiely, Parham.Vasaiely@gmx.de
 */
public class InitTXT {

	/**
	 * initial file name e.g. model_init.txt
	 */
	public String fileName;
	
	/** The start. */
	public Double start;
	
	/** The stop. */
	public Double stop;
	
	/** The step. */
	public Double step;
	
	/** The tolerance. */
	public Double tolerance;
	
	/** The method. */
	public String method;
	
	/** The output format. */
	public String outputFormat;
	
	/** The states. */
	public Integer states;
	
	/** The alg_vars. */
	public Integer alg_vars;
	
	/** The parameters. */
	public Integer parameters;
	
	/** The n_int_parameters. */
	public Integer n_int_parameters;
	
	/** The n_int_variables. */
	public Integer n_int_variables;
	
	/** The n_bool_parameters. */
	public Integer n_bool_parameters;
	
	/** The n_bool_variables. */
	public Integer n_bool_variables;
	
	/** The string_parameters. */
	public Integer string_parameters;
	
	/** The string_variables. */
	public Integer string_variables;

	
	//TODO [20100912] Die verwendung von ArrayList zur einhaltung der sortierung und gleichzeitig Map zur datenhaltung ist fraglich aber äußerst billig...
	
	/**
	 * Map of all state properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> stateProperties;
	
	/** The orderd state properties. */
	public List<String> orderdStateProperties;
	
	/**
	 * Map of all state properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> derStateProperties;
	
	/** The orderd der state properties. */
	public List<String> orderdDerStateProperties;
	
	/**
	 * Map of all algorithm properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> algProperties;
	
	/** The orderd alg properties. */
	public List<String> orderdAlgProperties;
	/**
	 * Map of all parameter properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> parameterProperties;
	
	/** The orderd parameter properties. */
	public List<String> orderdParameterProperties;
	
	/**
	 * Map of all parameter properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> n_int_parametersProperties;
	
	/** The orderd n_int_parameters properties. */
	public List<String> orderdN_int_parametersProperties;
	
	/**
	 * Map of all parameter properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> n_int_variablesProperties;
	
	/** The orderd n_int_variables properties. */
	public List<String> orderdN_int_variablesProperties;
	
	/**
	 * Map of all parameter properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> n_bool_parametersProperties;
	
	/** The orderd n_bool_parameters properties. */
	public List<String> orderdN_bool_parametersProperties;
	
	/**
	 * Map of all parameter properties read from the init.txt
	 * Note: A non-ordered Map will be used to respect the order while writing back to the init.txt file
	 */
	public Map<String, Double> n_bool_variablesProperties;
	
	/** The orderd n_bool_variables properties. */
	public List<String> orderdN_bool_variablesProperties;
	
	/**
	 * Instantiates a new inits the txt.
	 */
	public InitTXT() {
		
		this.start = 0.0;
		this.stop = 0.0;
		this.step = 0.0;
		this.tolerance = 0.0;
		this.method = "";
		this.outputFormat = "";
		this.states = 0;
		this.alg_vars = 0;
		this.parameters = 0;
		this.n_int_parameters = 0;
		this.n_int_variables = 0;
		this.n_bool_parameters = 0;
		this.n_bool_variables = 0;
		this.string_parameters = 0;
		this.string_variables = 0;
		
		stateProperties = new TreeMap<String, Double>();
		algProperties = new TreeMap<String, Double>();
		parameterProperties = new TreeMap<String, Double>();
		n_int_parametersProperties = new TreeMap<String, Double>();
		n_int_variablesProperties = new TreeMap<String, Double>();
		n_bool_parametersProperties = new TreeMap<String, Double>();
		n_bool_variablesProperties = new TreeMap<String, Double>();
		derStateProperties  = new TreeMap<String, Double>();
		
		orderdStateProperties = new ArrayList<String>();
		orderdDerStateProperties = new ArrayList<String>();
		orderdAlgProperties = new ArrayList<String>();
		orderdParameterProperties = new ArrayList<String>();
		orderdN_int_parametersProperties = new ArrayList<String>();
		orderdN_int_variablesProperties = new ArrayList<String>();
		orderdN_bool_parametersProperties = new ArrayList<String>();
		orderdN_bool_variablesProperties = new ArrayList<String>();
	}
	
	
	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	public String toString(){
		String s = "InitTXT -> fileName: " + fileName + " start: " + start + " stop: " + stop + " step: " + step + " tolerance: " + tolerance + " method: " + method + " outputFormat: " + outputFormat;
		return s;
	}
//	/**
//	 * This Comparator will be used to keep the order of the init.txt file. Normally a Map (hash or tree) will order the entries automatically 
//	 * @author Parham Vasaiely
//	 *
//	 */
//	private class KeepOrderComperator implements Comparator<Object>{
//
//		@Override
//		public int compare(Object o1, Object o2) {
//			System.out.println(o1 + " - " + o2 + " - " + ((String)o1).compareTo((String)o2));
//			if(((String)o1).compareTo((String)o2) == 0)
//				return 0;
//			
//			return 1;
//		}
//		
//	}
	
}
